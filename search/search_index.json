{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SQLDelight generates typesafe kotlin APIs from your SQL statements. It compile-time verifies your schema, statements, and migrations and provides IDE features like autocomplete and refactoring which make writing and maintaining SQL simple. SQLDelight understands your existing SQL schema. CREATE TABLE hockey_player ( id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT , name TEXT NOT NULL , number INTEGER NOT NULL ); It generates typesafe code for any labeled SQL statements. SQLDelight supports a variety of dialects and platforms: SQLite Android Native (iOS, macOS, or Windows) JVM Javascript (Work In Progress) Multiplatform MySQL (JVM) PostgreSQL (JVM) (Experimental) HSQL/H2 (JVM) (Experimental)","title":"Overview"},{"location":"changelog/","text":"Change Log [1.3.0] - 2020-04-03 New: [Gradle] Dialect property to specify with sql dialect to compile against. New: [Compiler] #1009 Experimental support of the mysql dialect. New: [Compiler] #1436 Support of sqlite:3.24 dialect and upsert. New: [JDBC Driver] Split out JDBC driver from sqlite jvm driver. Fix: [Compiler] #1199 Support lambdas of any length. Fix: [Compiler] #1610 Fix the return type of avg() to be nullable. Fix: [IntelliJ] #1594 Fix path separator handling which broke Goto and Find Usages on Windows. [1.2.2] - 2020-01-22 New: [Runtime] Support for Windows (mingW), tvOS, watchOS, and macOS architectures. Fix: [Compiler] Return type of sum() should be nullable. Fix: [Paging] Pass Transacter into QueryDataSourceFactory to avoid race conditions. Fix: [IntelliJ Plugin] Don't search through dependencies when looking for a file's package name. Fix: [Gradle] #862 Change validator logs in Gradle to debug level. Enhancement: [Gradle] Convert GenerateSchemaTask to use Gradle worker. Note: sqldelight-runtime artifact renamed to runtime. [1.2.1] - 2019-12-11 Fix: [Gradle] Kotlin Native 1.3.60 support. Fix: [Gradle] #1287 Warning when syncing. Fix: [Compiler] #1469 SynetheticAccessor creation for query. Fix: [JVM Driver] Fixed memory leak. NOTE: The coroutine extension artifact requires kotlinx bintray maven repository be added to your buildscript. [1.2.0] - 2019-08-30 New: [Runtime] Stable Flow api. Fix: [Gradle] Kotlin Native 1.3.50 support. Fix: [Gradle] #1380 Clean build sometimes fails. Fix: [Gradle] #1348 Running verify tasks prints \"Could not retrieve functions\". Fix: [Compile] #1405 Can't build project if query contains FTS table joined. Fix: [Gradle] #1266 Sporadic gradle build failure while having multiple database modules. [1.1.4] - 2019-07-11 New: [Runtime] Experimental kotlin Flow api. Fix: [Gradle] Kotlin/Native 1.3.40 compatibility. Fix: [Gradle] #1243 Fix for usage of SQLDelight with Gradle configure on demand. Fix: [Gradle] #1385 Fix for usage of SQLDelight with incremental annotation processing. Fix: [Gradle] Allow gradle tasks to cache. Fix: [Gradle] #1274 Enable usage of sqldelight extension with kotlin dsl. Fix: [Compiler] Unique ids are generated for each query deterministically. Fix: [Compiler] Only notify listening queries when a transaction is complete. Fix: [JVM Driver] #1370 Force JdbcSqliteDriver users to supply a DB URL. [1.1.3] - 2019-04-14 Gradle Metadata 1.0 release. [1.1.2] - 2019-04-14 New: [Runtime] #1267 Logging driver decorator. Fix: [Compiler] #1254 Split string literals which are longer than 2^16 characters. Fix: [Gradle] #1260 generated sources are recognized as iOS source in Multiplatform Project. Fix: [IDE] #1290 kotlin.KotlinNullPointerException in CopyAsSqliteAction.kt:43. Fix: [Gradle] #1268 Running linkDebugFrameworkIos* tasks fail in recent versions. [1.1.1] - 2019-03-01 Fix: [Gradle] Fix module dependency compilation for android projects. Fix: [Gradle] #1246 Set up api dependencies in afterEvaluate. Fix: [Compiler] Array types are properly printed. [1.1.0] - 2019-02-27 New: [Gradle] #502 Allow specifying schema module dependencies. Enhancement: [Compiler] #1111 Table errors are sorted before other errors. Fix: [Compiler] #1225 Return the correct type for REAL literals. Fix: [Compiler] #1218 docid propagates through triggers. [1.0.3] - 2019-01-30 Enhancement: [Runtime] #1195 Native Driver/Runtime Arm32. Enhancement: [Runtime] #1190 Expose the mapper from the Query type. [1.0.2] - 2019-01-26 Fix: [Gradle Plugin] Update to kotlin 1.3.20. Fix: [Runtime] Transactions no longer swallow exceptions. [1.0.1] - 2019-01-21 Enhancement: [Native Driver] Allow passing directory name to DatabaseConfiguration. Enhancement: [Compiler] #1173 Files without a package fail compilation. Fix: [IDE] Properly report IDE errors to Square. Fix: [IDE] #1162 Types in the same package show as error but work fine. Fix: [IDE] #1166 Renaming a table fails with NPE. Fix: [Compiler] #1167 Throws an exception when trying to parse complex SQL statements with UNION and SELECT. [1.0.0] - 2019-01-08 New: Complete overhaul of generated code, now in kotlin. New: RxJava2 extensions artifact. New: Android Paging extensions artifact. New: Kotlin Multiplatform support. New: Android, iOS and JVM SQLite driver artifacts. New: Transaction API. [0.7.0] - 2018-02-12 New: Generated code has been updated to use the Support SQLite library only. All queries now generate statement objects instead of a raw strings. New: Statement folding in the IDE. New: Boolean types are now automatically handled. Fix: Remove deprecated marshals from code generation. Fix: Correct 'avg' SQL function type mapping to be REAL. Fix: Correctly detect 'julianday' SQL function. [0.6.1] - 2017-03-22 New: Delete Update and Insert statements without arguments get compiled statements generated. Fix: Using clause within a view used in a subquery doesn't error. Fix: Duplicate types on generated Mapper removed. Fix: Subqueries can be used in expressions that check against arguments. [0.6.0] - 2017-03-06 New: Select queries are now exposed as a SqlDelightStatement factory instead of string constants. New: Query JavaDoc is now copied to statement and mapper factories. New: Emit string constants for view names. Fix: Queries on views which require factories now correctly require those factories are arguments. Fix: Validate the number of arguments to an insert matches the number of columns specified. Fix: Properly encode blob literals used in where clauses. Gradle 3.3 or newer is required for this release. [0.5.1] - 2016-10-24 New: Compiled statements extend an abstract type. Fix: Primitive types in parameters will be boxed if nullable. Fix: All required factories for bind args are present in factory method. Fix: Escaped column names are marshalled correctly. [0.5.0] - 2016-10-19 New: SQLite arguments can be passed typesafely through the Factory New: IntelliJ plugin performs formatting on .sq files New: Support for SQLite timestamp literals Fix: Parameterized types can be clicked through in IntelliJ Fix: Escaped column names no longer throw RuntimeExceptions if grabbed from Cursor. Fix: Gradle plugin doesn't crash trying to print exceptions. [0.4.4] - 2016-07-20 New: Native support for shorts as column java type New: Javadoc on generated mappers and factory methods Fix: group_concat and nullif functions have proper nullability Fix: Compatibility with Android Studio 2.2-alpha Fix: WITH RECURSIVE no longer crashes plugin [0.4.3] - 2016-07-07 New: Compilation errors link to source file. New: Right-click to copy SQLDelight code as valid SQLite. New: Javadoc on named statements will appear on generated Strings. Fix: Generated view models include nullability annotations. Fix: Generated code from unions has proper type and nullability to support all possible columns. Fix: sum and round SQLite functions have proper type in generated code. Fix: CAST's, inner selects bugfixes. Fix: Autocomplete in CREATE TABLE statements. Fix: SQLite keywords can be used in packages. [0.4.2] - 2016-06-16 New: Marshal can be created from the factory. Fix: IntelliJ plugin generates factory methods with proper generic order. Fix: Function names can use any casing. [0.4.1] - 2016-06-14 Fix: IntelliJ plugin generates classes with proper generic order. Fix: Column definitions can use any casing. [0.4.0] - 2016-06-14 New: Mappers are generated per query instead of per table. New: Java types can be imported in .sq files. New: SQLite functions are validated. Fix: Remove duplicate errors. Fix: Uppercase column names and java keyword column names do not error. [0.3.2] - 2016-05-14 New: Autocompletion and find usages now work for views and aliases. Fix: Compile-time validation now allows functions to be used in selects. Fix: Support insert statements which only declare default values. Fix: Plugin no longer crashes when a project not using SQLDelight is imported. [0.3.1] - 2016-04-27 Fix: Interface visibility changed back to public to avoid Illegal Access runtime exceptions from method references. Fix: Subexpressions are evaluated properly. [0.3.0] - 2016-04-26 New: Column definitions use SQLite types and can have additional 'AS' constraint to specify java type. New: Bug reports can be sent from the IDE. Fix: Autocomplete functions properly. Fix: SQLDelight model files update on .sq file edit. Removed: Attached databases no longer supported. [0.2.2] - 2016-03-07 New: Compile-time validation of the columns used by insert, update, delete, index, and trigger statements. Fix: Don't crash IDE plugin on file move/create. [0.2.1] - 2016-03-07 New: Ctrl+ / (Cmd+ / on OSX) toggles comment of the selected line(s). New: Compile-time validation of the columns used by SQL queries. Fix: Support Windows paths in both the IDE and Gradle plugin. [0.2.0] - 2016-02-29 New: Added copy constructor to Marshal class. New: Update to Kotlin 1.0 final. Fix: Report 'sqldelight' folder structure problems in a non-failing way. Fix: Forbid columns named table_name . Their generated constant clashes with the table name constant. Fix: Ensure IDE plugin generates model classes immediately and regardless of whether .sq files were opened. Fix: Support Windows paths in both the IDE and Gradle plugin. [0.1.2] - 2016-02-13 Fix: Remove code which prevented the Gradle plugin from being used in most projects. Fix: Add missing compiler dependency on the Antlr runtime. [0.1.1] - 2016-02-12 Fix: Ensure the Gradle plugin points to the same version of the runtime as itself. [0.1.0] - 2016-02-12 Initial release.","title":"Changelog"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#130-2020-04-03","text":"New: [Gradle] Dialect property to specify with sql dialect to compile against. New: [Compiler] #1009 Experimental support of the mysql dialect. New: [Compiler] #1436 Support of sqlite:3.24 dialect and upsert. New: [JDBC Driver] Split out JDBC driver from sqlite jvm driver. Fix: [Compiler] #1199 Support lambdas of any length. Fix: [Compiler] #1610 Fix the return type of avg() to be nullable. Fix: [IntelliJ] #1594 Fix path separator handling which broke Goto and Find Usages on Windows.","title":"[1.3.0] - 2020-04-03"},{"location":"changelog/#122-2020-01-22","text":"New: [Runtime] Support for Windows (mingW), tvOS, watchOS, and macOS architectures. Fix: [Compiler] Return type of sum() should be nullable. Fix: [Paging] Pass Transacter into QueryDataSourceFactory to avoid race conditions. Fix: [IntelliJ Plugin] Don't search through dependencies when looking for a file's package name. Fix: [Gradle] #862 Change validator logs in Gradle to debug level. Enhancement: [Gradle] Convert GenerateSchemaTask to use Gradle worker. Note: sqldelight-runtime artifact renamed to runtime.","title":"[1.2.2] - 2020-01-22"},{"location":"changelog/#121-2019-12-11","text":"Fix: [Gradle] Kotlin Native 1.3.60 support. Fix: [Gradle] #1287 Warning when syncing. Fix: [Compiler] #1469 SynetheticAccessor creation for query. Fix: [JVM Driver] Fixed memory leak. NOTE: The coroutine extension artifact requires kotlinx bintray maven repository be added to your buildscript.","title":"[1.2.1] - 2019-12-11"},{"location":"changelog/#120-2019-08-30","text":"New: [Runtime] Stable Flow api. Fix: [Gradle] Kotlin Native 1.3.50 support. Fix: [Gradle] #1380 Clean build sometimes fails. Fix: [Gradle] #1348 Running verify tasks prints \"Could not retrieve functions\". Fix: [Compile] #1405 Can't build project if query contains FTS table joined. Fix: [Gradle] #1266 Sporadic gradle build failure while having multiple database modules.","title":"[1.2.0] - 2019-08-30"},{"location":"changelog/#114-2019-07-11","text":"New: [Runtime] Experimental kotlin Flow api. Fix: [Gradle] Kotlin/Native 1.3.40 compatibility. Fix: [Gradle] #1243 Fix for usage of SQLDelight with Gradle configure on demand. Fix: [Gradle] #1385 Fix for usage of SQLDelight with incremental annotation processing. Fix: [Gradle] Allow gradle tasks to cache. Fix: [Gradle] #1274 Enable usage of sqldelight extension with kotlin dsl. Fix: [Compiler] Unique ids are generated for each query deterministically. Fix: [Compiler] Only notify listening queries when a transaction is complete. Fix: [JVM Driver] #1370 Force JdbcSqliteDriver users to supply a DB URL.","title":"[1.1.4] - 2019-07-11"},{"location":"changelog/#113-2019-04-14","text":"Gradle Metadata 1.0 release.","title":"[1.1.3] - 2019-04-14"},{"location":"changelog/#112-2019-04-14","text":"New: [Runtime] #1267 Logging driver decorator. Fix: [Compiler] #1254 Split string literals which are longer than 2^16 characters. Fix: [Gradle] #1260 generated sources are recognized as iOS source in Multiplatform Project. Fix: [IDE] #1290 kotlin.KotlinNullPointerException in CopyAsSqliteAction.kt:43. Fix: [Gradle] #1268 Running linkDebugFrameworkIos* tasks fail in recent versions.","title":"[1.1.2] - 2019-04-14"},{"location":"changelog/#111-2019-03-01","text":"Fix: [Gradle] Fix module dependency compilation for android projects. Fix: [Gradle] #1246 Set up api dependencies in afterEvaluate. Fix: [Compiler] Array types are properly printed.","title":"[1.1.1] - 2019-03-01"},{"location":"changelog/#110-2019-02-27","text":"New: [Gradle] #502 Allow specifying schema module dependencies. Enhancement: [Compiler] #1111 Table errors are sorted before other errors. Fix: [Compiler] #1225 Return the correct type for REAL literals. Fix: [Compiler] #1218 docid propagates through triggers.","title":"[1.1.0] - 2019-02-27"},{"location":"changelog/#103-2019-01-30","text":"Enhancement: [Runtime] #1195 Native Driver/Runtime Arm32. Enhancement: [Runtime] #1190 Expose the mapper from the Query type.","title":"[1.0.3] - 2019-01-30"},{"location":"changelog/#102-2019-01-26","text":"Fix: [Gradle Plugin] Update to kotlin 1.3.20. Fix: [Runtime] Transactions no longer swallow exceptions.","title":"[1.0.2] - 2019-01-26"},{"location":"changelog/#101-2019-01-21","text":"Enhancement: [Native Driver] Allow passing directory name to DatabaseConfiguration. Enhancement: [Compiler] #1173 Files without a package fail compilation. Fix: [IDE] Properly report IDE errors to Square. Fix: [IDE] #1162 Types in the same package show as error but work fine. Fix: [IDE] #1166 Renaming a table fails with NPE. Fix: [Compiler] #1167 Throws an exception when trying to parse complex SQL statements with UNION and SELECT.","title":"[1.0.1] - 2019-01-21"},{"location":"changelog/#100-2019-01-08","text":"New: Complete overhaul of generated code, now in kotlin. New: RxJava2 extensions artifact. New: Android Paging extensions artifact. New: Kotlin Multiplatform support. New: Android, iOS and JVM SQLite driver artifacts. New: Transaction API.","title":"[1.0.0] - 2019-01-08"},{"location":"changelog/#070-2018-02-12","text":"New: Generated code has been updated to use the Support SQLite library only. All queries now generate statement objects instead of a raw strings. New: Statement folding in the IDE. New: Boolean types are now automatically handled. Fix: Remove deprecated marshals from code generation. Fix: Correct 'avg' SQL function type mapping to be REAL. Fix: Correctly detect 'julianday' SQL function.","title":"[0.7.0] - 2018-02-12"},{"location":"changelog/#061-2017-03-22","text":"New: Delete Update and Insert statements without arguments get compiled statements generated. Fix: Using clause within a view used in a subquery doesn't error. Fix: Duplicate types on generated Mapper removed. Fix: Subqueries can be used in expressions that check against arguments.","title":"[0.6.1] - 2017-03-22"},{"location":"changelog/#060-2017-03-06","text":"New: Select queries are now exposed as a SqlDelightStatement factory instead of string constants. New: Query JavaDoc is now copied to statement and mapper factories. New: Emit string constants for view names. Fix: Queries on views which require factories now correctly require those factories are arguments. Fix: Validate the number of arguments to an insert matches the number of columns specified. Fix: Properly encode blob literals used in where clauses. Gradle 3.3 or newer is required for this release.","title":"[0.6.0] - 2017-03-06"},{"location":"changelog/#051-2016-10-24","text":"New: Compiled statements extend an abstract type. Fix: Primitive types in parameters will be boxed if nullable. Fix: All required factories for bind args are present in factory method. Fix: Escaped column names are marshalled correctly.","title":"[0.5.1] - 2016-10-24"},{"location":"changelog/#050-2016-10-19","text":"New: SQLite arguments can be passed typesafely through the Factory New: IntelliJ plugin performs formatting on .sq files New: Support for SQLite timestamp literals Fix: Parameterized types can be clicked through in IntelliJ Fix: Escaped column names no longer throw RuntimeExceptions if grabbed from Cursor. Fix: Gradle plugin doesn't crash trying to print exceptions.","title":"[0.5.0] - 2016-10-19"},{"location":"changelog/#044-2016-07-20","text":"New: Native support for shorts as column java type New: Javadoc on generated mappers and factory methods Fix: group_concat and nullif functions have proper nullability Fix: Compatibility with Android Studio 2.2-alpha Fix: WITH RECURSIVE no longer crashes plugin","title":"[0.4.4] - 2016-07-20"},{"location":"changelog/#043-2016-07-07","text":"New: Compilation errors link to source file. New: Right-click to copy SQLDelight code as valid SQLite. New: Javadoc on named statements will appear on generated Strings. Fix: Generated view models include nullability annotations. Fix: Generated code from unions has proper type and nullability to support all possible columns. Fix: sum and round SQLite functions have proper type in generated code. Fix: CAST's, inner selects bugfixes. Fix: Autocomplete in CREATE TABLE statements. Fix: SQLite keywords can be used in packages.","title":"[0.4.3] - 2016-07-07"},{"location":"changelog/#042-2016-06-16","text":"New: Marshal can be created from the factory. Fix: IntelliJ plugin generates factory methods with proper generic order. Fix: Function names can use any casing.","title":"[0.4.2] - 2016-06-16"},{"location":"changelog/#041-2016-06-14","text":"Fix: IntelliJ plugin generates classes with proper generic order. Fix: Column definitions can use any casing.","title":"[0.4.1] - 2016-06-14"},{"location":"changelog/#040-2016-06-14","text":"New: Mappers are generated per query instead of per table. New: Java types can be imported in .sq files. New: SQLite functions are validated. Fix: Remove duplicate errors. Fix: Uppercase column names and java keyword column names do not error.","title":"[0.4.0] - 2016-06-14"},{"location":"changelog/#032-2016-05-14","text":"New: Autocompletion and find usages now work for views and aliases. Fix: Compile-time validation now allows functions to be used in selects. Fix: Support insert statements which only declare default values. Fix: Plugin no longer crashes when a project not using SQLDelight is imported.","title":"[0.3.2] - 2016-05-14"},{"location":"changelog/#031-2016-04-27","text":"Fix: Interface visibility changed back to public to avoid Illegal Access runtime exceptions from method references. Fix: Subexpressions are evaluated properly.","title":"[0.3.1] - 2016-04-27"},{"location":"changelog/#030-2016-04-26","text":"New: Column definitions use SQLite types and can have additional 'AS' constraint to specify java type. New: Bug reports can be sent from the IDE. Fix: Autocomplete functions properly. Fix: SQLDelight model files update on .sq file edit. Removed: Attached databases no longer supported.","title":"[0.3.0] - 2016-04-26"},{"location":"changelog/#022-2016-03-07","text":"New: Compile-time validation of the columns used by insert, update, delete, index, and trigger statements. Fix: Don't crash IDE plugin on file move/create.","title":"[0.2.2] - 2016-03-07"},{"location":"changelog/#021-2016-03-07","text":"New: Ctrl+ / (Cmd+ / on OSX) toggles comment of the selected line(s). New: Compile-time validation of the columns used by SQL queries. Fix: Support Windows paths in both the IDE and Gradle plugin.","title":"[0.2.1] - 2016-03-07"},{"location":"changelog/#020-2016-02-29","text":"New: Added copy constructor to Marshal class. New: Update to Kotlin 1.0 final. Fix: Report 'sqldelight' folder structure problems in a non-failing way. Fix: Forbid columns named table_name . Their generated constant clashes with the table name constant. Fix: Ensure IDE plugin generates model classes immediately and regardless of whether .sq files were opened. Fix: Support Windows paths in both the IDE and Gradle plugin.","title":"[0.2.0] - 2016-02-29"},{"location":"changelog/#012-2016-02-13","text":"Fix: Remove code which prevented the Gradle plugin from being used in most projects. Fix: Add missing compiler dependency on the Antlr runtime.","title":"[0.1.2] - 2016-02-13"},{"location":"changelog/#011-2016-02-12","text":"Fix: Ensure the Gradle plugin points to the same version of the runtime as itself.","title":"[0.1.1] - 2016-02-12"},{"location":"changelog/#010-2016-02-12","text":"Initial release.","title":"[0.1.0] - 2016-02-12"},{"location":"code_of_conduct/","text":"Open Source Code of Conduct At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure our community continues to be truly open for everyone. This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Square\u2019s open source community strives to: Be open : We invite anyone to participate in any aspect of our projects. Our community is open, and any responsibility can be carried by a contributor who demonstrates the required capacity and competence. Be considerate : People use our work, and we depend on the work of others. Consider users and colleagues before taking action. For example, changes to code, infrastructure, policy, and documentation may negatively impact others. Be respectful : We expect people to work together to resolve conflict, assume good intentions, and act with empathy. Do not turn disagreements into personal attacks. Be collaborative : Collaboration reduces redundancy and improves the quality of our work. We strive for transparency within our open source community, and we work closely with upstream developers and others in the free software community to coordinate our efforts. Be pragmatic : Questions are encouraged and should be asked early in the process to avoid problems later. Be thoughtful and considerate when seeking out the appropriate forum for your questions. Those who are asked should be responsive and helpful. Step down considerately : Members of every project come and go. When somebody leaves or disengages from the project, they should make it known and take the proper steps to ensure that others can pick up where they left off. This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter. Diversity Statement We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities. Reporting Issues If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . For more details, please see our Reporting Guidelines below. Thanks Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter , Ubuntu , GDC , and Django communities. We are thankful for their work. Reporting Guide If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond. Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.","title":"Code of Conduct"},{"location":"code_of_conduct/#open-source-code-of-conduct","text":"At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure our community continues to be truly open for everyone. This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Square\u2019s open source community strives to: Be open : We invite anyone to participate in any aspect of our projects. Our community is open, and any responsibility can be carried by a contributor who demonstrates the required capacity and competence. Be considerate : People use our work, and we depend on the work of others. Consider users and colleagues before taking action. For example, changes to code, infrastructure, policy, and documentation may negatively impact others. Be respectful : We expect people to work together to resolve conflict, assume good intentions, and act with empathy. Do not turn disagreements into personal attacks. Be collaborative : Collaboration reduces redundancy and improves the quality of our work. We strive for transparency within our open source community, and we work closely with upstream developers and others in the free software community to coordinate our efforts. Be pragmatic : Questions are encouraged and should be asked early in the process to avoid problems later. Be thoughtful and considerate when seeking out the appropriate forum for your questions. Those who are asked should be responsive and helpful. Step down considerately : Members of every project come and go. When somebody leaves or disengages from the project, they should make it known and take the proper steps to ensure that others can pick up where they left off. This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter.","title":"Open Source Code of Conduct"},{"location":"code_of_conduct/#diversity-statement","text":"We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities.","title":"Diversity Statement"},{"location":"code_of_conduct/#reporting-issues","text":"If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . For more details, please see our Reporting Guidelines below.","title":"Reporting Issues"},{"location":"code_of_conduct/#thanks","text":"Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter , Ubuntu , GDC , and Django communities. We are thankful for their work.","title":"Thanks"},{"location":"code_of_conduct/#reporting-guide","text":"If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond. Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.","title":"Reporting Guide"},{"location":"contributing/","text":"Contributing If you would like to contribute code to this project you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Before your code can be accepted into the project you must also sign the Individual Contributor License Agreement (CLA) .","title":"Contributing"},{"location":"contributing/#contributing","text":"If you would like to contribute code to this project you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Before your code can be accepted into the project you must also sign the Individual Contributor License Agreement (CLA) .","title":"Contributing"},{"location":"upgrading/","text":"Upgrading from Versions before 1.0 If you're still on SQLDelight 0.6 doing the upgrade to 0.7 first so you stay on the SupportSQLite artifact will likely be easiest Upgrade the gradle plugin from 0.7 to 0.7.1. This will upgrade the arch.persistence.db dependency to 1.1.1, but should have no effect on your usage of sqldelight. Upgrade the gradle plugin from 0.7.1 to 0.7.2. This changes the runtime package from com.squareup.sqldelight to com.squareup.sqldelight.prerelease , so you will need to change references in your own code. Upgrade the gradle plugin from 0.7.2 to 0.9.0. This upgrades the transitive dependencies and generated code to instead use AndroidX, which is a requirement of SQLDelight. This should be done at the same time as you upgrading your own project to AndroidX, and cannot be done separately since SQLDelight generates code which references android support/AndroidX. ALTERNATIVELY Upgrade the gradle plugin from 0.7 to 0.8.0 before then upgrading to 0.9.0. This upgrades to AndroidX without changing the sqldelight package name to com.squareup.sqldelight.prerelease Suppose on SQLDelight 0.9 you have this User.sq file: CREATE TABLE user ( id INTEGER NOT NULL PRIMARY KEY , name TEXT NOT NULL ); insertDefaultData : INSERT INTO user VALUES ( 1 , 'Alec' ); users : SELECT * FROM user ; names : SELECT name FROM user ; insertUser : INSERT INTO user VALUES ( ? , ? ); This will generate the UserModel class with methods for your queries. Copy and paste all *Model.java files out of the build directory and into your src/main/java folder. Upgrade the gradle plugin from 0.9 to 1.0.0-rc4. Note your build will fail at this point because of the model code having undefined references to the old SQL Delight runtime (like SqlDelightStatement ). To add these back in add an implementation dependency on com.squareup.sqldelight:runtime:0.9.0 . At this point your build should still be working, but changes to .sq files will not be reflected in your *Model.java files. If things aren't working at this point, please file an issue! Begin by modifying your SupportSQLiteOpenHelper.Callback to call into the now generated Database which holds generated code for SQL Delight 1.0: //Before @Override void onCreate ( SupportSQLiteDatabase db ) { db . execSql ( UserModel . CREATE_TABLE ); db . execSql ( UserModel . INSERTDEFAULTDATA ); // Other create table/initialization } In SQL Delight 1.0 all unlabeled statements in .sq files (including CREATE statements) will be run during onCreate , so we can remove the insertDefaultData identifier from above: User.sq ... --insertDefaultData: INSERT INTO user VALUES ( 1 , 'Alec' ); ... and now your SupportSQLiteOpenHelper.Callback should call into the Database for create @Override void onCreate ( SupportSQLiteDatabase db ) { SqlDriver driver = AndroidSqliteDriver ( db ) Database . Schema . create ( driver ) } You can do the same for your migrations if you place them in .sqm files, but thats not necessary part of the upgrade. At this point things should still work normally. Next add in the code to create your Database as part of an object graph/singleton pattern/whevs: @Provides @Singleton static SupportSQLiteOpenHelper provideDatabaseHelper ( @App Context context ) { SupportSQLiteOpenHelper . Configuration config = SupportSQLiteOpenHelper . Configuration . builder ( context ) . name ( DATABASE_NAME ) . callback ( new MyDatabaseCallback ()) . build (); return new FrameworkSQLiteOpenHelperFactory (). create ( config ); } @Provides @Singleton static Database provideDatabase ( SupportSQLiteOpenHelper helper ) { return new Database ( new AndroidSqliteDriver ( helper )); } If you're also using SQL Brite make sure you create a BriteDatabase with the same SupportSQLiteOpenHelper that's being used to create the Database . Things should still be working. The following assume you're using SQL Brite to get reactive callbacks from the database, but upgrades using only SQL Delight will be similar. Mutating queries can be converted individually by using the Database : before: private val insertUser : UserModel . InsertUser by lazy { UserModel . InsertUser ( datbaseOpenHelper . writableDatabase ) } insertUser . bind ( 2 , \"Jake\" ) insertUser . executeInsert () after: database . userQueries . insertUser ( 2 , \"Jake\" ) You no longer need a \"Factory\" type to perform queries, the query wrapper is all that is needed. before: val query = User . FACTORY . users () val usersObservable = briteDatabase . createQuery ( query . tables , query . statement , query . args ) . mapToList ( User . FACTORY . usersMapper () :: map ) after: val usersObservable = database . userQueries . users () . asObservable ( Schedulers . io ()) // The scheduler to run the query on. . mapToList () If you still want to use a custom type, pass it as a parameter to the query. val myUsersObservable = database . userQueries . users ( :: MyUser ) . asObservable ( Schedulers . io ()) . mapToList () Once you no longer have references to UserModel.java , delete the whole class. Repeat for each of your *Model.java files until upgrading is complete!","title":"Upgrading from Versions before 1.0"},{"location":"upgrading/#upgrading-from-versions-before-10","text":"If you're still on SQLDelight 0.6 doing the upgrade to 0.7 first so you stay on the SupportSQLite artifact will likely be easiest Upgrade the gradle plugin from 0.7 to 0.7.1. This will upgrade the arch.persistence.db dependency to 1.1.1, but should have no effect on your usage of sqldelight. Upgrade the gradle plugin from 0.7.1 to 0.7.2. This changes the runtime package from com.squareup.sqldelight to com.squareup.sqldelight.prerelease , so you will need to change references in your own code. Upgrade the gradle plugin from 0.7.2 to 0.9.0. This upgrades the transitive dependencies and generated code to instead use AndroidX, which is a requirement of SQLDelight. This should be done at the same time as you upgrading your own project to AndroidX, and cannot be done separately since SQLDelight generates code which references android support/AndroidX. ALTERNATIVELY Upgrade the gradle plugin from 0.7 to 0.8.0 before then upgrading to 0.9.0. This upgrades to AndroidX without changing the sqldelight package name to com.squareup.sqldelight.prerelease Suppose on SQLDelight 0.9 you have this User.sq file: CREATE TABLE user ( id INTEGER NOT NULL PRIMARY KEY , name TEXT NOT NULL ); insertDefaultData : INSERT INTO user VALUES ( 1 , 'Alec' ); users : SELECT * FROM user ; names : SELECT name FROM user ; insertUser : INSERT INTO user VALUES ( ? , ? ); This will generate the UserModel class with methods for your queries. Copy and paste all *Model.java files out of the build directory and into your src/main/java folder. Upgrade the gradle plugin from 0.9 to 1.0.0-rc4. Note your build will fail at this point because of the model code having undefined references to the old SQL Delight runtime (like SqlDelightStatement ). To add these back in add an implementation dependency on com.squareup.sqldelight:runtime:0.9.0 . At this point your build should still be working, but changes to .sq files will not be reflected in your *Model.java files. If things aren't working at this point, please file an issue! Begin by modifying your SupportSQLiteOpenHelper.Callback to call into the now generated Database which holds generated code for SQL Delight 1.0: //Before @Override void onCreate ( SupportSQLiteDatabase db ) { db . execSql ( UserModel . CREATE_TABLE ); db . execSql ( UserModel . INSERTDEFAULTDATA ); // Other create table/initialization } In SQL Delight 1.0 all unlabeled statements in .sq files (including CREATE statements) will be run during onCreate , so we can remove the insertDefaultData identifier from above: User.sq ... --insertDefaultData: INSERT INTO user VALUES ( 1 , 'Alec' ); ... and now your SupportSQLiteOpenHelper.Callback should call into the Database for create @Override void onCreate ( SupportSQLiteDatabase db ) { SqlDriver driver = AndroidSqliteDriver ( db ) Database . Schema . create ( driver ) } You can do the same for your migrations if you place them in .sqm files, but thats not necessary part of the upgrade. At this point things should still work normally. Next add in the code to create your Database as part of an object graph/singleton pattern/whevs: @Provides @Singleton static SupportSQLiteOpenHelper provideDatabaseHelper ( @App Context context ) { SupportSQLiteOpenHelper . Configuration config = SupportSQLiteOpenHelper . Configuration . builder ( context ) . name ( DATABASE_NAME ) . callback ( new MyDatabaseCallback ()) . build (); return new FrameworkSQLiteOpenHelperFactory (). create ( config ); } @Provides @Singleton static Database provideDatabase ( SupportSQLiteOpenHelper helper ) { return new Database ( new AndroidSqliteDriver ( helper )); } If you're also using SQL Brite make sure you create a BriteDatabase with the same SupportSQLiteOpenHelper that's being used to create the Database . Things should still be working. The following assume you're using SQL Brite to get reactive callbacks from the database, but upgrades using only SQL Delight will be similar. Mutating queries can be converted individually by using the Database : before: private val insertUser : UserModel . InsertUser by lazy { UserModel . InsertUser ( datbaseOpenHelper . writableDatabase ) } insertUser . bind ( 2 , \"Jake\" ) insertUser . executeInsert () after: database . userQueries . insertUser ( 2 , \"Jake\" ) You no longer need a \"Factory\" type to perform queries, the query wrapper is all that is needed. before: val query = User . FACTORY . users () val usersObservable = briteDatabase . createQuery ( query . tables , query . statement , query . args ) . mapToList ( User . FACTORY . usersMapper () :: map ) after: val usersObservable = database . userQueries . users () . asObservable ( Schedulers . io ()) // The scheduler to run the query on. . mapToList () If you still want to use a custom type, pass it as a parameter to the query. val myUsersObservable = database . userQueries . users ( :: MyUser ) . asObservable ( Schedulers . io ()) . mapToList () Once you no longer have references to UserModel.java , delete the whole class. Repeat for each of your *Model.java files until upgrading is complete!","title":"Upgrading from Versions before 1.0"},{"location":"1.x/android-driver/","text":"android-driver Packages Name Summary com.squareup.sqldelight.android Index All Types","title":"android-driver"},{"location":"1.x/android-driver/#packages","text":"Name Summary com.squareup.sqldelight.android","title":"Packages"},{"location":"1.x/android-driver/#index","text":"All Types","title":"Index"},{"location":"1.x/android-driver/alltypes/","text":"All Types Name Summary com.squareup.sqldelight.android.AndroidSqliteDriver","title":"Home"},{"location":"1.x/android-driver/alltypes/#all-types","text":"Name Summary com.squareup.sqldelight.android.AndroidSqliteDriver","title":"All Types"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/","text":"android-driver / com.squareup.sqldelight.android Package com.squareup.sqldelight.android Types Name Summary AndroidSqliteDriver class AndroidSqliteDriver : SqlDriver","title":"Home"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/#package-comsquareupsqldelightandroid","text":"","title":"Package com.squareup.sqldelight.android"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/#types","text":"Name Summary AndroidSqliteDriver class AndroidSqliteDriver : SqlDriver","title":"Types"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/","text":"android-driver / com.squareup.sqldelight.android / AndroidSqliteDriver AndroidSqliteDriver class AndroidSqliteDriver : SqlDriver Types Name Summary Callback class Callback : Callback Transaction inner class Transaction : Transaction Constructors Name Summary <init> AndroidSqliteDriver(openHelper: SupportSQLiteOpenHelper) AndroidSqliteDriver(schema: Schema, context: Context, name: String ? = null, factory: Factory = FrameworkSQLiteOpenHelperFactory(), callback: Callback = AndroidSqliteDriver.Callback(schema), cacheSize: Int = DEFAULT_CACHE_SIZE, useNoBackupDirectory: Boolean = false) AndroidSqliteDriver(database: SupportSQLiteDatabase, cacheSize: Int = DEFAULT_CACHE_SIZE) Functions Name Summary close fun close(): Unit currentTransaction fun currentTransaction(): Transaction! execute fun execute(identifier: Int ?, sql: String , parameters: Int , binders: (SqlPreparedStatement.() -> Unit )?): Unit executeQuery fun executeQuery(identifier: Int ?, sql: String , parameters: Int , binders: (SqlPreparedStatement.() -> Unit )?): SqlCursor newTransaction fun newTransaction(): Transaction","title":"Home"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/#androidsqlitedriver","text":"class AndroidSqliteDriver : SqlDriver","title":"AndroidSqliteDriver"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/#types","text":"Name Summary Callback class Callback : Callback Transaction inner class Transaction : Transaction","title":"Types"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/#constructors","text":"Name Summary <init> AndroidSqliteDriver(openHelper: SupportSQLiteOpenHelper) AndroidSqliteDriver(schema: Schema, context: Context, name: String ? = null, factory: Factory = FrameworkSQLiteOpenHelperFactory(), callback: Callback = AndroidSqliteDriver.Callback(schema), cacheSize: Int = DEFAULT_CACHE_SIZE, useNoBackupDirectory: Boolean = false) AndroidSqliteDriver(database: SupportSQLiteDatabase, cacheSize: Int = DEFAULT_CACHE_SIZE)","title":"Constructors"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/#functions","text":"Name Summary close fun close(): Unit currentTransaction fun currentTransaction(): Transaction! execute fun execute(identifier: Int ?, sql: String , parameters: Int , binders: (SqlPreparedStatement.() -> Unit )?): Unit executeQuery fun executeQuery(identifier: Int ?, sql: String , parameters: Int , binders: (SqlPreparedStatement.() -> Unit )?): SqlCursor newTransaction fun newTransaction(): Transaction","title":"Functions"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-init-/","text":"android-driver / com.squareup.sqldelight.android / AndroidSqliteDriver / <init> <init> AndroidSqliteDriver(openHelper: SupportSQLiteOpenHelper) AndroidSqliteDriver(database: SupportSQLiteDatabase, cacheSize: Int = DEFAULT_CACHE_SIZE)``AndroidSqliteDriver(schema: Schema, context: Context, name: String ? = null, factory: Factory = FrameworkSQLiteOpenHelperFactory(), callback: Callback = AndroidSqliteDriver.Callback(schema), cacheSize: Int = DEFAULT_CACHE_SIZE, useNoBackupDirectory: Boolean = false) Parameters cacheSize - The number of compiled sqlite statements to keep in memory per connection. Defaults to 20. useNoBackupDirectory - Sets whether to use a no backup directory or not.","title":" init "},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-init-/#init","text":"AndroidSqliteDriver(openHelper: SupportSQLiteOpenHelper) AndroidSqliteDriver(database: SupportSQLiteDatabase, cacheSize: Int = DEFAULT_CACHE_SIZE)``AndroidSqliteDriver(schema: Schema, context: Context, name: String ? = null, factory: Factory = FrameworkSQLiteOpenHelperFactory(), callback: Callback = AndroidSqliteDriver.Callback(schema), cacheSize: Int = DEFAULT_CACHE_SIZE, useNoBackupDirectory: Boolean = false)","title":"&lt;init&gt;"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-init-/#parameters","text":"cacheSize - The number of compiled sqlite statements to keep in memory per connection. Defaults to 20. useNoBackupDirectory - Sets whether to use a no backup directory or not.","title":"Parameters"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/close/","text":"android-driver / com.squareup.sqldelight.android / AndroidSqliteDriver / close close fun close(): Unit","title":"Close"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/close/#close","text":"fun close(): Unit","title":"close"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/current-transaction/","text":"android-driver / com.squareup.sqldelight.android / AndroidSqliteDriver / currentTransaction currentTransaction fun currentTransaction(): Transaction!","title":"Current transaction"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/current-transaction/#currenttransaction","text":"fun currentTransaction(): Transaction!","title":"currentTransaction"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/execute-query/","text":"android-driver / com.squareup.sqldelight.android / AndroidSqliteDriver / executeQuery executeQuery fun executeQuery(identifier: Int ?, sql: String , parameters: Int , binders: (SqlPreparedStatement.() -> Unit )?): SqlCursor","title":"Execute query"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/execute-query/#executequery","text":"fun executeQuery(identifier: Int ?, sql: String , parameters: Int , binders: (SqlPreparedStatement.() -> Unit )?): SqlCursor","title":"executeQuery"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/execute/","text":"android-driver / com.squareup.sqldelight.android / AndroidSqliteDriver / execute execute fun execute(identifier: Int ?, sql: String , parameters: Int , binders: (SqlPreparedStatement.() -> Unit )?): Unit","title":"Execute"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/execute/#execute","text":"fun execute(identifier: Int ?, sql: String , parameters: Int , binders: (SqlPreparedStatement.() -> Unit )?): Unit","title":"execute"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/new-transaction/","text":"android-driver / com.squareup.sqldelight.android / AndroidSqliteDriver / newTransaction newTransaction fun newTransaction(): Transaction","title":"New transaction"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/new-transaction/#newtransaction","text":"fun newTransaction(): Transaction","title":"newTransaction"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-callback/","text":"android-driver / com.squareup.sqldelight.android / AndroidSqliteDriver / Callback Callback class Callback : Callback Constructors Name Summary <init> Callback(schema: Schema) Functions Name Summary onCreate open fun onCreate(db: SupportSQLiteDatabase): Unit onUpgrade open fun onUpgrade(db: SupportSQLiteDatabase, oldVersion: Int , newVersion: Int ): Unit","title":"Home"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-callback/#callback","text":"class Callback : Callback","title":"Callback"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-callback/#constructors","text":"Name Summary <init> Callback(schema: Schema)","title":"Constructors"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-callback/#functions","text":"Name Summary onCreate open fun onCreate(db: SupportSQLiteDatabase): Unit onUpgrade open fun onUpgrade(db: SupportSQLiteDatabase, oldVersion: Int , newVersion: Int ): Unit","title":"Functions"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-callback/-init-/","text":"android-driver / com.squareup.sqldelight.android / AndroidSqliteDriver / Callback / <init> <init> Callback(schema: Schema)","title":" init "},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-callback/-init-/#init","text":"Callback(schema: Schema)","title":"&lt;init&gt;"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-callback/on-create/","text":"android-driver / com.squareup.sqldelight.android / AndroidSqliteDriver / Callback / onCreate onCreate open fun onCreate(db: SupportSQLiteDatabase): Unit","title":"On create"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-callback/on-create/#oncreate","text":"open fun onCreate(db: SupportSQLiteDatabase): Unit","title":"onCreate"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-callback/on-upgrade/","text":"android-driver / com.squareup.sqldelight.android / AndroidSqliteDriver / Callback / onUpgrade onUpgrade open fun onUpgrade(db: SupportSQLiteDatabase, oldVersion: Int , newVersion: Int ): Unit","title":"On upgrade"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-callback/on-upgrade/#onupgrade","text":"open fun onUpgrade(db: SupportSQLiteDatabase, oldVersion: Int , newVersion: Int ): Unit","title":"onUpgrade"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-transaction/","text":"android-driver / com.squareup.sqldelight.android / AndroidSqliteDriver / Transaction Transaction inner class Transaction : Transaction Constructors Name Summary <init> Transaction(enclosingTransaction: Transaction?) Properties Name Summary enclosingTransaction val enclosingTransaction: Transaction? Functions Name Summary endTransaction fun endTransaction(successful: Boolean ): Unit","title":"Home"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-transaction/#transaction","text":"inner class Transaction : Transaction","title":"Transaction"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-transaction/#constructors","text":"Name Summary <init> Transaction(enclosingTransaction: Transaction?)","title":"Constructors"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-transaction/#properties","text":"Name Summary enclosingTransaction val enclosingTransaction: Transaction?","title":"Properties"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-transaction/#functions","text":"Name Summary endTransaction fun endTransaction(successful: Boolean ): Unit","title":"Functions"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-transaction/-init-/","text":"android-driver / com.squareup.sqldelight.android / AndroidSqliteDriver / Transaction / <init> <init> Transaction(enclosingTransaction: Transaction?)","title":" init "},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-transaction/-init-/#init","text":"Transaction(enclosingTransaction: Transaction?)","title":"&lt;init&gt;"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-transaction/enclosing-transaction/","text":"android-driver / com.squareup.sqldelight.android / AndroidSqliteDriver / Transaction / enclosingTransaction enclosingTransaction protected val enclosingTransaction: Transaction?","title":"Enclosing transaction"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-transaction/enclosing-transaction/#enclosingtransaction","text":"protected val enclosingTransaction: Transaction?","title":"enclosingTransaction"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-transaction/end-transaction/","text":"android-driver / com.squareup.sqldelight.android / AndroidSqliteDriver / Transaction / endTransaction endTransaction protected fun endTransaction(successful: Boolean ): Unit","title":"End transaction"},{"location":"1.x/android-driver/com.squareup.sqldelight.android/-android-sqlite-driver/-transaction/end-transaction/#endtransaction","text":"protected fun endTransaction(successful: Boolean ): Unit","title":"endTransaction"},{"location":"1.x/android-paging/","text":"android-paging Packages Name Summary com.squareup.sqldelight.android.paging Index All Types","title":"android-paging"},{"location":"1.x/android-paging/#packages","text":"Name Summary com.squareup.sqldelight.android.paging","title":"Packages"},{"location":"1.x/android-paging/#index","text":"All Types","title":"Index"},{"location":"1.x/android-paging/alltypes/","text":"All Types Name Summary com.squareup.sqldelight.android.paging.QueryDataSourceFactory","title":"Home"},{"location":"1.x/android-paging/alltypes/#all-types","text":"Name Summary com.squareup.sqldelight.android.paging.QueryDataSourceFactory","title":"All Types"},{"location":"1.x/android-paging/com.squareup.sqldelight.android.paging/","text":"android-paging / com.squareup.sqldelight.android.paging Package com.squareup.sqldelight.android.paging Types Name Summary QueryDataSourceFactory class QueryDataSourceFactory<RowType : Any > : Factory< Int , RowType >","title":"Home"},{"location":"1.x/android-paging/com.squareup.sqldelight.android.paging/#package-comsquareupsqldelightandroidpaging","text":"","title":"Package com.squareup.sqldelight.android.paging"},{"location":"1.x/android-paging/com.squareup.sqldelight.android.paging/#types","text":"Name Summary QueryDataSourceFactory class QueryDataSourceFactory<RowType : Any > : Factory< Int , RowType >","title":"Types"},{"location":"1.x/android-paging/com.squareup.sqldelight.android.paging/-query-data-source-factory/","text":"android-paging / com.squareup.sqldelight.android.paging / QueryDataSourceFactory QueryDataSourceFactory class QueryDataSourceFactory<RowType : Any > : Factory< Int , RowType > Constructors Name Summary <init> QueryDataSourceFactory(queryProvider: (limit: Long , offset: Long ) -> Query< RowType >, countQuery: Query< Long >, transacter: Transacter) Functions Name Summary create fun create(): PositionalDataSource< RowType >","title":"Home"},{"location":"1.x/android-paging/com.squareup.sqldelight.android.paging/-query-data-source-factory/#querydatasourcefactory","text":"class QueryDataSourceFactory<RowType : Any > : Factory< Int , RowType >","title":"QueryDataSourceFactory"},{"location":"1.x/android-paging/com.squareup.sqldelight.android.paging/-query-data-source-factory/#constructors","text":"Name Summary <init> QueryDataSourceFactory(queryProvider: (limit: Long , offset: Long ) -> Query< RowType >, countQuery: Query< Long >, transacter: Transacter)","title":"Constructors"},{"location":"1.x/android-paging/com.squareup.sqldelight.android.paging/-query-data-source-factory/#functions","text":"Name Summary create fun create(): PositionalDataSource< RowType >","title":"Functions"},{"location":"1.x/android-paging/com.squareup.sqldelight.android.paging/-query-data-source-factory/-init-/","text":"android-paging / com.squareup.sqldelight.android.paging / QueryDataSourceFactory / <init> <init> QueryDataSourceFactory(queryProvider: (limit: Long , offset: Long ) -> Query< RowType >, countQuery: Query< Long >, transacter: Transacter)","title":" init "},{"location":"1.x/android-paging/com.squareup.sqldelight.android.paging/-query-data-source-factory/-init-/#init","text":"QueryDataSourceFactory(queryProvider: (limit: Long , offset: Long ) -> Query< RowType >, countQuery: Query< Long >, transacter: Transacter)","title":"&lt;init&gt;"},{"location":"1.x/android-paging/com.squareup.sqldelight.android.paging/-query-data-source-factory/create/","text":"android-paging / com.squareup.sqldelight.android.paging / QueryDataSourceFactory / create create fun create(): PositionalDataSource< RowType >","title":"Create"},{"location":"1.x/android-paging/com.squareup.sqldelight.android.paging/-query-data-source-factory/create/#create","text":"fun create(): PositionalDataSource< RowType >","title":"create"},{"location":"1.x/coroutines-extensions/","text":"coroutines-extensions Packages Name Summary com.squareup.sqldelight.runtime.coroutines Index All Types","title":"coroutines-extensions"},{"location":"1.x/coroutines-extensions/#packages","text":"Name Summary com.squareup.sqldelight.runtime.coroutines","title":"Packages"},{"location":"1.x/coroutines-extensions/#index","text":"All Types","title":"Index"},{"location":"1.x/coroutines-extensions/alltypes/","text":"All Types Name Summary","title":"Alltypes"},{"location":"1.x/coroutines-extensions/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"1.x/coroutines-extensions/com.squareup.sqldelight.runtime.coroutines/","text":"coroutines-extensions / com.squareup.sqldelight.runtime.coroutines Package com.squareup.sqldelight.runtime.coroutines Functions Name Summary asFlow fun <T : Any > <ERROR CLASS>< T >.asFlow(): <ERROR CLASS><<ERROR CLASS>< T >> Turns this Query into a Flow which emits whenever the underlying result set changes. mapToList fun <T : Any > <ERROR CLASS><<ERROR CLASS>< T >>.mapToList(context: <ERROR CLASS> = Dispatchers.Default): <ERROR CLASS>< List < T >> mapToOne fun <T : Any > <ERROR CLASS><<ERROR CLASS>< T >>.mapToOne(context: <ERROR CLASS> = Dispatchers.Default): <ERROR CLASS>< T > mapToOneNotNull fun <T : Any > <ERROR CLASS><<ERROR CLASS>< T >>.mapToOneNotNull(context: <ERROR CLASS> = Dispatchers.Default): <ERROR CLASS>< T > mapToOneOrDefault fun <T : Any > <ERROR CLASS><<ERROR CLASS>< T >>.mapToOneOrDefault(defaultValue: T , context: <ERROR CLASS> = Dispatchers.Default): <ERROR CLASS>< T > mapToOneOrNull fun <T : Any > <ERROR CLASS><<ERROR CLASS>< T >>.mapToOneOrNull(context: <ERROR CLASS> = Dispatchers.Default): <ERROR CLASS>< T ?>","title":"Home"},{"location":"1.x/coroutines-extensions/com.squareup.sqldelight.runtime.coroutines/#package-comsquareupsqldelightruntimecoroutines","text":"","title":"Package com.squareup.sqldelight.runtime.coroutines"},{"location":"1.x/coroutines-extensions/com.squareup.sqldelight.runtime.coroutines/#functions","text":"Name Summary asFlow fun <T : Any > <ERROR CLASS>< T >.asFlow(): <ERROR CLASS><<ERROR CLASS>< T >> Turns this Query into a Flow which emits whenever the underlying result set changes. mapToList fun <T : Any > <ERROR CLASS><<ERROR CLASS>< T >>.mapToList(context: <ERROR CLASS> = Dispatchers.Default): <ERROR CLASS>< List < T >> mapToOne fun <T : Any > <ERROR CLASS><<ERROR CLASS>< T >>.mapToOne(context: <ERROR CLASS> = Dispatchers.Default): <ERROR CLASS>< T > mapToOneNotNull fun <T : Any > <ERROR CLASS><<ERROR CLASS>< T >>.mapToOneNotNull(context: <ERROR CLASS> = Dispatchers.Default): <ERROR CLASS>< T > mapToOneOrDefault fun <T : Any > <ERROR CLASS><<ERROR CLASS>< T >>.mapToOneOrDefault(defaultValue: T , context: <ERROR CLASS> = Dispatchers.Default): <ERROR CLASS>< T > mapToOneOrNull fun <T : Any > <ERROR CLASS><<ERROR CLASS>< T >>.mapToOneOrNull(context: <ERROR CLASS> = Dispatchers.Default): <ERROR CLASS>< T ?>","title":"Functions"},{"location":"1.x/coroutines-extensions/com.squareup.sqldelight.runtime.coroutines/as-flow/","text":"coroutines-extensions / com.squareup.sqldelight.runtime.coroutines / asFlow asFlow fun <T : Any > <ERROR CLASS>< T >.asFlow(): <ERROR CLASS><<ERROR CLASS>< T >> Turns this Query into a Flow which emits whenever the underlying result set changes.","title":"As flow"},{"location":"1.x/coroutines-extensions/com.squareup.sqldelight.runtime.coroutines/as-flow/#asflow","text":"fun <T : Any > <ERROR CLASS>< T >.asFlow(): <ERROR CLASS><<ERROR CLASS>< T >> Turns this Query into a Flow which emits whenever the underlying result set changes.","title":"asFlow"},{"location":"1.x/coroutines-extensions/com.squareup.sqldelight.runtime.coroutines/map-to-list/","text":"coroutines-extensions / com.squareup.sqldelight.runtime.coroutines / mapToList mapToList fun <T : Any > <ERROR CLASS><<ERROR CLASS>< T >>.mapToList(context: <ERROR CLASS> = Dispatchers.Default): <ERROR CLASS>< List < T >>","title":"Map to list"},{"location":"1.x/coroutines-extensions/com.squareup.sqldelight.runtime.coroutines/map-to-list/#maptolist","text":"fun <T : Any > <ERROR CLASS><<ERROR CLASS>< T >>.mapToList(context: <ERROR CLASS> = Dispatchers.Default): <ERROR CLASS>< List < T >>","title":"mapToList"},{"location":"1.x/coroutines-extensions/com.squareup.sqldelight.runtime.coroutines/map-to-one-not-null/","text":"coroutines-extensions / com.squareup.sqldelight.runtime.coroutines / mapToOneNotNull mapToOneNotNull fun <T : Any > <ERROR CLASS><<ERROR CLASS>< T >>.mapToOneNotNull(context: <ERROR CLASS> = Dispatchers.Default): <ERROR CLASS>< T >","title":"Map to one not null"},{"location":"1.x/coroutines-extensions/com.squareup.sqldelight.runtime.coroutines/map-to-one-not-null/#maptoonenotnull","text":"fun <T : Any > <ERROR CLASS><<ERROR CLASS>< T >>.mapToOneNotNull(context: <ERROR CLASS> = Dispatchers.Default): <ERROR CLASS>< T >","title":"mapToOneNotNull"},{"location":"1.x/coroutines-extensions/com.squareup.sqldelight.runtime.coroutines/map-to-one-or-default/","text":"coroutines-extensions / com.squareup.sqldelight.runtime.coroutines / mapToOneOrDefault mapToOneOrDefault fun <T : Any > <ERROR CLASS><<ERROR CLASS>< T >>.mapToOneOrDefault(defaultValue: T , context: <ERROR CLASS> = Dispatchers.Default): <ERROR CLASS>< T >","title":"Map to one or default"},{"location":"1.x/coroutines-extensions/com.squareup.sqldelight.runtime.coroutines/map-to-one-or-default/#maptooneordefault","text":"fun <T : Any > <ERROR CLASS><<ERROR CLASS>< T >>.mapToOneOrDefault(defaultValue: T , context: <ERROR CLASS> = Dispatchers.Default): <ERROR CLASS>< T >","title":"mapToOneOrDefault"},{"location":"1.x/coroutines-extensions/com.squareup.sqldelight.runtime.coroutines/map-to-one-or-null/","text":"coroutines-extensions / com.squareup.sqldelight.runtime.coroutines / mapToOneOrNull mapToOneOrNull fun <T : Any > <ERROR CLASS><<ERROR CLASS>< T >>.mapToOneOrNull(context: <ERROR CLASS> = Dispatchers.Default): <ERROR CLASS>< T ?>","title":"Map to one or null"},{"location":"1.x/coroutines-extensions/com.squareup.sqldelight.runtime.coroutines/map-to-one-or-null/#maptooneornull","text":"fun <T : Any > <ERROR CLASS><<ERROR CLASS>< T >>.mapToOneOrNull(context: <ERROR CLASS> = Dispatchers.Default): <ERROR CLASS>< T ?>","title":"mapToOneOrNull"},{"location":"1.x/coroutines-extensions/com.squareup.sqldelight.runtime.coroutines/map-to-one/","text":"coroutines-extensions / com.squareup.sqldelight.runtime.coroutines / mapToOne mapToOne fun <T : Any > <ERROR CLASS><<ERROR CLASS>< T >>.mapToOne(context: <ERROR CLASS> = Dispatchers.Default): <ERROR CLASS>< T >","title":"Map to one"},{"location":"1.x/coroutines-extensions/com.squareup.sqldelight.runtime.coroutines/map-to-one/#maptoone","text":"fun <T : Any > <ERROR CLASS><<ERROR CLASS>< T >>.mapToOne(context: <ERROR CLASS> = Dispatchers.Default): <ERROR CLASS>< T >","title":"mapToOne"},{"location":"1.x/jdbc-driver/","text":"jdbc-driver Packages Name Summary com.squareup.sqldelight.sqlite.driver Index All Types","title":"jdbc-driver"},{"location":"1.x/jdbc-driver/#packages","text":"Name Summary com.squareup.sqldelight.sqlite.driver","title":"Packages"},{"location":"1.x/jdbc-driver/#index","text":"All Types","title":"Index"},{"location":"1.x/jdbc-driver/alltypes/","text":"All Types Name Summary javax.sql.DataSource (extensions in package com.squareup.sqldelight.sqlite.driver) com.squareup.sqldelight.sqlite.driver.JdbcDriver","title":"Home"},{"location":"1.x/jdbc-driver/alltypes/#all-types","text":"Name Summary javax.sql.DataSource (extensions in package com.squareup.sqldelight.sqlite.driver) com.squareup.sqldelight.sqlite.driver.JdbcDriver","title":"All Types"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/","text":"jdbc-driver / com.squareup.sqldelight.sqlite.driver Package com.squareup.sqldelight.sqlite.driver Types Name Summary JdbcDriver abstract class JdbcDriver : SqlDriver Extensions for External Classes Name Summary javax.sql.DataSource","title":"Home"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/#package-comsquareupsqldelightsqlitedriver","text":"","title":"Package com.squareup.sqldelight.sqlite.driver"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/#types","text":"Name Summary JdbcDriver abstract class JdbcDriver : SqlDriver","title":"Types"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/#extensions-for-external-classes","text":"Name Summary javax.sql.DataSource","title":"Extensions for External Classes"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/","text":"jdbc-driver / com.squareup.sqldelight.sqlite.driver / JdbcDriver JdbcDriver abstract class JdbcDriver : SqlDriver Constructors Name Summary <init> JdbcDriver() Functions Name Summary close open fun close(): Unit closeConnection abstract fun closeConnection(connection: Connection ): Unit currentTransaction open fun currentTransaction(): Transaction? execute open fun execute(identifier: Int ?, sql: String , parameters: Int , binders: (SqlPreparedStatement.() -> Unit )?): Unit executeQuery open fun executeQuery(identifier: Int ?, sql: String , parameters: Int , binders: (SqlPreparedStatement.() -> Unit )?): SqlCursor getConnection abstract fun getConnection(): Connection newTransaction open fun newTransaction(): Transaction","title":"Home"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/#jdbcdriver","text":"abstract class JdbcDriver : SqlDriver","title":"JdbcDriver"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/#constructors","text":"Name Summary <init> JdbcDriver()","title":"Constructors"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/#functions","text":"Name Summary close open fun close(): Unit closeConnection abstract fun closeConnection(connection: Connection ): Unit currentTransaction open fun currentTransaction(): Transaction? execute open fun execute(identifier: Int ?, sql: String , parameters: Int , binders: (SqlPreparedStatement.() -> Unit )?): Unit executeQuery open fun executeQuery(identifier: Int ?, sql: String , parameters: Int , binders: (SqlPreparedStatement.() -> Unit )?): SqlCursor getConnection abstract fun getConnection(): Connection newTransaction open fun newTransaction(): Transaction","title":"Functions"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/-init-/","text":"jdbc-driver / com.squareup.sqldelight.sqlite.driver / JdbcDriver / <init> <init> JdbcDriver()","title":" init "},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/-init-/#init","text":"JdbcDriver()","title":"&lt;init&gt;"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/close-connection/","text":"jdbc-driver / com.squareup.sqldelight.sqlite.driver / JdbcDriver / closeConnection closeConnection abstract fun closeConnection(connection: Connection ): Unit","title":"Close connection"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/close-connection/#closeconnection","text":"abstract fun closeConnection(connection: Connection ): Unit","title":"closeConnection"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/close/","text":"jdbc-driver / com.squareup.sqldelight.sqlite.driver / JdbcDriver / close close open fun close(): Unit","title":"Close"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/close/#close","text":"open fun close(): Unit","title":"close"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/current-transaction/","text":"jdbc-driver / com.squareup.sqldelight.sqlite.driver / JdbcDriver / currentTransaction currentTransaction open fun currentTransaction(): Transaction?","title":"Current transaction"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/current-transaction/#currenttransaction","text":"open fun currentTransaction(): Transaction?","title":"currentTransaction"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/execute-query/","text":"jdbc-driver / com.squareup.sqldelight.sqlite.driver / JdbcDriver / executeQuery executeQuery open fun executeQuery(identifier: Int ?, sql: String , parameters: Int , binders: (SqlPreparedStatement.() -> Unit )?): SqlCursor","title":"Execute query"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/execute-query/#executequery","text":"open fun executeQuery(identifier: Int ?, sql: String , parameters: Int , binders: (SqlPreparedStatement.() -> Unit )?): SqlCursor","title":"executeQuery"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/execute/","text":"jdbc-driver / com.squareup.sqldelight.sqlite.driver / JdbcDriver / execute execute open fun execute(identifier: Int ?, sql: String , parameters: Int , binders: (SqlPreparedStatement.() -> Unit )?): Unit","title":"Execute"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/execute/#execute","text":"open fun execute(identifier: Int ?, sql: String , parameters: Int , binders: (SqlPreparedStatement.() -> Unit )?): Unit","title":"execute"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/get-connection/","text":"jdbc-driver / com.squareup.sqldelight.sqlite.driver / JdbcDriver / getConnection getConnection abstract fun getConnection(): Connection","title":"Get connection"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/get-connection/#getconnection","text":"abstract fun getConnection(): Connection","title":"getConnection"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/new-transaction/","text":"jdbc-driver / com.squareup.sqldelight.sqlite.driver / JdbcDriver / newTransaction newTransaction open fun newTransaction(): Transaction","title":"New transaction"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-driver/new-transaction/#newtransaction","text":"open fun newTransaction(): Transaction","title":"newTransaction"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/javax.sql.-data-source/","text":"jdbc-driver / com.squareup.sqldelight.sqlite.driver / javax.sql.DataSource Extensions for javax.sql.DataSource Name Summary asJdbcDriver fun DataSource .asJdbcDriver(): JdbcDriver","title":"Home"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/javax.sql.-data-source/#extensions-for-javaxsqldatasource","text":"Name Summary asJdbcDriver fun DataSource .asJdbcDriver(): JdbcDriver","title":"Extensions for javax.sql.DataSource"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/javax.sql.-data-source/as-jdbc-driver/","text":"jdbc-driver / com.squareup.sqldelight.sqlite.driver / javax.sql.DataSource / asJdbcDriver asJdbcDriver @JvmName(\"fromDataSource\") fun DataSource .asJdbcDriver(): JdbcDriver","title":"As jdbc driver"},{"location":"1.x/jdbc-driver/com.squareup.sqldelight.sqlite.driver/javax.sql.-data-source/as-jdbc-driver/#asjdbcdriver","text":"@JvmName(\"fromDataSource\") fun DataSource .asJdbcDriver(): JdbcDriver","title":"asJdbcDriver"},{"location":"1.x/native-driver/","text":"native-driver Packages Name Summary com.squareup.sqldelight.drivers.native (native) Index All Types","title":"native-driver"},{"location":"1.x/native-driver/#packages","text":"Name Summary com.squareup.sqldelight.drivers.native (native)","title":"Packages"},{"location":"1.x/native-driver/#index","text":"All Types","title":"Index"},{"location":"1.x/native-driver/alltypes/","text":"All Types Name Summary com.squareup.sqldelight.drivers.native.ConnectionWrapper com.squareup.sqldelight.drivers.native.NativeSqliteDriver Native driver implementation.","title":"Home"},{"location":"1.x/native-driver/alltypes/#all-types","text":"Name Summary com.squareup.sqldelight.drivers.native.ConnectionWrapper com.squareup.sqldelight.drivers.native.NativeSqliteDriver Native driver implementation.","title":"All Types"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/","text":"native-driver / com.squareup.sqldelight.drivers.native Package com.squareup.sqldelight.drivers.native Platform and version requirements: native Types Name Summary ConnectionWrapper (native) sealed class ConnectionWrapper NativeSqliteDriver (native) class NativeSqliteDriver : ConnectionWrapper Native driver implementation. Functions Name Summary wrapConnection (native) fun wrapConnection(connection: <ERROR CLASS>, block: (<ERROR CLASS>) -> Unit ): Unit Sqliter's DatabaseConfiguration takes lambda arguments for it's create and upgrade operations, which each take a DatabaseConnection argument. Use wrapConnection to have SqlDelight access this passed connection and avoid the pooling that the full SqlDriver instance performs.","title":"Home"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/#package-comsquareupsqldelightdriversnative","text":"Platform and version requirements: native","title":"Package com.squareup.sqldelight.drivers.native"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/#types","text":"Name Summary ConnectionWrapper (native) sealed class ConnectionWrapper NativeSqliteDriver (native) class NativeSqliteDriver : ConnectionWrapper Native driver implementation.","title":"Types"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/#functions","text":"Name Summary wrapConnection (native) fun wrapConnection(connection: <ERROR CLASS>, block: (<ERROR CLASS>) -> Unit ): Unit Sqliter's DatabaseConfiguration takes lambda arguments for it's create and upgrade operations, which each take a DatabaseConnection argument. Use wrapConnection to have SqlDelight access this passed connection and avoid the pooling that the full SqlDriver instance performs.","title":"Functions"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/wrap-connection/","text":"native-driver / com.squareup.sqldelight.drivers.native / wrapConnection wrapConnection fun wrapConnection(connection: <ERROR CLASS>, block: (<ERROR CLASS>) -> Unit ): Unit Platform and version requirements: native Sqliter's DatabaseConfiguration takes lambda arguments for it's create and upgrade operations, which each take a DatabaseConnection argument. Use wrapConnection to have SqlDelight access this passed connection and avoid the pooling that the full SqlDriver instance performs. Note that queries created during this operation will be cleaned up. If holding onto a cursor from a wrap call, it will no longer be viable.","title":"Wrap connection"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/wrap-connection/#wrapconnection","text":"fun wrapConnection(connection: <ERROR CLASS>, block: (<ERROR CLASS>) -> Unit ): Unit Platform and version requirements: native Sqliter's DatabaseConfiguration takes lambda arguments for it's create and upgrade operations, which each take a DatabaseConnection argument. Use wrapConnection to have SqlDelight access this passed connection and avoid the pooling that the full SqlDriver instance performs. Note that queries created during this operation will be cleaned up. If holding onto a cursor from a wrap call, it will no longer be viable.","title":"wrapConnection"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-connection-wrapper/","text":"native-driver / com.squareup.sqldelight.drivers.native / ConnectionWrapper ConnectionWrapper sealed class ConnectionWrapper Platform and version requirements: native Functions Name Summary execute fun execute(identifier: Int ?, sql: String , parameters: Int , binders: (<ERROR CLASS>.() -> Unit )?): Unit executeQuery fun executeQuery(identifier: Int ?, sql: String , parameters: Int , binders: (<ERROR CLASS>.() -> Unit )?): <ERROR CLASS> Inheritors Name Summary NativeSqliteDriver (native) class NativeSqliteDriver : ConnectionWrapper Native driver implementation.","title":"Home"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-connection-wrapper/#connectionwrapper","text":"sealed class ConnectionWrapper Platform and version requirements: native","title":"ConnectionWrapper"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-connection-wrapper/#functions","text":"Name Summary execute fun execute(identifier: Int ?, sql: String , parameters: Int , binders: (<ERROR CLASS>.() -> Unit )?): Unit executeQuery fun executeQuery(identifier: Int ?, sql: String , parameters: Int , binders: (<ERROR CLASS>.() -> Unit )?): <ERROR CLASS>","title":"Functions"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-connection-wrapper/#inheritors","text":"Name Summary NativeSqliteDriver (native) class NativeSqliteDriver : ConnectionWrapper Native driver implementation.","title":"Inheritors"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-connection-wrapper/execute-query/","text":"native-driver / com.squareup.sqldelight.drivers.native / ConnectionWrapper / executeQuery executeQuery fun executeQuery(identifier: Int ?, sql: String , parameters: Int , binders: (<ERROR CLASS>.() -> Unit )?): <ERROR CLASS> Platform and version requirements: native","title":"Execute query"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-connection-wrapper/execute-query/#executequery","text":"fun executeQuery(identifier: Int ?, sql: String , parameters: Int , binders: (<ERROR CLASS>.() -> Unit )?): <ERROR CLASS> Platform and version requirements: native","title":"executeQuery"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-connection-wrapper/execute/","text":"native-driver / com.squareup.sqldelight.drivers.native / ConnectionWrapper / execute execute fun execute(identifier: Int ?, sql: String , parameters: Int , binders: (<ERROR CLASS>.() -> Unit )?): Unit Platform and version requirements: native","title":"Execute"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-connection-wrapper/execute/#execute","text":"fun execute(identifier: Int ?, sql: String , parameters: Int , binders: (<ERROR CLASS>.() -> Unit )?): Unit Platform and version requirements: native","title":"execute"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-native-sqlite-driver/","text":"native-driver / com.squareup.sqldelight.drivers.native / NativeSqliteDriver NativeSqliteDriver class NativeSqliteDriver : ConnectionWrapper Platform and version requirements: native Native driver implementation. The root SqlDriver creates 2 connections to the underlying database. One is used by transactions and aligned with the thread performing the transaction. Multiple threads starting transactions block and wait. The other connection does everything outside of a connection. The goal is to be able to read while also writing. Future versions may create multiple query connections. When a transaction is started, that thread is aligned with the transaction connection. Attempting to start a transaction on another thread will block until the first finishes. Not ending transactions is problematic, but it would be regardless. One implication to be aware of. You cannot operate on a single transaction from multiple threads. However, it would be difficult to find a use case where this would be desirable or safe. To use SqlDelight during create/upgrade processes, you can alternatively wrap a real connection with wrapConnection. SqlPreparedStatement instances also do not point to real resources until either execute or executeQuery is called. The SqlPreparedStatement structure also maintains a thread-aligned instance which accumulates bind calls. Those are replayed on a real SQLite statement instance when execute or executeQuery is called. This avoids race conditions with bind calls. Constructors Name Summary <init> NativeSqliteDriver(configuration: <ERROR CLASS>) NativeSqliteDriver(schema: <ERROR CLASS>, name: String )``NativeSqliteDriver(databaseManager: <ERROR CLASS>) Native driver implementation. Functions Name Summary close fun close(): Unit currentTransaction fun currentTransaction(): <ERROR CLASS>? newTransaction fun newTransaction(): <ERROR CLASS> Inherited Functions Name Summary execute (native) fun execute(identifier: Int ?, sql: String , parameters: Int , binders: (<ERROR CLASS>.() -> Unit )?): Unit executeQuery (native) fun executeQuery(identifier: Int ?, sql: String , parameters: Int , binders: (<ERROR CLASS>.() -> Unit )?): <ERROR CLASS>","title":"Home"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-native-sqlite-driver/#nativesqlitedriver","text":"class NativeSqliteDriver : ConnectionWrapper Platform and version requirements: native Native driver implementation. The root SqlDriver creates 2 connections to the underlying database. One is used by transactions and aligned with the thread performing the transaction. Multiple threads starting transactions block and wait. The other connection does everything outside of a connection. The goal is to be able to read while also writing. Future versions may create multiple query connections. When a transaction is started, that thread is aligned with the transaction connection. Attempting to start a transaction on another thread will block until the first finishes. Not ending transactions is problematic, but it would be regardless. One implication to be aware of. You cannot operate on a single transaction from multiple threads. However, it would be difficult to find a use case where this would be desirable or safe. To use SqlDelight during create/upgrade processes, you can alternatively wrap a real connection with wrapConnection. SqlPreparedStatement instances also do not point to real resources until either execute or executeQuery is called. The SqlPreparedStatement structure also maintains a thread-aligned instance which accumulates bind calls. Those are replayed on a real SQLite statement instance when execute or executeQuery is called. This avoids race conditions with bind calls.","title":"NativeSqliteDriver"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-native-sqlite-driver/#constructors","text":"Name Summary <init> NativeSqliteDriver(configuration: <ERROR CLASS>) NativeSqliteDriver(schema: <ERROR CLASS>, name: String )``NativeSqliteDriver(databaseManager: <ERROR CLASS>) Native driver implementation.","title":"Constructors"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-native-sqlite-driver/#functions","text":"Name Summary close fun close(): Unit currentTransaction fun currentTransaction(): <ERROR CLASS>? newTransaction fun newTransaction(): <ERROR CLASS>","title":"Functions"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-native-sqlite-driver/#inherited-functions","text":"Name Summary execute (native) fun execute(identifier: Int ?, sql: String , parameters: Int , binders: (<ERROR CLASS>.() -> Unit )?): Unit executeQuery (native) fun executeQuery(identifier: Int ?, sql: String , parameters: Int , binders: (<ERROR CLASS>.() -> Unit )?): <ERROR CLASS>","title":"Inherited Functions"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-native-sqlite-driver/-init-/","text":"native-driver / com.squareup.sqldelight.drivers.native / NativeSqliteDriver / <init> <init> NativeSqliteDriver(configuration: <ERROR CLASS>) Platform and version requirements: native NativeSqliteDriver(schema: <ERROR CLASS>, name: String ) Platform and version requirements: native NativeSqliteDriver(databaseManager: <ERROR CLASS>) Platform and version requirements: native Native driver implementation. The root SqlDriver creates 2 connections to the underlying database. One is used by transactions and aligned with the thread performing the transaction. Multiple threads starting transactions block and wait. The other connection does everything outside of a connection. The goal is to be able to read while also writing. Future versions may create multiple query connections. When a transaction is started, that thread is aligned with the transaction connection. Attempting to start a transaction on another thread will block until the first finishes. Not ending transactions is problematic, but it would be regardless. One implication to be aware of. You cannot operate on a single transaction from multiple threads. However, it would be difficult to find a use case where this would be desirable or safe. To use SqlDelight during create/upgrade processes, you can alternatively wrap a real connection with wrapConnection. SqlPreparedStatement instances also do not point to real resources until either execute or executeQuery is called. The SqlPreparedStatement structure also maintains a thread-aligned instance which accumulates bind calls. Those are replayed on a real SQLite statement instance when execute or executeQuery is called. This avoids race conditions with bind calls.","title":" init "},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-native-sqlite-driver/-init-/#init","text":"NativeSqliteDriver(configuration: <ERROR CLASS>) Platform and version requirements: native NativeSqliteDriver(schema: <ERROR CLASS>, name: String ) Platform and version requirements: native NativeSqliteDriver(databaseManager: <ERROR CLASS>) Platform and version requirements: native Native driver implementation. The root SqlDriver creates 2 connections to the underlying database. One is used by transactions and aligned with the thread performing the transaction. Multiple threads starting transactions block and wait. The other connection does everything outside of a connection. The goal is to be able to read while also writing. Future versions may create multiple query connections. When a transaction is started, that thread is aligned with the transaction connection. Attempting to start a transaction on another thread will block until the first finishes. Not ending transactions is problematic, but it would be regardless. One implication to be aware of. You cannot operate on a single transaction from multiple threads. However, it would be difficult to find a use case where this would be desirable or safe. To use SqlDelight during create/upgrade processes, you can alternatively wrap a real connection with wrapConnection. SqlPreparedStatement instances also do not point to real resources until either execute or executeQuery is called. The SqlPreparedStatement structure also maintains a thread-aligned instance which accumulates bind calls. Those are replayed on a real SQLite statement instance when execute or executeQuery is called. This avoids race conditions with bind calls.","title":"&lt;init&gt;"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-native-sqlite-driver/close/","text":"native-driver / com.squareup.sqldelight.drivers.native / NativeSqliteDriver / close close fun close(): Unit Platform and version requirements: native","title":"Close"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-native-sqlite-driver/close/#close","text":"fun close(): Unit Platform and version requirements: native","title":"close"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-native-sqlite-driver/current-transaction/","text":"native-driver / com.squareup.sqldelight.drivers.native / NativeSqliteDriver / currentTransaction currentTransaction fun currentTransaction(): <ERROR CLASS>? Platform and version requirements: native","title":"Current transaction"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-native-sqlite-driver/current-transaction/#currenttransaction","text":"fun currentTransaction(): <ERROR CLASS>? Platform and version requirements: native","title":"currentTransaction"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-native-sqlite-driver/new-transaction/","text":"native-driver / com.squareup.sqldelight.drivers.native / NativeSqliteDriver / newTransaction newTransaction fun newTransaction(): <ERROR CLASS> Platform and version requirements: native","title":"New transaction"},{"location":"1.x/native-driver/com.squareup.sqldelight.drivers.native/-native-sqlite-driver/new-transaction/#newtransaction","text":"fun newTransaction(): <ERROR CLASS> Platform and version requirements: native","title":"newTransaction"},{"location":"1.x/runtime/","text":"runtime Packages Name Summary com.squareup.sqldelight com.squareup.sqldelight.db com.squareup.sqldelight.logs Index All Types","title":"runtime"},{"location":"1.x/runtime/#packages","text":"Name Summary com.squareup.sqldelight com.squareup.sqldelight.db com.squareup.sqldelight.logs","title":"Packages"},{"location":"1.x/runtime/#index","text":"All Types","title":"Index"},{"location":"1.x/runtime/alltypes/","text":"All Types Name Summary com.squareup.sqldelight.db.Closeable A type that can be closed. com.squareup.sqldelight.ColumnAdapter Marshal and map the type T to and from a database type S which is one of Long , Double , String , byte[] . com.squareup.sqldelight.EnumColumnAdapter A ColumnAdapter which maps the enum class T to a string in the database. com.squareup.sqldelight.logs.LogSqliteDriver com.squareup.sqldelight.Query A listenable, typed query generated by SQLDelight. com.squareup.sqldelight.db.SqlCursor Represents a SQL result set which can be iterated through with next . Initially the cursor will not point to any row, and calling next once will iterate to the first row. com.squareup.sqldelight.db.SqlDriver Maintains connections to an underlying SQL database and provides APIs for managing transactions and executing SQL statements. com.squareup.sqldelight.db.SqlPreparedStatement Represents a SQL statement that has been prepared by a driver to be executed. com.squareup.sqldelight.logs.StatementParameterInterceptor com.squareup.sqldelight.Transacter A transaction-aware SqlDriver wrapper which can begin a Transaction on the current connection. com.squareup.sqldelight.TransacterImpl A transaction-aware SqlDriver wrapper which can begin a Transaction on the current connection. com.squareup.sqldelight.TransactionCallbacks com.squareup.sqldelight.TransactionWithoutReturn com.squareup.sqldelight.TransactionWithReturn","title":"Home"},{"location":"1.x/runtime/alltypes/#all-types","text":"Name Summary com.squareup.sqldelight.db.Closeable A type that can be closed. com.squareup.sqldelight.ColumnAdapter Marshal and map the type T to and from a database type S which is one of Long , Double , String , byte[] . com.squareup.sqldelight.EnumColumnAdapter A ColumnAdapter which maps the enum class T to a string in the database. com.squareup.sqldelight.logs.LogSqliteDriver com.squareup.sqldelight.Query A listenable, typed query generated by SQLDelight. com.squareup.sqldelight.db.SqlCursor Represents a SQL result set which can be iterated through with next . Initially the cursor will not point to any row, and calling next once will iterate to the first row. com.squareup.sqldelight.db.SqlDriver Maintains connections to an underlying SQL database and provides APIs for managing transactions and executing SQL statements. com.squareup.sqldelight.db.SqlPreparedStatement Represents a SQL statement that has been prepared by a driver to be executed. com.squareup.sqldelight.logs.StatementParameterInterceptor com.squareup.sqldelight.Transacter A transaction-aware SqlDriver wrapper which can begin a Transaction on the current connection. com.squareup.sqldelight.TransacterImpl A transaction-aware SqlDriver wrapper which can begin a Transaction on the current connection. com.squareup.sqldelight.TransactionCallbacks com.squareup.sqldelight.TransactionWithoutReturn com.squareup.sqldelight.TransactionWithReturn","title":"All Types"},{"location":"1.x/runtime/com.squareup.sqldelight/","text":"runtime / com.squareup.sqldelight Package com.squareup.sqldelight Types Name Summary ColumnAdapter interface ColumnAdapter<T : Any , S> Marshal and map the type T to and from a database type S which is one of Long , Double , String , byte[] . EnumColumnAdapter class EnumColumnAdapter<T : Enum < T >> : ColumnAdapter < T , String > A ColumnAdapter which maps the enum class T to a string in the database. Query abstract class Query<out RowType : Any > A listenable, typed query generated by SQLDelight. Transacter interface Transacter A transaction-aware SqlDriver wrapper which can begin a Transaction on the current connection. TransacterImpl abstract class TransacterImpl : Transacter A transaction-aware SqlDriver wrapper which can begin a Transaction on the current connection. TransactionCallbacks interface TransactionCallbacks TransactionWithoutReturn interface TransactionWithoutReturn : TransactionCallbacks TransactionWithReturn interface TransactionWithReturn<R> : TransactionCallbacks Functions Name Summary EnumColumnAdapter fun <T : Enum < T >> EnumColumnAdapter(): EnumColumnAdapter < T > A ColumnAdapter which maps the enum class T to a string in the database. Query fun <RowType : Any > Query(identifier: Int , queries: MutableList < Query <*>>, driver: SqlDriver , query: String , mapper: ( SqlCursor ) -> RowType ): Query < RowType > fun <RowType : Any > Query(identifier: Int , queries: MutableList < Query <*>>, driver: SqlDriver , fileName: String , label: String , query: String , mapper: ( SqlCursor ) -> RowType ): Query < RowType > A listenable, typed query generated by SQLDelight.","title":"Home"},{"location":"1.x/runtime/com.squareup.sqldelight/#package-comsquareupsqldelight","text":"","title":"Package com.squareup.sqldelight"},{"location":"1.x/runtime/com.squareup.sqldelight/#types","text":"Name Summary ColumnAdapter interface ColumnAdapter<T : Any , S> Marshal and map the type T to and from a database type S which is one of Long , Double , String , byte[] . EnumColumnAdapter class EnumColumnAdapter<T : Enum < T >> : ColumnAdapter < T , String > A ColumnAdapter which maps the enum class T to a string in the database. Query abstract class Query<out RowType : Any > A listenable, typed query generated by SQLDelight. Transacter interface Transacter A transaction-aware SqlDriver wrapper which can begin a Transaction on the current connection. TransacterImpl abstract class TransacterImpl : Transacter A transaction-aware SqlDriver wrapper which can begin a Transaction on the current connection. TransactionCallbacks interface TransactionCallbacks TransactionWithoutReturn interface TransactionWithoutReturn : TransactionCallbacks TransactionWithReturn interface TransactionWithReturn<R> : TransactionCallbacks","title":"Types"},{"location":"1.x/runtime/com.squareup.sqldelight/#functions","text":"Name Summary EnumColumnAdapter fun <T : Enum < T >> EnumColumnAdapter(): EnumColumnAdapter < T > A ColumnAdapter which maps the enum class T to a string in the database. Query fun <RowType : Any > Query(identifier: Int , queries: MutableList < Query <*>>, driver: SqlDriver , query: String , mapper: ( SqlCursor ) -> RowType ): Query < RowType > fun <RowType : Any > Query(identifier: Int , queries: MutableList < Query <*>>, driver: SqlDriver , fileName: String , label: String , query: String , mapper: ( SqlCursor ) -> RowType ): Query < RowType > A listenable, typed query generated by SQLDelight.","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight/-enum-column-adapter/","text":"runtime / com.squareup.sqldelight / EnumColumnAdapter EnumColumnAdapter inline fun <reified T : Enum < T >> EnumColumnAdapter(): EnumColumnAdapter < T > A ColumnAdapter which maps the enum class T to a string in the database.","title":" enum column adapter"},{"location":"1.x/runtime/com.squareup.sqldelight/-enum-column-adapter/#enumcolumnadapter","text":"inline fun <reified T : Enum < T >> EnumColumnAdapter(): EnumColumnAdapter < T > A ColumnAdapter which maps the enum class T to a string in the database.","title":"EnumColumnAdapter"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/","text":"runtime / com.squareup.sqldelight / Query Query fun <RowType : Any > Query(identifier: Int , queries: MutableList < Query <*>>, driver: SqlDriver , query: String , mapper: ( SqlCursor ) -> RowType ): Query < RowType > fun <RowType : Any > Query(identifier: Int , queries: MutableList < Query <*>>, driver: SqlDriver , fileName: String , label: String , query: String , mapper: ( SqlCursor ) -> RowType ): Query < RowType > A listenable, typed query generated by SQLDelight. Parameters RowType - the type that this query can map its result set to.","title":" query"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/#query","text":"fun <RowType : Any > Query(identifier: Int , queries: MutableList < Query <*>>, driver: SqlDriver , query: String , mapper: ( SqlCursor ) -> RowType ): Query < RowType > fun <RowType : Any > Query(identifier: Int , queries: MutableList < Query <*>>, driver: SqlDriver , fileName: String , label: String , query: String , mapper: ( SqlCursor ) -> RowType ): Query < RowType > A listenable, typed query generated by SQLDelight.","title":"Query"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/#parameters","text":"RowType - the type that this query can map its result set to.","title":"Parameters"},{"location":"1.x/runtime/com.squareup.sqldelight/-column-adapter/","text":"runtime / com.squareup.sqldelight / ColumnAdapter ColumnAdapter interface ColumnAdapter<T : Any , S> Marshal and map the type T to and from a database type S which is one of Long , Double , String , byte[] . Functions Name Summary decode abstract fun decode(databaseValue: S ): T encode abstract fun encode(value: T ): S Inheritors Name Summary EnumColumnAdapter class EnumColumnAdapter<T : Enum < T >> : ColumnAdapter < T , String > A ColumnAdapter which maps the enum class T to a string in the database.","title":"Home"},{"location":"1.x/runtime/com.squareup.sqldelight/-column-adapter/#columnadapter","text":"interface ColumnAdapter<T : Any , S> Marshal and map the type T to and from a database type S which is one of Long , Double , String , byte[] .","title":"ColumnAdapter"},{"location":"1.x/runtime/com.squareup.sqldelight/-column-adapter/#functions","text":"Name Summary decode abstract fun decode(databaseValue: S ): T encode abstract fun encode(value: T ): S","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight/-column-adapter/#inheritors","text":"Name Summary EnumColumnAdapter class EnumColumnAdapter<T : Enum < T >> : ColumnAdapter < T , String > A ColumnAdapter which maps the enum class T to a string in the database.","title":"Inheritors"},{"location":"1.x/runtime/com.squareup.sqldelight/-column-adapter/decode/","text":"runtime / com.squareup.sqldelight / ColumnAdapter / decode decode abstract fun decode(databaseValue: S ): T Return databaseValue decoded as type T .","title":"Decode"},{"location":"1.x/runtime/com.squareup.sqldelight/-column-adapter/decode/#decode","text":"abstract fun decode(databaseValue: S ): T Return databaseValue decoded as type T .","title":"decode"},{"location":"1.x/runtime/com.squareup.sqldelight/-column-adapter/encode/","text":"runtime / com.squareup.sqldelight / ColumnAdapter / encode encode abstract fun encode(value: T ): S Return value encoded as database type S .","title":"Encode"},{"location":"1.x/runtime/com.squareup.sqldelight/-column-adapter/encode/#encode","text":"abstract fun encode(value: T ): S Return value encoded as database type S .","title":"encode"},{"location":"1.x/runtime/com.squareup.sqldelight/-enum-column-adapter/","text":"runtime / com.squareup.sqldelight / EnumColumnAdapter EnumColumnAdapter class EnumColumnAdapter<T : Enum < T >> : ColumnAdapter < T , String > A ColumnAdapter which maps the enum class T to a string in the database. Functions Name Summary decode fun decode(databaseValue: String ): T encode fun encode(value: T ): String","title":"Home"},{"location":"1.x/runtime/com.squareup.sqldelight/-enum-column-adapter/#enumcolumnadapter","text":"class EnumColumnAdapter<T : Enum < T >> : ColumnAdapter < T , String > A ColumnAdapter which maps the enum class T to a string in the database.","title":"EnumColumnAdapter"},{"location":"1.x/runtime/com.squareup.sqldelight/-enum-column-adapter/#functions","text":"Name Summary decode fun decode(databaseValue: String ): T encode fun encode(value: T ): String","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight/-enum-column-adapter/decode/","text":"runtime / com.squareup.sqldelight / EnumColumnAdapter / decode decode fun decode(databaseValue: String ): T Overrides ColumnAdapter.decode Return databaseValue decoded as type T .","title":"Decode"},{"location":"1.x/runtime/com.squareup.sqldelight/-enum-column-adapter/decode/#decode","text":"fun decode(databaseValue: String ): T Overrides ColumnAdapter.decode Return databaseValue decoded as type T .","title":"decode"},{"location":"1.x/runtime/com.squareup.sqldelight/-enum-column-adapter/encode/","text":"runtime / com.squareup.sqldelight / EnumColumnAdapter / encode encode fun encode(value: T ): String Overrides ColumnAdapter.encode Return value encoded as database type S .","title":"Encode"},{"location":"1.x/runtime/com.squareup.sqldelight/-enum-column-adapter/encode/#encode","text":"fun encode(value: T ): String Overrides ColumnAdapter.encode Return value encoded as database type S .","title":"encode"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/","text":"runtime / com.squareup.sqldelight / Query Query abstract class Query<out RowType : Any > A listenable, typed query generated by SQLDelight. Parameters RowType - the type that this query can map its result set to. Types Name Summary Listener interface Listener An interface for listening to changes in the result set of a query. Constructors Name Summary <init> Query(queries: MutableList < Query <*>>, mapper: ( SqlCursor ) -> RowType ) A listenable, typed query generated by SQLDelight. Properties Name Summary mapper val mapper: ( SqlCursor ) -> RowType The mapper this Query was created with, which can convert a row in the SQL cursor returned by execute to RowType . Functions Name Summary addListener fun addListener(listener: Query.Listener ): Unit Register a listener to be notified of future changes in the result set. execute abstract fun execute(): SqlCursor Execute the underlying statement. executeAsList fun executeAsList(): List < RowType > executeAsOne fun executeAsOne(): RowType executeAsOneOrNull fun executeAsOneOrNull(): RowType ? notifyDataChanged fun notifyDataChanged(): Unit Notify listeners that their current result set is staled. removeListener fun removeListener(listener: Query.Listener ): Unit Remove a listener to no longer be notified of future changes in the result set.","title":"Home"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/#query","text":"abstract class Query<out RowType : Any > A listenable, typed query generated by SQLDelight.","title":"Query"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/#parameters","text":"RowType - the type that this query can map its result set to.","title":"Parameters"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/#types","text":"Name Summary Listener interface Listener An interface for listening to changes in the result set of a query.","title":"Types"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/#constructors","text":"Name Summary <init> Query(queries: MutableList < Query <*>>, mapper: ( SqlCursor ) -> RowType ) A listenable, typed query generated by SQLDelight.","title":"Constructors"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/#properties","text":"Name Summary mapper val mapper: ( SqlCursor ) -> RowType The mapper this Query was created with, which can convert a row in the SQL cursor returned by execute to RowType .","title":"Properties"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/#functions","text":"Name Summary addListener fun addListener(listener: Query.Listener ): Unit Register a listener to be notified of future changes in the result set. execute abstract fun execute(): SqlCursor Execute the underlying statement. executeAsList fun executeAsList(): List < RowType > executeAsOne fun executeAsOne(): RowType executeAsOneOrNull fun executeAsOneOrNull(): RowType ? notifyDataChanged fun notifyDataChanged(): Unit Notify listeners that their current result set is staled. removeListener fun removeListener(listener: Query.Listener ): Unit Remove a listener to no longer be notified of future changes in the result set.","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/-init-/","text":"runtime / com.squareup.sqldelight / Query / <init> <init> Query(queries: MutableList < Query <*>>, mapper: ( SqlCursor ) -> RowType ) A listenable, typed query generated by SQLDelight. Parameters RowType - the type that this query can map its result set to.","title":" init "},{"location":"1.x/runtime/com.squareup.sqldelight/-query/-init-/#init","text":"Query(queries: MutableList < Query <*>>, mapper: ( SqlCursor ) -> RowType ) A listenable, typed query generated by SQLDelight.","title":"&lt;init&gt;"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/-init-/#parameters","text":"RowType - the type that this query can map its result set to.","title":"Parameters"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/add-listener/","text":"runtime / com.squareup.sqldelight / Query / addListener addListener fun addListener(listener: Query.Listener ): Unit Register a listener to be notified of future changes in the result set.","title":"Add listener"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/add-listener/#addlistener","text":"fun addListener(listener: Query.Listener ): Unit Register a listener to be notified of future changes in the result set.","title":"addListener"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/execute-as-list/","text":"runtime / com.squareup.sqldelight / Query / executeAsList executeAsList fun executeAsList(): List < RowType > Return The result set of the underlying SQL statement as a list of RowType .","title":"Execute as list"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/execute-as-list/#executeaslist","text":"fun executeAsList(): List < RowType > Return The result set of the underlying SQL statement as a list of RowType .","title":"executeAsList"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/execute-as-one-or-null/","text":"runtime / com.squareup.sqldelight / Query / executeAsOneOrNull executeAsOneOrNull fun executeAsOneOrNull(): RowType ? Exceptions IllegalStateException - if when executed this query has multiple rows in its result set. Return The first row of the result set for the underlying SQL statement as a non null RowType or null if the result set has no rows.","title":"Execute as one or null"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/execute-as-one-or-null/#executeasoneornull","text":"fun executeAsOneOrNull(): RowType ?","title":"executeAsOneOrNull"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/execute-as-one-or-null/#exceptions","text":"IllegalStateException - if when executed this query has multiple rows in its result set. Return The first row of the result set for the underlying SQL statement as a non null RowType or null if the result set has no rows.","title":"Exceptions"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/execute-as-one/","text":"runtime / com.squareup.sqldelight / Query / executeAsOne executeAsOne fun executeAsOne(): RowType Exceptions NullPointerException - if when executed this query has no rows in its result set. IllegalStateException - if when executed this query has multiple rows in its result set. Return The only row of the result set for the underlying SQL statement as a non null RowType .","title":"Execute as one"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/execute-as-one/#executeasone","text":"fun executeAsOne(): RowType","title":"executeAsOne"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/execute-as-one/#exceptions","text":"NullPointerException - if when executed this query has no rows in its result set. IllegalStateException - if when executed this query has multiple rows in its result set. Return The only row of the result set for the underlying SQL statement as a non null RowType .","title":"Exceptions"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/execute/","text":"runtime / com.squareup.sqldelight / Query / execute execute abstract fun execute(): SqlCursor Execute the underlying statement. Return the cursor for the statement's result set.","title":"Execute"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/execute/#execute","text":"abstract fun execute(): SqlCursor Execute the underlying statement. Return the cursor for the statement's result set.","title":"execute"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/mapper/","text":"runtime / com.squareup.sqldelight / Query / mapper mapper val mapper: ( SqlCursor ) -> RowType The mapper this Query was created with, which can convert a row in the SQL cursor returned by execute to RowType . Property mapper - The mapper this Query was created with, which can convert a row in the SQL cursor returned by execute to RowType .","title":"Mapper"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/mapper/#mapper","text":"val mapper: ( SqlCursor ) -> RowType The mapper this Query was created with, which can convert a row in the SQL cursor returned by execute to RowType .","title":"mapper"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/mapper/#property","text":"mapper - The mapper this Query was created with, which can convert a row in the SQL cursor returned by execute to RowType .","title":"Property"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/notify-data-changed/","text":"runtime / com.squareup.sqldelight / Query / notifyDataChanged notifyDataChanged fun notifyDataChanged(): Unit Notify listeners that their current result set is staled. Called internally by SQLDelight when it detects a possible staling of the result set. Emits some false positives but never misses a true positive.","title":"Notify data changed"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/notify-data-changed/#notifydatachanged","text":"fun notifyDataChanged(): Unit Notify listeners that their current result set is staled. Called internally by SQLDelight when it detects a possible staling of the result set. Emits some false positives but never misses a true positive.","title":"notifyDataChanged"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/remove-listener/","text":"runtime / com.squareup.sqldelight / Query / removeListener removeListener fun removeListener(listener: Query.Listener ): Unit Remove a listener to no longer be notified of future changes in the result set.","title":"Remove listener"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/remove-listener/#removelistener","text":"fun removeListener(listener: Query.Listener ): Unit Remove a listener to no longer be notified of future changes in the result set.","title":"removeListener"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/-listener/","text":"runtime / com.squareup.sqldelight / Query / Listener Listener interface Listener An interface for listening to changes in the result set of a query. Functions Name Summary queryResultsChanged abstract fun queryResultsChanged(): Unit Called whenever the query this listener was attached to is dirtied.","title":"Home"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/-listener/#listener","text":"interface Listener An interface for listening to changes in the result set of a query.","title":"Listener"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/-listener/#functions","text":"Name Summary queryResultsChanged abstract fun queryResultsChanged(): Unit Called whenever the query this listener was attached to is dirtied.","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/-listener/query-results-changed/","text":"runtime / com.squareup.sqldelight / Query / Listener / queryResultsChanged queryResultsChanged abstract fun queryResultsChanged(): Unit Called whenever the query this listener was attached to is dirtied.","title":"Query results changed"},{"location":"1.x/runtime/com.squareup.sqldelight/-query/-listener/query-results-changed/#queryresultschanged","text":"abstract fun queryResultsChanged(): Unit Called whenever the query this listener was attached to is dirtied.","title":"queryResultsChanged"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/","text":"runtime / com.squareup.sqldelight / Transacter Transacter interface Transacter A transaction-aware SqlDriver wrapper which can begin a Transaction on the current connection. Types Name Summary Transaction abstract class Transaction : TransactionCallbacks A SQL transaction. Can be created through the driver via SqlDriver.newTransaction or through an implementation of Transacter by calling Transacter.transaction . Functions Name Summary transaction abstract fun transaction(noEnclosing: Boolean = false, body: TransactionWithoutReturn .() -> Unit ): Unit Starts a Transaction and runs body in that transaction. transactionWithResult abstract fun <R> transactionWithResult(noEnclosing: Boolean = false, bodyWithReturn: TransactionWithReturn < R >.() -> R ): R Starts a Transaction and runs body in that transaction. Inheritors Name Summary TransacterImpl abstract class TransacterImpl : Transacter A transaction-aware SqlDriver wrapper which can begin a Transaction on the current connection.","title":"Home"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/#transacter","text":"interface Transacter A transaction-aware SqlDriver wrapper which can begin a Transaction on the current connection.","title":"Transacter"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/#types","text":"Name Summary Transaction abstract class Transaction : TransactionCallbacks A SQL transaction. Can be created through the driver via SqlDriver.newTransaction or through an implementation of Transacter by calling Transacter.transaction .","title":"Types"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/#functions","text":"Name Summary transaction abstract fun transaction(noEnclosing: Boolean = false, body: TransactionWithoutReturn .() -> Unit ): Unit Starts a Transaction and runs body in that transaction. transactionWithResult abstract fun <R> transactionWithResult(noEnclosing: Boolean = false, bodyWithReturn: TransactionWithReturn < R >.() -> R ): R Starts a Transaction and runs body in that transaction.","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/#inheritors","text":"Name Summary TransacterImpl abstract class TransacterImpl : Transacter A transaction-aware SqlDriver wrapper which can begin a Transaction on the current connection.","title":"Inheritors"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/transaction-with-result/","text":"runtime / com.squareup.sqldelight / Transacter / transactionWithResult transactionWithResult abstract fun <R> transactionWithResult(noEnclosing: Boolean = false, bodyWithReturn: TransactionWithReturn < R >.() -> R ): R Starts a Transaction and runs body in that transaction. Exceptions IllegalStateException - if noEnclosing is true and there is already an active Transaction on this thread.","title":"Transaction with result"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/transaction-with-result/#transactionwithresult","text":"abstract fun <R> transactionWithResult(noEnclosing: Boolean = false, bodyWithReturn: TransactionWithReturn < R >.() -> R ): R Starts a Transaction and runs body in that transaction.","title":"transactionWithResult"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/transaction-with-result/#exceptions","text":"IllegalStateException - if noEnclosing is true and there is already an active Transaction on this thread.","title":"Exceptions"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/transaction/","text":"runtime / com.squareup.sqldelight / Transacter / transaction transaction abstract fun transaction(noEnclosing: Boolean = false, body: TransactionWithoutReturn .() -> Unit ): Unit Starts a Transaction and runs body in that transaction. Exceptions IllegalStateException - if noEnclosing is true and there is already an active Transaction on this thread.","title":"Transaction"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/transaction/#transaction","text":"abstract fun transaction(noEnclosing: Boolean = false, body: TransactionWithoutReturn .() -> Unit ): Unit Starts a Transaction and runs body in that transaction.","title":"transaction"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/transaction/#exceptions","text":"IllegalStateException - if noEnclosing is true and there is already an active Transaction on this thread.","title":"Exceptions"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/-transaction/","text":"runtime / com.squareup.sqldelight / Transacter / Transaction Transaction abstract class Transaction : TransactionCallbacks A SQL transaction. Can be created through the driver via SqlDriver.newTransaction or through an implementation of Transacter by calling Transacter.transaction . Constructors Name Summary <init> Transaction() A SQL transaction. Can be created through the driver via SqlDriver.newTransaction or through an implementation of Transacter by calling Transacter.transaction . Properties Name Summary enclosingTransaction abstract val enclosingTransaction: Transacter.Transaction ? The parent transaction, if there is any. Functions Name Summary afterCommit open fun afterCommit(function: () -> Unit ): Unit Queues function to be run after this transaction successfully commits. afterRollback open fun afterRollback(function: () -> Unit ): Unit Queues function to be run after this transaction rolls back. endTransaction abstract fun endTransaction(successful: Boolean ): Unit Signal to the underlying SQL driver that this transaction should be finished.","title":"Home"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/-transaction/#transaction","text":"abstract class Transaction : TransactionCallbacks A SQL transaction. Can be created through the driver via SqlDriver.newTransaction or through an implementation of Transacter by calling Transacter.transaction .","title":"Transaction"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/-transaction/#constructors","text":"Name Summary <init> Transaction() A SQL transaction. Can be created through the driver via SqlDriver.newTransaction or through an implementation of Transacter by calling Transacter.transaction .","title":"Constructors"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/-transaction/#properties","text":"Name Summary enclosingTransaction abstract val enclosingTransaction: Transacter.Transaction ? The parent transaction, if there is any.","title":"Properties"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/-transaction/#functions","text":"Name Summary afterCommit open fun afterCommit(function: () -> Unit ): Unit Queues function to be run after this transaction successfully commits. afterRollback open fun afterRollback(function: () -> Unit ): Unit Queues function to be run after this transaction rolls back. endTransaction abstract fun endTransaction(successful: Boolean ): Unit Signal to the underlying SQL driver that this transaction should be finished.","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/-transaction/-init-/","text":"runtime / com.squareup.sqldelight / Transacter / Transaction / <init> <init> Transaction() A SQL transaction. Can be created through the driver via SqlDriver.newTransaction or through an implementation of Transacter by calling Transacter.transaction .","title":" init "},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/-transaction/-init-/#init","text":"Transaction() A SQL transaction. Can be created through the driver via SqlDriver.newTransaction or through an implementation of Transacter by calling Transacter.transaction .","title":"&lt;init&gt;"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/-transaction/after-commit/","text":"runtime / com.squareup.sqldelight / Transacter / Transaction / afterCommit afterCommit open fun afterCommit(function: () -> Unit ): Unit Overrides TransactionCallbacks.afterCommit Queues function to be run after this transaction successfully commits.","title":"After commit"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/-transaction/after-commit/#aftercommit","text":"open fun afterCommit(function: () -> Unit ): Unit Overrides TransactionCallbacks.afterCommit Queues function to be run after this transaction successfully commits.","title":"afterCommit"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/-transaction/after-rollback/","text":"runtime / com.squareup.sqldelight / Transacter / Transaction / afterRollback afterRollback open fun afterRollback(function: () -> Unit ): Unit Overrides TransactionCallbacks.afterRollback Queues function to be run after this transaction rolls back.","title":"After rollback"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/-transaction/after-rollback/#afterrollback","text":"open fun afterRollback(function: () -> Unit ): Unit Overrides TransactionCallbacks.afterRollback Queues function to be run after this transaction rolls back.","title":"afterRollback"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/-transaction/enclosing-transaction/","text":"runtime / com.squareup.sqldelight / Transacter / Transaction / enclosingTransaction enclosingTransaction protected abstract val enclosingTransaction: Transacter.Transaction ? The parent transaction, if there is any.","title":"Enclosing transaction"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/-transaction/enclosing-transaction/#enclosingtransaction","text":"protected abstract val enclosingTransaction: Transacter.Transaction ? The parent transaction, if there is any.","title":"enclosingTransaction"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/-transaction/end-transaction/","text":"runtime / com.squareup.sqldelight / Transacter / Transaction / endTransaction endTransaction protected abstract fun endTransaction(successful: Boolean ): Unit Signal to the underlying SQL driver that this transaction should be finished. Parameters successful - Whether the transaction completed successfully or not.","title":"End transaction"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/-transaction/end-transaction/#endtransaction","text":"protected abstract fun endTransaction(successful: Boolean ): Unit Signal to the underlying SQL driver that this transaction should be finished.","title":"endTransaction"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/-transaction/end-transaction/#parameters","text":"successful - Whether the transaction completed successfully or not.","title":"Parameters"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/-transaction/rollback/","text":"runtime / com.squareup.sqldelight / Transacter / Transaction / rollback rollback fun rollback(): Nothing Rolls back this transaction.","title":"rollback - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/-transaction/rollback/#rollback","text":"fun rollback(): Nothing Rolls back this transaction.","title":"rollback"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/-transaction/transaction/","text":"runtime / com.squareup.sqldelight / Transacter / Transaction / transaction transaction fun transaction(body: Transacter.Transaction .() -> Unit ): Unit Begin an inner transaction.","title":"transaction - SQLDelight"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter/-transaction/transaction/#transaction","text":"fun transaction(body: Transacter.Transaction .() -> Unit ): Unit Begin an inner transaction.","title":"transaction"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter-impl/","text":"runtime / com.squareup.sqldelight / TransacterImpl TransacterImpl abstract class TransacterImpl : Transacter A transaction-aware SqlDriver wrapper which can begin a Transaction on the current connection. Constructors Name Summary <init> TransacterImpl(driver: SqlDriver ) A transaction-aware SqlDriver wrapper which can begin a Transaction on the current connection. Functions Name Summary createArguments fun createArguments(count: Int ): String For internal use, creates a string in the format (?, ?, ?) where there are count offset. notifyQueries fun notifyQueries(identifier: Int , queryList: () -> List < Query <*>>): Unit For internal use, notifies the listeners of queryList that their underlying result set has changed. transaction open fun transaction(noEnclosing: Boolean , body: TransactionWithoutReturn .() -> Unit ): Unit Starts a Transaction and runs body in that transaction. transactionWithResult open fun <R> transactionWithResult(noEnclosing: Boolean , bodyWithReturn: TransactionWithReturn < R >.() -> R ): R Starts a Transaction and runs body in that transaction.","title":"Home"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter-impl/#transacterimpl","text":"abstract class TransacterImpl : Transacter A transaction-aware SqlDriver wrapper which can begin a Transaction on the current connection.","title":"TransacterImpl"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter-impl/#constructors","text":"Name Summary <init> TransacterImpl(driver: SqlDriver ) A transaction-aware SqlDriver wrapper which can begin a Transaction on the current connection.","title":"Constructors"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter-impl/#functions","text":"Name Summary createArguments fun createArguments(count: Int ): String For internal use, creates a string in the format (?, ?, ?) where there are count offset. notifyQueries fun notifyQueries(identifier: Int , queryList: () -> List < Query <*>>): Unit For internal use, notifies the listeners of queryList that their underlying result set has changed. transaction open fun transaction(noEnclosing: Boolean , body: TransactionWithoutReturn .() -> Unit ): Unit Starts a Transaction and runs body in that transaction. transactionWithResult open fun <R> transactionWithResult(noEnclosing: Boolean , bodyWithReturn: TransactionWithReturn < R >.() -> R ): R Starts a Transaction and runs body in that transaction.","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter-impl/-init-/","text":"runtime / com.squareup.sqldelight / TransacterImpl / <init> <init> TransacterImpl(driver: SqlDriver ) A transaction-aware SqlDriver wrapper which can begin a Transaction on the current connection.","title":" init "},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter-impl/-init-/#init","text":"TransacterImpl(driver: SqlDriver ) A transaction-aware SqlDriver wrapper which can begin a Transaction on the current connection.","title":"&lt;init&gt;"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter-impl/create-arguments/","text":"runtime / com.squareup.sqldelight / TransacterImpl / createArguments createArguments protected fun createArguments(count: Int ): String For internal use, creates a string in the format (?, ?, ?) where there are count offset.","title":"Create arguments"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter-impl/create-arguments/#createarguments","text":"protected fun createArguments(count: Int ): String For internal use, creates a string in the format (?, ?, ?) where there are count offset.","title":"createArguments"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter-impl/notify-queries/","text":"runtime / com.squareup.sqldelight / TransacterImpl / notifyQueries notifyQueries protected fun notifyQueries(identifier: Int , queryList: () -> List < Query <*>>): Unit For internal use, notifies the listeners of queryList that their underlying result set has changed.","title":"Notify queries"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter-impl/notify-queries/#notifyqueries","text":"protected fun notifyQueries(identifier: Int , queryList: () -> List < Query <*>>): Unit For internal use, notifies the listeners of queryList that their underlying result set has changed.","title":"notifyQueries"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter-impl/transaction-with-result/","text":"runtime / com.squareup.sqldelight / TransacterImpl / transactionWithResult transactionWithResult open fun <R> transactionWithResult(noEnclosing: Boolean , bodyWithReturn: TransactionWithReturn < R >.() -> R ): R Overrides Transacter.transactionWithResult Starts a Transaction and runs body in that transaction. Exceptions IllegalStateException - if noEnclosing is true and there is already an active Transaction on this thread.","title":"Transaction with result"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter-impl/transaction-with-result/#transactionwithresult","text":"open fun <R> transactionWithResult(noEnclosing: Boolean , bodyWithReturn: TransactionWithReturn < R >.() -> R ): R Overrides Transacter.transactionWithResult Starts a Transaction and runs body in that transaction.","title":"transactionWithResult"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter-impl/transaction-with-result/#exceptions","text":"IllegalStateException - if noEnclosing is true and there is already an active Transaction on this thread.","title":"Exceptions"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter-impl/transaction/","text":"runtime / com.squareup.sqldelight / TransacterImpl / transaction transaction open fun transaction(noEnclosing: Boolean , body: TransactionWithoutReturn .() -> Unit ): Unit Overrides Transacter.transaction Starts a Transaction and runs body in that transaction. Exceptions IllegalStateException - if noEnclosing is true and there is already an active Transaction on this thread.","title":"Transaction"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter-impl/transaction/#transaction","text":"open fun transaction(noEnclosing: Boolean , body: TransactionWithoutReturn .() -> Unit ): Unit Overrides Transacter.transaction Starts a Transaction and runs body in that transaction.","title":"transaction"},{"location":"1.x/runtime/com.squareup.sqldelight/-transacter-impl/transaction/#exceptions","text":"IllegalStateException - if noEnclosing is true and there is already an active Transaction on this thread.","title":"Exceptions"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-callbacks/","text":"runtime / com.squareup.sqldelight / TransactionCallbacks TransactionCallbacks interface TransactionCallbacks Functions Name Summary afterCommit abstract fun afterCommit(function: () -> Unit ): Unit afterRollback abstract fun afterRollback(function: () -> Unit ): Unit Inheritors Name Summary Transaction abstract class Transaction : TransactionCallbacks A SQL transaction. Can be created through the driver via SqlDriver.newTransaction or through an implementation of Transacter by calling Transacter.transaction . TransactionWithoutReturn interface TransactionWithoutReturn : TransactionCallbacks TransactionWithReturn interface TransactionWithReturn<R> : TransactionCallbacks","title":"Home"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-callbacks/#transactioncallbacks","text":"interface TransactionCallbacks","title":"TransactionCallbacks"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-callbacks/#functions","text":"Name Summary afterCommit abstract fun afterCommit(function: () -> Unit ): Unit afterRollback abstract fun afterRollback(function: () -> Unit ): Unit","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-callbacks/#inheritors","text":"Name Summary Transaction abstract class Transaction : TransactionCallbacks A SQL transaction. Can be created through the driver via SqlDriver.newTransaction or through an implementation of Transacter by calling Transacter.transaction . TransactionWithoutReturn interface TransactionWithoutReturn : TransactionCallbacks TransactionWithReturn interface TransactionWithReturn<R> : TransactionCallbacks","title":"Inheritors"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-callbacks/after-commit/","text":"runtime / com.squareup.sqldelight / TransactionCallbacks / afterCommit afterCommit abstract fun afterCommit(function: () -> Unit ): Unit","title":"After commit"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-callbacks/after-commit/#aftercommit","text":"abstract fun afterCommit(function: () -> Unit ): Unit","title":"afterCommit"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-callbacks/after-rollback/","text":"runtime / com.squareup.sqldelight / TransactionCallbacks / afterRollback afterRollback abstract fun afterRollback(function: () -> Unit ): Unit","title":"After rollback"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-callbacks/after-rollback/#afterrollback","text":"abstract fun afterRollback(function: () -> Unit ): Unit","title":"afterRollback"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-with-return/","text":"runtime / com.squareup.sqldelight / TransactionWithReturn TransactionWithReturn interface TransactionWithReturn<R> : TransactionCallbacks Functions Name Summary rollback open fun rollback(returnValue: R ): Nothing Rolls back this transaction. transaction abstract fun <R> transaction(body: TransactionWithReturn < R >.() -> R ): R Begin an inner transaction. Inherited Functions Name Summary afterCommit abstract fun afterCommit(function: () -> Unit ): Unit afterRollback abstract fun afterRollback(function: () -> Unit ): Unit","title":"Home"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-with-return/#transactionwithreturn","text":"interface TransactionWithReturn<R> : TransactionCallbacks","title":"TransactionWithReturn"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-with-return/#functions","text":"Name Summary rollback open fun rollback(returnValue: R ): Nothing Rolls back this transaction. transaction abstract fun <R> transaction(body: TransactionWithReturn < R >.() -> R ): R Begin an inner transaction.","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-with-return/#inherited-functions","text":"Name Summary afterCommit abstract fun afterCommit(function: () -> Unit ): Unit afterRollback abstract fun afterRollback(function: () -> Unit ): Unit","title":"Inherited Functions"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-with-return/rollback/","text":"runtime / com.squareup.sqldelight / TransactionWithReturn / rollback rollback open fun rollback(returnValue: R ): Nothing Rolls back this transaction.","title":"Rollback"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-with-return/rollback/#rollback","text":"open fun rollback(returnValue: R ): Nothing Rolls back this transaction.","title":"rollback"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-with-return/transaction/","text":"runtime / com.squareup.sqldelight / TransactionWithReturn / transaction transaction abstract fun <R> transaction(body: TransactionWithReturn < R >.() -> R ): R Begin an inner transaction.","title":"Transaction"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-with-return/transaction/#transaction","text":"abstract fun <R> transaction(body: TransactionWithReturn < R >.() -> R ): R Begin an inner transaction.","title":"transaction"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-without-return/","text":"runtime / com.squareup.sqldelight / TransactionWithoutReturn TransactionWithoutReturn interface TransactionWithoutReturn : TransactionCallbacks Functions Name Summary rollback open fun rollback(): Nothing Rolls back this transaction. transaction abstract fun transaction(body: TransactionWithoutReturn .() -> Unit ): Unit Begin an inner transaction. Inherited Functions Name Summary afterCommit abstract fun afterCommit(function: () -> Unit ): Unit afterRollback abstract fun afterRollback(function: () -> Unit ): Unit","title":"Home"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-without-return/#transactionwithoutreturn","text":"interface TransactionWithoutReturn : TransactionCallbacks","title":"TransactionWithoutReturn"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-without-return/#functions","text":"Name Summary rollback open fun rollback(): Nothing Rolls back this transaction. transaction abstract fun transaction(body: TransactionWithoutReturn .() -> Unit ): Unit Begin an inner transaction.","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-without-return/#inherited-functions","text":"Name Summary afterCommit abstract fun afterCommit(function: () -> Unit ): Unit afterRollback abstract fun afterRollback(function: () -> Unit ): Unit","title":"Inherited Functions"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-without-return/rollback/","text":"runtime / com.squareup.sqldelight / TransactionWithoutReturn / rollback rollback open fun rollback(): Nothing Rolls back this transaction.","title":"Rollback"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-without-return/rollback/#rollback","text":"open fun rollback(): Nothing Rolls back this transaction.","title":"rollback"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-without-return/transaction/","text":"runtime / com.squareup.sqldelight / TransactionWithoutReturn / transaction transaction abstract fun transaction(body: TransactionWithoutReturn .() -> Unit ): Unit Begin an inner transaction.","title":"Transaction"},{"location":"1.x/runtime/com.squareup.sqldelight/-transaction-without-return/transaction/#transaction","text":"abstract fun transaction(body: TransactionWithoutReturn .() -> Unit ): Unit Begin an inner transaction.","title":"transaction"},{"location":"1.x/runtime/com.squareup.sqldelight.db/","text":"runtime / com.squareup.sqldelight.db Package com.squareup.sqldelight.db Types Name Summary Closeable (JVM, js, native) expect interface Closeable A type that can be closed. SqlCursor interface SqlCursor : Closeable Represents a SQL result set which can be iterated through with next . Initially the cursor will not point to any row, and calling next once will iterate to the first row. SqlDriver interface SqlDriver : Closeable Maintains connections to an underlying SQL database and provides APIs for managing transactions and executing SQL statements. SqlPreparedStatement interface SqlPreparedStatement Represents a SQL statement that has been prepared by a driver to be executed. Functions Name Summary use (JVM, js, native) expect fun <T : Closeable ?, R> T .use(body: ( T ) -> R ): R Run body on the receiver and call Closeable.close before returning or throwing.","title":"Home"},{"location":"1.x/runtime/com.squareup.sqldelight.db/#package-comsquareupsqldelightdb","text":"","title":"Package com.squareup.sqldelight.db"},{"location":"1.x/runtime/com.squareup.sqldelight.db/#types","text":"Name Summary Closeable (JVM, js, native) expect interface Closeable A type that can be closed. SqlCursor interface SqlCursor : Closeable Represents a SQL result set which can be iterated through with next . Initially the cursor will not point to any row, and calling next once will iterate to the first row. SqlDriver interface SqlDriver : Closeable Maintains connections to an underlying SQL database and provides APIs for managing transactions and executing SQL statements. SqlPreparedStatement interface SqlPreparedStatement Represents a SQL statement that has been prepared by a driver to be executed.","title":"Types"},{"location":"1.x/runtime/com.squareup.sqldelight.db/#functions","text":"Name Summary use (JVM, js, native) expect fun <T : Closeable ?, R> T .use(body: ( T ) -> R ): R Run body on the receiver and call Closeable.close before returning or throwing.","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight.db/use/","text":"runtime / com.squareup.sqldelight.db / use use expect inline fun <T : Closeable ?, R> T .use(body: ( T ) -> R ): R Platform and version requirements: JVM, js, native Run body on the receiver and call Closeable.close before returning or throwing.","title":"Use"},{"location":"1.x/runtime/com.squareup.sqldelight.db/use/#use","text":"expect inline fun <T : Closeable ?, R> T .use(body: ( T ) -> R ): R Platform and version requirements: JVM, js, native Run body on the receiver and call Closeable.close before returning or throwing.","title":"use"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-closeable/","text":"runtime / com.squareup.sqldelight.db / Closeable Closeable expect interface Closeable Platform and version requirements: JVM, js, native A type that can be closed. Functions Name Summary close (js, native) abstract fun close(): Unit Close any resources backed by this object. Extension Functions Name Summary use (JVM, js, native) expect fun <T : Closeable ?, R> T .use(body: ( T ) -> R ): R Run body on the receiver and call Closeable.close before returning or throwing. Inheritors Name Summary SqlCursor interface SqlCursor : Closeable Represents a SQL result set which can be iterated through with next . Initially the cursor will not point to any row, and calling next once will iterate to the first row. SqlDriver interface SqlDriver : Closeable Maintains connections to an underlying SQL database and provides APIs for managing transactions and executing SQL statements.","title":"Home"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-closeable/#closeable","text":"expect interface Closeable Platform and version requirements: JVM, js, native A type that can be closed.","title":"Closeable"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-closeable/#functions","text":"Name Summary close (js, native) abstract fun close(): Unit Close any resources backed by this object.","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-closeable/#extension-functions","text":"Name Summary use (JVM, js, native) expect fun <T : Closeable ?, R> T .use(body: ( T ) -> R ): R Run body on the receiver and call Closeable.close before returning or throwing.","title":"Extension Functions"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-closeable/#inheritors","text":"Name Summary SqlCursor interface SqlCursor : Closeable Represents a SQL result set which can be iterated through with next . Initially the cursor will not point to any row, and calling next once will iterate to the first row. SqlDriver interface SqlDriver : Closeable Maintains connections to an underlying SQL database and provides APIs for managing transactions and executing SQL statements.","title":"Inheritors"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-closeable/close/","text":"runtime / com.squareup.sqldelight.db / Closeable / close close abstract fun close(): Unit Platform and version requirements: js, native Close any resources backed by this object.","title":"Close"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-closeable/close/#close","text":"abstract fun close(): Unit Platform and version requirements: js, native Close any resources backed by this object.","title":"close"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-cursor/","text":"runtime / com.squareup.sqldelight.db / SqlCursor SqlCursor interface SqlCursor : Closeable Represents a SQL result set which can be iterated through with next . Initially the cursor will not point to any row, and calling next once will iterate to the first row. Functions Name Summary getBytes abstract fun getBytes(index: Int ): ByteArray ? getDouble abstract fun getDouble(index: Int ): Double ? getLong abstract fun getLong(index: Int ): Long ? getString abstract fun getString(index: Int ): String ? next abstract fun next(): Boolean Move to the next row in the result set. Inherited Functions Name Summary close (js, native) abstract fun close(): Unit Close any resources backed by this object. Extension Functions Name Summary use (JVM, js, native) expect fun <T : Closeable ?, R> T .use(body: ( T ) -> R ): R Run body on the receiver and call Closeable.close before returning or throwing.","title":"Home"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-cursor/#sqlcursor","text":"interface SqlCursor : Closeable Represents a SQL result set which can be iterated through with next . Initially the cursor will not point to any row, and calling next once will iterate to the first row.","title":"SqlCursor"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-cursor/#functions","text":"Name Summary getBytes abstract fun getBytes(index: Int ): ByteArray ? getDouble abstract fun getDouble(index: Int ): Double ? getLong abstract fun getLong(index: Int ): Long ? getString abstract fun getString(index: Int ): String ? next abstract fun next(): Boolean Move to the next row in the result set.","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-cursor/#inherited-functions","text":"Name Summary close (js, native) abstract fun close(): Unit Close any resources backed by this object.","title":"Inherited Functions"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-cursor/#extension-functions","text":"Name Summary use (JVM, js, native) expect fun <T : Closeable ?, R> T .use(body: ( T ) -> R ): R Run body on the receiver and call Closeable.close before returning or throwing.","title":"Extension Functions"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-cursor/get-bytes/","text":"runtime / com.squareup.sqldelight.db / SqlCursor / getBytes getBytes abstract fun getBytes(index: Int ): ByteArray ? Return The bytes or null value of column index for the current row of the result set.","title":"Get bytes"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-cursor/get-bytes/#getbytes","text":"abstract fun getBytes(index: Int ): ByteArray ? Return The bytes or null value of column index for the current row of the result set.","title":"getBytes"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-cursor/get-double/","text":"runtime / com.squareup.sqldelight.db / SqlCursor / getDouble getDouble abstract fun getDouble(index: Int ): Double ? Return The double or null value of column index for the current row of the result set.","title":"Get double"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-cursor/get-double/#getdouble","text":"abstract fun getDouble(index: Int ): Double ? Return The double or null value of column index for the current row of the result set.","title":"getDouble"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-cursor/get-long/","text":"runtime / com.squareup.sqldelight.db / SqlCursor / getLong getLong abstract fun getLong(index: Int ): Long ? Return The int or null value of column index for the current row of the result set.","title":"Get long"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-cursor/get-long/#getlong","text":"abstract fun getLong(index: Int ): Long ? Return The int or null value of column index for the current row of the result set.","title":"getLong"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-cursor/get-string/","text":"runtime / com.squareup.sqldelight.db / SqlCursor / getString getString abstract fun getString(index: Int ): String ? Return The string or null value of column index for the current row of the result set.","title":"Get string"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-cursor/get-string/#getstring","text":"abstract fun getString(index: Int ): String ? Return The string or null value of column index for the current row of the result set.","title":"getString"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-cursor/next/","text":"runtime / com.squareup.sqldelight.db / SqlCursor / next next abstract fun next(): Boolean Move to the next row in the result set. Return true if the cursor successfully moved to a new row, false if there was no row to iterate to.","title":"Next"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-cursor/next/#next","text":"abstract fun next(): Boolean Move to the next row in the result set. Return true if the cursor successfully moved to a new row, false if there was no row to iterate to.","title":"next"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/","text":"runtime / com.squareup.sqldelight.db / SqlDriver SqlDriver interface SqlDriver : Closeable Maintains connections to an underlying SQL database and provides APIs for managing transactions and executing SQL statements. Types Name Summary Schema interface Schema API for creating and migrating a SQL database. Functions Name Summary currentTransaction abstract fun currentTransaction(): Transacter.Transaction ? The currently open Transacter.Transaction on the database. execute abstract fun execute(identifier: Int ?, sql: String , parameters: Int , binders: ( SqlPreparedStatement .() -> Unit )? = null): Unit Execute a SQL statement. executeQuery abstract fun executeQuery(identifier: Int ?, sql: String , parameters: Int , binders: ( SqlPreparedStatement .() -> Unit )? = null): SqlCursor Execute a SQL statement and return a SqlCursor that iterates the result set. newTransaction abstract fun newTransaction(): Transacter.Transaction Start a new Transacter.Transaction on the database. Inherited Functions Name Summary close (js, native) abstract fun close(): Unit Close any resources backed by this object. Extension Functions Name Summary use (JVM, js, native) expect fun <T : Closeable ?, R> T .use(body: ( T ) -> R ): R Run body on the receiver and call Closeable.close before returning or throwing. Inheritors Name Summary LogSqliteDriver class LogSqliteDriver : SqlDriver","title":"Home"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/#sqldriver","text":"interface SqlDriver : Closeable Maintains connections to an underlying SQL database and provides APIs for managing transactions and executing SQL statements.","title":"SqlDriver"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/#types","text":"Name Summary Schema interface Schema API for creating and migrating a SQL database.","title":"Types"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/#functions","text":"Name Summary currentTransaction abstract fun currentTransaction(): Transacter.Transaction ? The currently open Transacter.Transaction on the database. execute abstract fun execute(identifier: Int ?, sql: String , parameters: Int , binders: ( SqlPreparedStatement .() -> Unit )? = null): Unit Execute a SQL statement. executeQuery abstract fun executeQuery(identifier: Int ?, sql: String , parameters: Int , binders: ( SqlPreparedStatement .() -> Unit )? = null): SqlCursor Execute a SQL statement and return a SqlCursor that iterates the result set. newTransaction abstract fun newTransaction(): Transacter.Transaction Start a new Transacter.Transaction on the database.","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/#inherited-functions","text":"Name Summary close (js, native) abstract fun close(): Unit Close any resources backed by this object.","title":"Inherited Functions"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/#extension-functions","text":"Name Summary use (JVM, js, native) expect fun <T : Closeable ?, R> T .use(body: ( T ) -> R ): R Run body on the receiver and call Closeable.close before returning or throwing.","title":"Extension Functions"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/#inheritors","text":"Name Summary LogSqliteDriver class LogSqliteDriver : SqlDriver","title":"Inheritors"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/current-transaction/","text":"runtime / com.squareup.sqldelight.db / SqlDriver / currentTransaction currentTransaction abstract fun currentTransaction(): Transacter.Transaction ? The currently open Transacter.Transaction on the database. It's up to the implementor how this method behaves for different connection/threading patterns.","title":"Current transaction"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/current-transaction/#currenttransaction","text":"abstract fun currentTransaction(): Transacter.Transaction ? The currently open Transacter.Transaction on the database. It's up to the implementor how this method behaves for different connection/threading patterns.","title":"currentTransaction"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/execute-query/","text":"runtime / com.squareup.sqldelight.db / SqlDriver / executeQuery executeQuery abstract fun executeQuery(identifier: Int ?, sql: String , parameters: Int , binders: ( SqlPreparedStatement .() -> Unit )? = null): SqlCursor Execute a SQL statement and return a SqlCursor that iterates the result set. Parameters identifier - An opaque, unique value that can be used to implement any driver-side caching of prepared statements. If identifier is null, a fresh statement is required. sql - The SQL string to be executed. parameters - The number of bindable parameters sql contains. binders - A lambda which is called before execution to bind any parameters to the SQL statement.","title":"Execute query"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/execute-query/#executequery","text":"abstract fun executeQuery(identifier: Int ?, sql: String , parameters: Int , binders: ( SqlPreparedStatement .() -> Unit )? = null): SqlCursor Execute a SQL statement and return a SqlCursor that iterates the result set.","title":"executeQuery"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/execute-query/#parameters","text":"identifier - An opaque, unique value that can be used to implement any driver-side caching of prepared statements. If identifier is null, a fresh statement is required. sql - The SQL string to be executed. parameters - The number of bindable parameters sql contains. binders - A lambda which is called before execution to bind any parameters to the SQL statement.","title":"Parameters"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/execute/","text":"runtime / com.squareup.sqldelight.db / SqlDriver / execute execute abstract fun execute(identifier: Int ?, sql: String , parameters: Int , binders: ( SqlPreparedStatement .() -> Unit )? = null): Unit Execute a SQL statement. Parameters identifier - An opaque, unique value that can be used to implement any driver-side caching of prepared statements. If identifier is null, a fresh statement is required. sql - The SQL string to be executed. parameters - The number of bindable parameters sql contains. binders - A lambda which is called before execution to bind any parameters to the SQL statement.","title":"Execute"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/execute/#execute","text":"abstract fun execute(identifier: Int ?, sql: String , parameters: Int , binders: ( SqlPreparedStatement .() -> Unit )? = null): Unit Execute a SQL statement.","title":"execute"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/execute/#parameters","text":"identifier - An opaque, unique value that can be used to implement any driver-side caching of prepared statements. If identifier is null, a fresh statement is required. sql - The SQL string to be executed. parameters - The number of bindable parameters sql contains. binders - A lambda which is called before execution to bind any parameters to the SQL statement.","title":"Parameters"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/new-transaction/","text":"runtime / com.squareup.sqldelight.db / SqlDriver / newTransaction newTransaction abstract fun newTransaction(): Transacter.Transaction Start a new Transacter.Transaction on the database. It's up to the implementor how this method behaves for different connection/threading patterns.","title":"New transaction"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/new-transaction/#newtransaction","text":"abstract fun newTransaction(): Transacter.Transaction Start a new Transacter.Transaction on the database. It's up to the implementor how this method behaves for different connection/threading patterns.","title":"newTransaction"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/-schema/","text":"runtime / com.squareup.sqldelight.db / SqlDriver / Schema Schema interface Schema API for creating and migrating a SQL database. Properties Name Summary version abstract val version: Int The version of this schema. Functions Name Summary create abstract fun create(driver: SqlDriver ): Unit Use driver to create the schema from scratch. Assumes no existing database state. migrate abstract fun migrate(driver: SqlDriver , oldVersion: Int , newVersion: Int ): Unit Use driver to migrate from schema oldVersion to newVersion .","title":"Home"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/-schema/#schema","text":"interface Schema API for creating and migrating a SQL database.","title":"Schema"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/-schema/#properties","text":"Name Summary version abstract val version: Int The version of this schema.","title":"Properties"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/-schema/#functions","text":"Name Summary create abstract fun create(driver: SqlDriver ): Unit Use driver to create the schema from scratch. Assumes no existing database state. migrate abstract fun migrate(driver: SqlDriver , oldVersion: Int , newVersion: Int ): Unit Use driver to migrate from schema oldVersion to newVersion .","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/-schema/create/","text":"runtime / com.squareup.sqldelight.db / SqlDriver / Schema / create create abstract fun create(driver: SqlDriver ): Unit Use driver to create the schema from scratch. Assumes no existing database state.","title":"Create"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/-schema/create/#create","text":"abstract fun create(driver: SqlDriver ): Unit Use driver to create the schema from scratch. Assumes no existing database state.","title":"create"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/-schema/migrate/","text":"runtime / com.squareup.sqldelight.db / SqlDriver / Schema / migrate migrate abstract fun migrate(driver: SqlDriver , oldVersion: Int , newVersion: Int ): Unit Use driver to migrate from schema oldVersion to newVersion .","title":"Migrate"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/-schema/migrate/#migrate","text":"abstract fun migrate(driver: SqlDriver , oldVersion: Int , newVersion: Int ): Unit Use driver to migrate from schema oldVersion to newVersion .","title":"migrate"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/-schema/version/","text":"runtime / com.squareup.sqldelight.db / SqlDriver / Schema / version version abstract val version: Int The version of this schema.","title":"Version"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-driver/-schema/version/#version","text":"abstract val version: Int The version of this schema.","title":"version"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-prepared-statement/","text":"runtime / com.squareup.sqldelight.db / SqlPreparedStatement SqlPreparedStatement interface SqlPreparedStatement Represents a SQL statement that has been prepared by a driver to be executed. This type is not thread safe unless otherwise specified by the driver emitting these. Prepared statements should not be cached by client code. Drivers can implement caching by using the integer identifier passed to SqlDriver.execute or SqlDriver.executeQuery . Client code can pass the same identifier to that method to request that the prepared statement is cached. Functions Name Summary bindBytes abstract fun bindBytes(index: Int , value: ByteArray ?): Unit Bind value to the underlying statement at index . bindDouble abstract fun bindDouble(index: Int , value: Double ?): Unit Bind value to the underlying statement at index . bindLong abstract fun bindLong(index: Int , value: Long ?): Unit Bind value to the underlying statement at index . bindString abstract fun bindString(index: Int , value: String ?): Unit Bind value to the underlying statement at index . Inheritors Name Summary StatementParameterInterceptor class StatementParameterInterceptor : SqlPreparedStatement","title":"Home"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-prepared-statement/#sqlpreparedstatement","text":"interface SqlPreparedStatement Represents a SQL statement that has been prepared by a driver to be executed. This type is not thread safe unless otherwise specified by the driver emitting these. Prepared statements should not be cached by client code. Drivers can implement caching by using the integer identifier passed to SqlDriver.execute or SqlDriver.executeQuery . Client code can pass the same identifier to that method to request that the prepared statement is cached.","title":"SqlPreparedStatement"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-prepared-statement/#functions","text":"Name Summary bindBytes abstract fun bindBytes(index: Int , value: ByteArray ?): Unit Bind value to the underlying statement at index . bindDouble abstract fun bindDouble(index: Int , value: Double ?): Unit Bind value to the underlying statement at index . bindLong abstract fun bindLong(index: Int , value: Long ?): Unit Bind value to the underlying statement at index . bindString abstract fun bindString(index: Int , value: String ?): Unit Bind value to the underlying statement at index .","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-prepared-statement/#inheritors","text":"Name Summary StatementParameterInterceptor class StatementParameterInterceptor : SqlPreparedStatement","title":"Inheritors"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-prepared-statement/bind-bytes/","text":"runtime / com.squareup.sqldelight.db / SqlPreparedStatement / bindBytes bindBytes abstract fun bindBytes(index: Int , value: ByteArray ?): Unit Bind value to the underlying statement at index .","title":"Bind bytes"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-prepared-statement/bind-bytes/#bindbytes","text":"abstract fun bindBytes(index: Int , value: ByteArray ?): Unit Bind value to the underlying statement at index .","title":"bindBytes"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-prepared-statement/bind-double/","text":"runtime / com.squareup.sqldelight.db / SqlPreparedStatement / bindDouble bindDouble abstract fun bindDouble(index: Int , value: Double ?): Unit Bind value to the underlying statement at index .","title":"Bind double"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-prepared-statement/bind-double/#binddouble","text":"abstract fun bindDouble(index: Int , value: Double ?): Unit Bind value to the underlying statement at index .","title":"bindDouble"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-prepared-statement/bind-long/","text":"runtime / com.squareup.sqldelight.db / SqlPreparedStatement / bindLong bindLong abstract fun bindLong(index: Int , value: Long ?): Unit Bind value to the underlying statement at index .","title":"Bind long"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-prepared-statement/bind-long/#bindlong","text":"abstract fun bindLong(index: Int , value: Long ?): Unit Bind value to the underlying statement at index .","title":"bindLong"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-prepared-statement/bind-string/","text":"runtime / com.squareup.sqldelight.db / SqlPreparedStatement / bindString bindString abstract fun bindString(index: Int , value: String ?): Unit Bind value to the underlying statement at index .","title":"Bind string"},{"location":"1.x/runtime/com.squareup.sqldelight.db/-sql-prepared-statement/bind-string/#bindstring","text":"abstract fun bindString(index: Int , value: String ?): Unit Bind value to the underlying statement at index .","title":"bindString"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/","text":"runtime / com.squareup.sqldelight.logs Package com.squareup.sqldelight.logs Types Name Summary LogSqliteDriver class LogSqliteDriver : SqlDriver StatementParameterInterceptor class StatementParameterInterceptor : SqlPreparedStatement","title":"Home"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/#package-comsquareupsqldelightlogs","text":"","title":"Package com.squareup.sqldelight.logs"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/#types","text":"Name Summary LogSqliteDriver class LogSqliteDriver : SqlDriver StatementParameterInterceptor class StatementParameterInterceptor : SqlPreparedStatement","title":"Types"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/","text":"runtime / com.squareup.sqldelight.logs / LogSqliteDriver LogSqliteDriver class LogSqliteDriver : SqlDriver Constructors Name Summary <init> LogSqliteDriver(sqlDriver: SqlDriver , logger: ( String ) -> Unit ) Functions Name Summary close fun close(): Unit Close any resources backed by this object. currentTransaction fun currentTransaction(): Transacter.Transaction ? The currently open Transacter.Transaction on the database. execute fun execute(identifier: Int ?, sql: String , parameters: Int , binders: ( SqlPreparedStatement .() -> Unit )?): Unit Execute a SQL statement. executeQuery fun executeQuery(identifier: Int ?, sql: String , parameters: Int , binders: ( SqlPreparedStatement .() -> Unit )?): SqlCursor Execute a SQL statement and return a SqlCursor that iterates the result set. newTransaction fun newTransaction(): Transacter.Transaction Start a new Transacter.Transaction on the database. Extension Functions Name Summary use (JVM, js, native) expect fun <T : Closeable ?, R> T .use(body: ( T ) -> R ): R Run body on the receiver and call Closeable.close before returning or throwing.","title":"Home"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/#logsqlitedriver","text":"class LogSqliteDriver : SqlDriver","title":"LogSqliteDriver"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/#constructors","text":"Name Summary <init> LogSqliteDriver(sqlDriver: SqlDriver , logger: ( String ) -> Unit )","title":"Constructors"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/#functions","text":"Name Summary close fun close(): Unit Close any resources backed by this object. currentTransaction fun currentTransaction(): Transacter.Transaction ? The currently open Transacter.Transaction on the database. execute fun execute(identifier: Int ?, sql: String , parameters: Int , binders: ( SqlPreparedStatement .() -> Unit )?): Unit Execute a SQL statement. executeQuery fun executeQuery(identifier: Int ?, sql: String , parameters: Int , binders: ( SqlPreparedStatement .() -> Unit )?): SqlCursor Execute a SQL statement and return a SqlCursor that iterates the result set. newTransaction fun newTransaction(): Transacter.Transaction Start a new Transacter.Transaction on the database.","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/#extension-functions","text":"Name Summary use (JVM, js, native) expect fun <T : Closeable ?, R> T .use(body: ( T ) -> R ): R Run body on the receiver and call Closeable.close before returning or throwing.","title":"Extension Functions"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/-init-/","text":"runtime / com.squareup.sqldelight.logs / LogSqliteDriver / <init> <init> LogSqliteDriver(sqlDriver: SqlDriver , logger: ( String ) -> Unit )","title":" init "},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/-init-/#init","text":"LogSqliteDriver(sqlDriver: SqlDriver , logger: ( String ) -> Unit )","title":"&lt;init&gt;"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/close/","text":"runtime / com.squareup.sqldelight.logs / LogSqliteDriver / close close fun close(): Unit Overrides Closeable.close Close any resources backed by this object.","title":"Close"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/close/#close","text":"fun close(): Unit Overrides Closeable.close Close any resources backed by this object.","title":"close"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/current-transaction/","text":"runtime / com.squareup.sqldelight.logs / LogSqliteDriver / currentTransaction currentTransaction fun currentTransaction(): Transacter.Transaction ? Overrides SqlDriver.currentTransaction The currently open Transacter.Transaction on the database. It's up to the implementor how this method behaves for different connection/threading patterns.","title":"Current transaction"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/current-transaction/#currenttransaction","text":"fun currentTransaction(): Transacter.Transaction ? Overrides SqlDriver.currentTransaction The currently open Transacter.Transaction on the database. It's up to the implementor how this method behaves for different connection/threading patterns.","title":"currentTransaction"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/execute-query/","text":"runtime / com.squareup.sqldelight.logs / LogSqliteDriver / executeQuery executeQuery fun executeQuery(identifier: Int ?, sql: String , parameters: Int , binders: ( SqlPreparedStatement .() -> Unit )?): SqlCursor Overrides SqlDriver.executeQuery Execute a SQL statement and return a SqlCursor that iterates the result set. Parameters identifier - An opaque, unique value that can be used to implement any driver-side caching of prepared statements. If identifier is null, a fresh statement is required. sql - The SQL string to be executed. parameters - The number of bindable parameters sql contains. binders - A lambda which is called before execution to bind any parameters to the SQL statement.","title":"Execute query"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/execute-query/#executequery","text":"fun executeQuery(identifier: Int ?, sql: String , parameters: Int , binders: ( SqlPreparedStatement .() -> Unit )?): SqlCursor Overrides SqlDriver.executeQuery Execute a SQL statement and return a SqlCursor that iterates the result set.","title":"executeQuery"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/execute-query/#parameters","text":"identifier - An opaque, unique value that can be used to implement any driver-side caching of prepared statements. If identifier is null, a fresh statement is required. sql - The SQL string to be executed. parameters - The number of bindable parameters sql contains. binders - A lambda which is called before execution to bind any parameters to the SQL statement.","title":"Parameters"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/execute/","text":"runtime / com.squareup.sqldelight.logs / LogSqliteDriver / execute execute fun execute(identifier: Int ?, sql: String , parameters: Int , binders: ( SqlPreparedStatement .() -> Unit )?): Unit Overrides SqlDriver.execute Execute a SQL statement. Parameters identifier - An opaque, unique value that can be used to implement any driver-side caching of prepared statements. If identifier is null, a fresh statement is required. sql - The SQL string to be executed. parameters - The number of bindable parameters sql contains. binders - A lambda which is called before execution to bind any parameters to the SQL statement.","title":"Execute"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/execute/#execute","text":"fun execute(identifier: Int ?, sql: String , parameters: Int , binders: ( SqlPreparedStatement .() -> Unit )?): Unit Overrides SqlDriver.execute Execute a SQL statement.","title":"execute"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/execute/#parameters","text":"identifier - An opaque, unique value that can be used to implement any driver-side caching of prepared statements. If identifier is null, a fresh statement is required. sql - The SQL string to be executed. parameters - The number of bindable parameters sql contains. binders - A lambda which is called before execution to bind any parameters to the SQL statement.","title":"Parameters"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/new-transaction/","text":"runtime / com.squareup.sqldelight.logs / LogSqliteDriver / newTransaction newTransaction fun newTransaction(): Transacter.Transaction Overrides SqlDriver.newTransaction Start a new Transacter.Transaction on the database. It's up to the implementor how this method behaves for different connection/threading patterns.","title":"New transaction"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-log-sqlite-driver/new-transaction/#newtransaction","text":"fun newTransaction(): Transacter.Transaction Overrides SqlDriver.newTransaction Start a new Transacter.Transaction on the database. It's up to the implementor how this method behaves for different connection/threading patterns.","title":"newTransaction"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-statement-parameter-interceptor/","text":"runtime / com.squareup.sqldelight.logs / StatementParameterInterceptor StatementParameterInterceptor class StatementParameterInterceptor : SqlPreparedStatement Constructors Name Summary <init> StatementParameterInterceptor() Functions Name Summary bindBytes fun bindBytes(index: Int , value: ByteArray ?): Unit Bind value to the underlying statement at index . bindDouble fun bindDouble(index: Int , value: Double ?): Unit Bind value to the underlying statement at index . bindLong fun bindLong(index: Int , value: Long ?): Unit Bind value to the underlying statement at index . bindString fun bindString(index: Int , value: String ?): Unit Bind value to the underlying statement at index . getAndClearParameters fun getAndClearParameters(): List < Any ?>","title":"Home"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-statement-parameter-interceptor/#statementparameterinterceptor","text":"class StatementParameterInterceptor : SqlPreparedStatement","title":"StatementParameterInterceptor"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-statement-parameter-interceptor/#constructors","text":"Name Summary <init> StatementParameterInterceptor()","title":"Constructors"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-statement-parameter-interceptor/#functions","text":"Name Summary bindBytes fun bindBytes(index: Int , value: ByteArray ?): Unit Bind value to the underlying statement at index . bindDouble fun bindDouble(index: Int , value: Double ?): Unit Bind value to the underlying statement at index . bindLong fun bindLong(index: Int , value: Long ?): Unit Bind value to the underlying statement at index . bindString fun bindString(index: Int , value: String ?): Unit Bind value to the underlying statement at index . getAndClearParameters fun getAndClearParameters(): List < Any ?>","title":"Functions"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-statement-parameter-interceptor/-init-/","text":"runtime / com.squareup.sqldelight.logs / StatementParameterInterceptor / <init> <init> StatementParameterInterceptor()","title":" init "},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-statement-parameter-interceptor/-init-/#init","text":"StatementParameterInterceptor()","title":"&lt;init&gt;"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-statement-parameter-interceptor/bind-bytes/","text":"runtime / com.squareup.sqldelight.logs / StatementParameterInterceptor / bindBytes bindBytes fun bindBytes(index: Int , value: ByteArray ?): Unit Overrides SqlPreparedStatement.bindBytes Bind value to the underlying statement at index .","title":"Bind bytes"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-statement-parameter-interceptor/bind-bytes/#bindbytes","text":"fun bindBytes(index: Int , value: ByteArray ?): Unit Overrides SqlPreparedStatement.bindBytes Bind value to the underlying statement at index .","title":"bindBytes"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-statement-parameter-interceptor/bind-double/","text":"runtime / com.squareup.sqldelight.logs / StatementParameterInterceptor / bindDouble bindDouble fun bindDouble(index: Int , value: Double ?): Unit Overrides SqlPreparedStatement.bindDouble Bind value to the underlying statement at index .","title":"Bind double"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-statement-parameter-interceptor/bind-double/#binddouble","text":"fun bindDouble(index: Int , value: Double ?): Unit Overrides SqlPreparedStatement.bindDouble Bind value to the underlying statement at index .","title":"bindDouble"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-statement-parameter-interceptor/bind-long/","text":"runtime / com.squareup.sqldelight.logs / StatementParameterInterceptor / bindLong bindLong fun bindLong(index: Int , value: Long ?): Unit Overrides SqlPreparedStatement.bindLong Bind value to the underlying statement at index .","title":"Bind long"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-statement-parameter-interceptor/bind-long/#bindlong","text":"fun bindLong(index: Int , value: Long ?): Unit Overrides SqlPreparedStatement.bindLong Bind value to the underlying statement at index .","title":"bindLong"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-statement-parameter-interceptor/bind-string/","text":"runtime / com.squareup.sqldelight.logs / StatementParameterInterceptor / bindString bindString fun bindString(index: Int , value: String ?): Unit Overrides SqlPreparedStatement.bindString Bind value to the underlying statement at index .","title":"Bind string"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-statement-parameter-interceptor/bind-string/#bindstring","text":"fun bindString(index: Int , value: String ?): Unit Overrides SqlPreparedStatement.bindString Bind value to the underlying statement at index .","title":"bindString"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-statement-parameter-interceptor/get-and-clear-parameters/","text":"runtime / com.squareup.sqldelight.logs / StatementParameterInterceptor / getAndClearParameters getAndClearParameters fun getAndClearParameters(): List < Any ?>","title":"Get and clear parameters"},{"location":"1.x/runtime/com.squareup.sqldelight.logs/-statement-parameter-interceptor/get-and-clear-parameters/#getandclearparameters","text":"fun getAndClearParameters(): List < Any ?>","title":"getAndClearParameters"},{"location":"1.x/rxjava2-extensions/","text":"rxjava2-extensions Packages Name Summary com.squareup.sqldelight.runtime.rx Index All Types","title":"rxjava2-extensions"},{"location":"1.x/rxjava2-extensions/#packages","text":"Name Summary com.squareup.sqldelight.runtime.rx","title":"Packages"},{"location":"1.x/rxjava2-extensions/#index","text":"All Types","title":"Index"},{"location":"1.x/rxjava2-extensions/alltypes/","text":"All Types Name Summary io.reactivex.Observable (extensions in package com.squareup.sqldelight.runtime.rx) com.squareup.sqldelight.Query (extensions in package com.squareup.sqldelight.runtime.rx)","title":"Home"},{"location":"1.x/rxjava2-extensions/alltypes/#all-types","text":"Name Summary io.reactivex.Observable (extensions in package com.squareup.sqldelight.runtime.rx) com.squareup.sqldelight.Query (extensions in package com.squareup.sqldelight.runtime.rx)","title":"All Types"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/","text":"rxjava2-extensions / com.squareup.sqldelight.runtime.rx Package com.squareup.sqldelight.runtime.rx Extensions for External Classes Name Summary com.squareup.sqldelight.Query io.reactivex.Observable","title":"Home"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/#package-comsquareupsqldelightruntimerx","text":"","title":"Package com.squareup.sqldelight.runtime.rx"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/#extensions-for-external-classes","text":"Name Summary com.squareup.sqldelight.Query io.reactivex.Observable","title":"Extensions for External Classes"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/com.squareup.sqldelight.-query/","text":"rxjava2-extensions / com.squareup.sqldelight.runtime.rx / com.squareup.sqldelight.Query Extensions for com.squareup.sqldelight.Query Name Summary asObservable fun <T : Any > Query< T >.asObservable(scheduler: Scheduler = Schedulers.io()): Observable<Query< T >> Turns this Query into an Observable which emits whenever the underlying result set changes.","title":"Home"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/com.squareup.sqldelight.-query/#extensions-for-comsquareupsqldelightquery","text":"Name Summary asObservable fun <T : Any > Query< T >.asObservable(scheduler: Scheduler = Schedulers.io()): Observable<Query< T >> Turns this Query into an Observable which emits whenever the underlying result set changes.","title":"Extensions for com.squareup.sqldelight.Query"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/com.squareup.sqldelight.-query/as-observable/","text":"rxjava2-extensions / com.squareup.sqldelight.runtime.rx / com.squareup.sqldelight.Query / asObservable asObservable @CheckReturnValue @JvmOverloads @JvmName(\"toObservable\") fun <T : Any > Query< T >.asObservable(scheduler: Scheduler = Schedulers.io()): Observable<Query< T >> Turns this Query into an Observable which emits whenever the underlying result set changes. Parameters scheduler - By default, emissions occur on the Schedulers.io scheduler but can be optionally overridden.","title":"As observable"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/com.squareup.sqldelight.-query/as-observable/#asobservable","text":"@CheckReturnValue @JvmOverloads @JvmName(\"toObservable\") fun <T : Any > Query< T >.asObservable(scheduler: Scheduler = Schedulers.io()): Observable<Query< T >> Turns this Query into an Observable which emits whenever the underlying result set changes.","title":"asObservable"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/com.squareup.sqldelight.-query/as-observable/#parameters","text":"scheduler - By default, emissions occur on the Schedulers.io scheduler but can be optionally overridden.","title":"Parameters"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/io.reactivex.-observable/","text":"rxjava2-extensions / com.squareup.sqldelight.runtime.rx / io.reactivex.Observable Extensions for io.reactivex.Observable Name Summary mapToList fun <T : Any > Observable<Query< T >>.mapToList(): Observable< List < T >> mapToOne fun <T : Any > Observable<Query< T >>.mapToOne(): Observable< T > mapToOneNonNull fun <T : Any > Observable<Query< T >>.mapToOneNonNull(): Observable< T > mapToOneOrDefault fun <T : Any > Observable<Query< T >>.mapToOneOrDefault(defaultValue: T ): Observable< T > mapToOptional fun <T : Any > Observable<Query< T >>.mapToOptional(): Observable< Optional < T >>","title":"Home"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/io.reactivex.-observable/#extensions-for-ioreactivexobservable","text":"Name Summary mapToList fun <T : Any > Observable<Query< T >>.mapToList(): Observable< List < T >> mapToOne fun <T : Any > Observable<Query< T >>.mapToOne(): Observable< T > mapToOneNonNull fun <T : Any > Observable<Query< T >>.mapToOneNonNull(): Observable< T > mapToOneOrDefault fun <T : Any > Observable<Query< T >>.mapToOneOrDefault(defaultValue: T ): Observable< T > mapToOptional fun <T : Any > Observable<Query< T >>.mapToOptional(): Observable< Optional < T >>","title":"Extensions for io.reactivex.Observable"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/io.reactivex.-observable/map-to-list/","text":"rxjava2-extensions / com.squareup.sqldelight.runtime.rx / io.reactivex.Observable / mapToList mapToList @CheckReturnValue fun <T : Any > Observable<Query< T >>.mapToList(): Observable< List < T >>","title":"Map to list"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/io.reactivex.-observable/map-to-list/#maptolist","text":"@CheckReturnValue fun <T : Any > Observable<Query< T >>.mapToList(): Observable< List < T >>","title":"mapToList"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/io.reactivex.-observable/map-to-one-non-null/","text":"rxjava2-extensions / com.squareup.sqldelight.runtime.rx / io.reactivex.Observable / mapToOneNonNull mapToOneNonNull @CheckReturnValue fun <T : Any > Observable<Query< T >>.mapToOneNonNull(): Observable< T >","title":"Map to one non null"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/io.reactivex.-observable/map-to-one-non-null/#maptoonenonnull","text":"@CheckReturnValue fun <T : Any > Observable<Query< T >>.mapToOneNonNull(): Observable< T >","title":"mapToOneNonNull"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/io.reactivex.-observable/map-to-one-or-default/","text":"rxjava2-extensions / com.squareup.sqldelight.runtime.rx / io.reactivex.Observable / mapToOneOrDefault mapToOneOrDefault @CheckReturnValue fun <T : Any > Observable<Query< T >>.mapToOneOrDefault(defaultValue: T ): Observable< T >","title":"Map to one or default"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/io.reactivex.-observable/map-to-one-or-default/#maptooneordefault","text":"@CheckReturnValue fun <T : Any > Observable<Query< T >>.mapToOneOrDefault(defaultValue: T ): Observable< T >","title":"mapToOneOrDefault"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/io.reactivex.-observable/map-to-one/","text":"rxjava2-extensions / com.squareup.sqldelight.runtime.rx / io.reactivex.Observable / mapToOne mapToOne @CheckReturnValue fun <T : Any > Observable<Query< T >>.mapToOne(): Observable< T >","title":"Map to one"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/io.reactivex.-observable/map-to-one/#maptoone","text":"@CheckReturnValue fun <T : Any > Observable<Query< T >>.mapToOne(): Observable< T >","title":"mapToOne"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/io.reactivex.-observable/map-to-optional/","text":"rxjava2-extensions / com.squareup.sqldelight.runtime.rx / io.reactivex.Observable / mapToOptional mapToOptional @CheckReturnValue fun <T : Any > Observable<Query< T >>.mapToOptional(): Observable< Optional < T >>","title":"Map to optional"},{"location":"1.x/rxjava2-extensions/com.squareup.sqldelight.runtime.rx/io.reactivex.-observable/map-to-optional/#maptooptional","text":"@CheckReturnValue fun <T : Any > Observable<Query< T >>.mapToOptional(): Observable< Optional < T >>","title":"mapToOptional"},{"location":"1.x/rxjava3-extensions/","text":"rxjava3-extensions Packages Name Summary com.squareup.sqldelight.runtime.rx3 Index All Types","title":"rxjava3-extensions"},{"location":"1.x/rxjava3-extensions/#packages","text":"Name Summary com.squareup.sqldelight.runtime.rx3","title":"Packages"},{"location":"1.x/rxjava3-extensions/#index","text":"All Types","title":"Index"},{"location":"1.x/rxjava3-extensions/alltypes/","text":"All Types Name Summary io.reactivex.rxjava3.core.Observable (extensions in package com.squareup.sqldelight.runtime.rx3) com.squareup.sqldelight.Query (extensions in package com.squareup.sqldelight.runtime.rx3)","title":"Home"},{"location":"1.x/rxjava3-extensions/alltypes/#all-types","text":"Name Summary io.reactivex.rxjava3.core.Observable (extensions in package com.squareup.sqldelight.runtime.rx3) com.squareup.sqldelight.Query (extensions in package com.squareup.sqldelight.runtime.rx3)","title":"All Types"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/","text":"rxjava3-extensions / com.squareup.sqldelight.runtime.rx3 Package com.squareup.sqldelight.runtime.rx3 Extensions for External Classes Name Summary com.squareup.sqldelight.Query io.reactivex.rxjava3.core.Observable","title":"Home"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/#package-comsquareupsqldelightruntimerx3","text":"","title":"Package com.squareup.sqldelight.runtime.rx3"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/#extensions-for-external-classes","text":"Name Summary com.squareup.sqldelight.Query io.reactivex.rxjava3.core.Observable","title":"Extensions for External Classes"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/com.squareup.sqldelight.-query/","text":"rxjava3-extensions / com.squareup.sqldelight.runtime.rx3 / com.squareup.sqldelight.Query Extensions for com.squareup.sqldelight.Query Name Summary asObservable fun <T : Any > Query< T >.asObservable(scheduler: Scheduler = Schedulers.io()): Observable<Query< T >> Turns this Query into an Observable which emits whenever the underlying result set changes.","title":"Home"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/com.squareup.sqldelight.-query/#extensions-for-comsquareupsqldelightquery","text":"Name Summary asObservable fun <T : Any > Query< T >.asObservable(scheduler: Scheduler = Schedulers.io()): Observable<Query< T >> Turns this Query into an Observable which emits whenever the underlying result set changes.","title":"Extensions for com.squareup.sqldelight.Query"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/com.squareup.sqldelight.-query/as-observable/","text":"rxjava3-extensions / com.squareup.sqldelight.runtime.rx3 / com.squareup.sqldelight.Query / asObservable asObservable @CheckReturnValue @JvmOverloads @JvmName(\"toObservable\") fun <T : Any > Query< T >.asObservable(scheduler: Scheduler = Schedulers.io()): Observable<Query< T >> Turns this Query into an Observable which emits whenever the underlying result set changes. Parameters scheduler - By default, emissions occur on the Schedulers.io scheduler but can be optionally overridden.","title":"As observable"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/com.squareup.sqldelight.-query/as-observable/#asobservable","text":"@CheckReturnValue @JvmOverloads @JvmName(\"toObservable\") fun <T : Any > Query< T >.asObservable(scheduler: Scheduler = Schedulers.io()): Observable<Query< T >> Turns this Query into an Observable which emits whenever the underlying result set changes.","title":"asObservable"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/com.squareup.sqldelight.-query/as-observable/#parameters","text":"scheduler - By default, emissions occur on the Schedulers.io scheduler but can be optionally overridden.","title":"Parameters"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/io.reactivex.rxjava3.core.-observable/","text":"rxjava3-extensions / com.squareup.sqldelight.runtime.rx3 / io.reactivex.rxjava3.core.Observable Extensions for io.reactivex.rxjava3.core.Observable Name Summary mapToList fun <T : Any > Observable<Query< T >>.mapToList(): Observable< List < T >> mapToOne fun <T : Any > Observable<Query< T >>.mapToOne(): Observable< T > mapToOneNonNull fun <T : Any > Observable<Query< T >>.mapToOneNonNull(): Observable< T > mapToOneOrDefault fun <T : Any > Observable<Query< T >>.mapToOneOrDefault(defaultValue: T ): Observable< T > mapToOptional fun <T : Any > Observable<Query< T >>.mapToOptional(): Observable< Optional < T >>","title":"Home"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/io.reactivex.rxjava3.core.-observable/#extensions-for-ioreactivexrxjava3coreobservable","text":"Name Summary mapToList fun <T : Any > Observable<Query< T >>.mapToList(): Observable< List < T >> mapToOne fun <T : Any > Observable<Query< T >>.mapToOne(): Observable< T > mapToOneNonNull fun <T : Any > Observable<Query< T >>.mapToOneNonNull(): Observable< T > mapToOneOrDefault fun <T : Any > Observable<Query< T >>.mapToOneOrDefault(defaultValue: T ): Observable< T > mapToOptional fun <T : Any > Observable<Query< T >>.mapToOptional(): Observable< Optional < T >>","title":"Extensions for io.reactivex.rxjava3.core.Observable"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/io.reactivex.rxjava3.core.-observable/map-to-list/","text":"rxjava3-extensions / com.squareup.sqldelight.runtime.rx3 / io.reactivex.rxjava3.core.Observable / mapToList mapToList @CheckReturnValue fun <T : Any > Observable<Query< T >>.mapToList(): Observable< List < T >>","title":"Map to list"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/io.reactivex.rxjava3.core.-observable/map-to-list/#maptolist","text":"@CheckReturnValue fun <T : Any > Observable<Query< T >>.mapToList(): Observable< List < T >>","title":"mapToList"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/io.reactivex.rxjava3.core.-observable/map-to-one-non-null/","text":"rxjava3-extensions / com.squareup.sqldelight.runtime.rx3 / io.reactivex.rxjava3.core.Observable / mapToOneNonNull mapToOneNonNull @CheckReturnValue fun <T : Any > Observable<Query< T >>.mapToOneNonNull(): Observable< T >","title":"Map to one non null"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/io.reactivex.rxjava3.core.-observable/map-to-one-non-null/#maptoonenonnull","text":"@CheckReturnValue fun <T : Any > Observable<Query< T >>.mapToOneNonNull(): Observable< T >","title":"mapToOneNonNull"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/io.reactivex.rxjava3.core.-observable/map-to-one-or-default/","text":"rxjava3-extensions / com.squareup.sqldelight.runtime.rx3 / io.reactivex.rxjava3.core.Observable / mapToOneOrDefault mapToOneOrDefault @CheckReturnValue fun <T : Any > Observable<Query< T >>.mapToOneOrDefault(defaultValue: T ): Observable< T >","title":"Map to one or default"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/io.reactivex.rxjava3.core.-observable/map-to-one-or-default/#maptooneordefault","text":"@CheckReturnValue fun <T : Any > Observable<Query< T >>.mapToOneOrDefault(defaultValue: T ): Observable< T >","title":"mapToOneOrDefault"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/io.reactivex.rxjava3.core.-observable/map-to-one/","text":"rxjava3-extensions / com.squareup.sqldelight.runtime.rx3 / io.reactivex.rxjava3.core.Observable / mapToOne mapToOne @CheckReturnValue fun <T : Any > Observable<Query< T >>.mapToOne(): Observable< T >","title":"Map to one"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/io.reactivex.rxjava3.core.-observable/map-to-one/#maptoone","text":"@CheckReturnValue fun <T : Any > Observable<Query< T >>.mapToOne(): Observable< T >","title":"mapToOne"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/io.reactivex.rxjava3.core.-observable/map-to-optional/","text":"rxjava3-extensions / com.squareup.sqldelight.runtime.rx3 / io.reactivex.rxjava3.core.Observable / mapToOptional mapToOptional @CheckReturnValue fun <T : Any > Observable<Query< T >>.mapToOptional(): Observable< Optional < T >>","title":"Map to optional"},{"location":"1.x/rxjava3-extensions/com.squareup.sqldelight.runtime.rx3/io.reactivex.rxjava3.core.-observable/map-to-optional/#maptooptional","text":"@CheckReturnValue fun <T : Any > Observable<Query< T >>.mapToOptional(): Observable< Optional < T >>","title":"mapToOptional"},{"location":"1.x/sqldelight-compiler/","text":"sqldelight-compiler Packages Name Summary com.squareup.sqldelight com.squareup.sqldelight.core com.squareup.sqldelight.core.compiler com.squareup.sqldelight.core.compiler.model com.squareup.sqldelight.core.lang com.squareup.sqldelight.core.lang.psi com.squareup.sqldelight.core.lang.util com.squareup.sqldelight.core.psi com.squareup.sqldelight.core.psi.impl Index All Types","title":"sqldelight-compiler"},{"location":"1.x/sqldelight-compiler/#packages","text":"Name Summary com.squareup.sqldelight com.squareup.sqldelight.core com.squareup.sqldelight.core.compiler com.squareup.sqldelight.core.compiler.model com.squareup.sqldelight.core.lang com.squareup.sqldelight.core.lang.psi com.squareup.sqldelight.core.lang.util com.squareup.sqldelight.core.psi com.squareup.sqldelight.core.psi.impl","title":"Packages"},{"location":"1.x/sqldelight-compiler/#index","text":"All Types","title":"Index"},{"location":"1.x/sqldelight-compiler/alltypes/","text":"All Types Name Summary com.squareup.sqldelight.core.compiler.model.BindableQuery com.squareup.sqldelight.core.lang.psi.ClojureStmtListMixin kotlin.collections.Collection (extensions in package com.squareup.sqldelight.core.lang.util) com.squareup.sqldelight.core.lang.DatabaseFileType com.squareup.sqldelight.core.lang.DatabaseFileViewProviderFactory com.squareup.sqldelight.core.compiler.ExecuteQueryGenerator com.squareup.sqldelight.core.lang.psi.ImportStmtMixin com.squareup.sqldelight.core.lang.psi.InsertStmtValuesMixin com.squareup.sqldelight.core.lang.psi.JavaTypeMixin com.squareup.sqldelight.core.lang.MigrationFile com.squareup.sqldelight.core.lang.MigrationFileType com.squareup.sqldelight.core.lang.MigrationLanguage com.squareup.sqldelight.core.lang.MigrationParserDefinition com.squareup.sqldelight.core.compiler.MutatorQueryGenerator com.squareup.sqldelight.core.compiler.model.NamedExecute com.squareup.sqldelight.core.compiler.model.NamedMutator com.squareup.sqldelight.core.compiler.model.NamedQuery com.intellij.psi.PsiElement (extensions in package com.squareup.sqldelight.core.lang.util) com.squareup.sqldelight.core.compiler.QueriesTypeGenerator com.squareup.sqldelight.core.compiler.QueryGenerator com.squareup.sqldelight.core.compiler.QueryInterfaceGenerator com.squareup.sqldelight.core.compiler.SelectQueryGenerator com.squareup.sqldelight.core.psi.SqlDelightAnnotation com.squareup.sqldelight.core.psi.impl.SqlDelightAnnotationImpl com.squareup.sqldelight.core.psi.SqlDelightAnnotationValue com.squareup.sqldelight.core.psi.impl.SqlDelightAnnotationValueImpl com.squareup.sqldelight.core.psi.SqlDelightColumnDef com.squareup.sqldelight.core.psi.impl.SqlDelightColumnDefImpl com.squareup.sqldelight.core.SqlDelightCompilationUnit A compilation unit represents the group of .sq files which will be compiled all at once. A single database can have multiple compilation units, depending on which gradle task is invoked. com.squareup.sqldelight.core.SqlDelightCompilationUnitJsonAdapter com.squareup.sqldelight.core.compiler.SqlDelightCompiler com.squareup.sqldelight.core.SqlDelightDatabaseName com.squareup.sqldelight.core.SqlDelightDatabaseNameJsonAdapter com.squareup.sqldelight.core.SqlDelightDatabaseProperties com.squareup.sqldelight.core.SqlDelightDatabasePropertiesJsonAdapter com.squareup.sqldelight.core.SqlDelightEnvironment Mocks an intellij environment for compiling sqldelight files without an instance of intellij running. com.squareup.sqldelight.core.SqlDelightException com.squareup.sqldelight.core.lang.SqlDelightFile com.squareup.sqldelight.core.SqlDelightFileIndex com.squareup.sqldelight.core.SqlDelightFileIndexImpl com.squareup.sqldelight.core.lang.SqlDelightFileType com.squareup.sqldelight.core.psi.SqlDelightImportStmt com.squareup.sqldelight.core.psi.impl.SqlDelightImportStmtImpl com.squareup.sqldelight.core.psi.SqlDelightImportStmtList com.squareup.sqldelight.core.psi.impl.SqlDelightImportStmtListImpl com.squareup.sqldelight.core.psi.SqlDelightInsertStmtValues com.squareup.sqldelight.core.psi.impl.SqlDelightInsertStmtValuesImpl com.squareup.sqldelight.core.psi.SqlDelightInsertStmtValuesReal com.squareup.sqldelight.core.psi.impl.SqlDelightInsertStmtValuesRealImpl com.squareup.sqldelight.core.psi.SqlDelightJavaType com.squareup.sqldelight.core.psi.impl.SqlDelightJavaTypeImpl com.squareup.sqldelight.core.psi.SqlDelightJavaTypeName com.squareup.sqldelight.core.psi.SqlDelightJavaTypeName2 com.squareup.sqldelight.core.psi.impl.SqlDelightJavaTypeName2Impl com.squareup.sqldelight.core.psi.impl.SqlDelightJavaTypeNameImpl com.squareup.sqldelight.core.lang.SqlDelightLanguage com.squareup.sqldelight.core.psi.SqlDelightOverrides com.squareup.sqldelight.core.psi.impl.SqlDelightOverridesImpl com.squareup.sqldelight.core.psi.SqlDelightParameterizedJavaType com.squareup.sqldelight.core.psi.impl.SqlDelightParameterizedJavaTypeImpl com.squareup.sqldelight.core.SqldelightParser com.squareup.sqldelight.core.lang.SqlDelightParserDefinition com.squareup.sqldelight.core.SqldelightParserUtil com.squareup.sqldelight.core.SqlDelightProjectService com.squareup.sqldelight.core.SqlDelightPropertiesFile com.squareup.sqldelight.core.SqlDelightPropertiesFileJsonAdapter com.squareup.sqldelight.core.lang.SqlDelightQueriesFile com.squareup.sqldelight.core.SqlDelightSourceFolder com.squareup.sqldelight.core.SqlDelightSourceFolderJsonAdapter com.squareup.sqldelight.core.psi.SqlDelightStmtClojure com.squareup.sqldelight.core.psi.impl.SqlDelightStmtClojureImpl com.squareup.sqldelight.core.psi.SqlDelightStmtClojureStmtList com.squareup.sqldelight.core.psi.impl.SqlDelightStmtClojureStmtListImpl com.squareup.sqldelight.core.psi.SqlDelightStmtIdentifier com.squareup.sqldelight.core.psi.SqlDelightStmtIdentifierClojure com.squareup.sqldelight.core.psi.impl.SqlDelightStmtIdentifierClojureImpl com.squareup.sqldelight.core.psi.impl.SqlDelightStmtIdentifierImpl com.squareup.sqldelight.core.psi.SqlDelightStmtList com.squareup.sqldelight.core.psi.impl.SqlDelightStmtListImpl com.squareup.sqldelight.core.psi.SqldelightTypes com.squareup.sqldelight.core.psi.SqlDelightVisitor com.alecstrong.sql.psi.core.psi.SqlInsertStmt (extensions in package com.squareup.sqldelight.core.lang) com.squareup.sqldelight.core.lang.psi.StmtIdentifier com.squareup.sqldelight.core.lang.psi.StmtIdentifierMixin com.intellij.openapi.vfs.VirtualFile (extensions in package com.squareup.sqldelight.core.lang)","title":"Home"},{"location":"1.x/sqldelight-compiler/alltypes/#all-types","text":"Name Summary com.squareup.sqldelight.core.compiler.model.BindableQuery com.squareup.sqldelight.core.lang.psi.ClojureStmtListMixin kotlin.collections.Collection (extensions in package com.squareup.sqldelight.core.lang.util) com.squareup.sqldelight.core.lang.DatabaseFileType com.squareup.sqldelight.core.lang.DatabaseFileViewProviderFactory com.squareup.sqldelight.core.compiler.ExecuteQueryGenerator com.squareup.sqldelight.core.lang.psi.ImportStmtMixin com.squareup.sqldelight.core.lang.psi.InsertStmtValuesMixin com.squareup.sqldelight.core.lang.psi.JavaTypeMixin com.squareup.sqldelight.core.lang.MigrationFile com.squareup.sqldelight.core.lang.MigrationFileType com.squareup.sqldelight.core.lang.MigrationLanguage com.squareup.sqldelight.core.lang.MigrationParserDefinition com.squareup.sqldelight.core.compiler.MutatorQueryGenerator com.squareup.sqldelight.core.compiler.model.NamedExecute com.squareup.sqldelight.core.compiler.model.NamedMutator com.squareup.sqldelight.core.compiler.model.NamedQuery com.intellij.psi.PsiElement (extensions in package com.squareup.sqldelight.core.lang.util) com.squareup.sqldelight.core.compiler.QueriesTypeGenerator com.squareup.sqldelight.core.compiler.QueryGenerator com.squareup.sqldelight.core.compiler.QueryInterfaceGenerator com.squareup.sqldelight.core.compiler.SelectQueryGenerator com.squareup.sqldelight.core.psi.SqlDelightAnnotation com.squareup.sqldelight.core.psi.impl.SqlDelightAnnotationImpl com.squareup.sqldelight.core.psi.SqlDelightAnnotationValue com.squareup.sqldelight.core.psi.impl.SqlDelightAnnotationValueImpl com.squareup.sqldelight.core.psi.SqlDelightColumnDef com.squareup.sqldelight.core.psi.impl.SqlDelightColumnDefImpl com.squareup.sqldelight.core.SqlDelightCompilationUnit A compilation unit represents the group of .sq files which will be compiled all at once. A single database can have multiple compilation units, depending on which gradle task is invoked. com.squareup.sqldelight.core.SqlDelightCompilationUnitJsonAdapter com.squareup.sqldelight.core.compiler.SqlDelightCompiler com.squareup.sqldelight.core.SqlDelightDatabaseName com.squareup.sqldelight.core.SqlDelightDatabaseNameJsonAdapter com.squareup.sqldelight.core.SqlDelightDatabaseProperties com.squareup.sqldelight.core.SqlDelightDatabasePropertiesJsonAdapter com.squareup.sqldelight.core.SqlDelightEnvironment Mocks an intellij environment for compiling sqldelight files without an instance of intellij running. com.squareup.sqldelight.core.SqlDelightException com.squareup.sqldelight.core.lang.SqlDelightFile com.squareup.sqldelight.core.SqlDelightFileIndex com.squareup.sqldelight.core.SqlDelightFileIndexImpl com.squareup.sqldelight.core.lang.SqlDelightFileType com.squareup.sqldelight.core.psi.SqlDelightImportStmt com.squareup.sqldelight.core.psi.impl.SqlDelightImportStmtImpl com.squareup.sqldelight.core.psi.SqlDelightImportStmtList com.squareup.sqldelight.core.psi.impl.SqlDelightImportStmtListImpl com.squareup.sqldelight.core.psi.SqlDelightInsertStmtValues com.squareup.sqldelight.core.psi.impl.SqlDelightInsertStmtValuesImpl com.squareup.sqldelight.core.psi.SqlDelightInsertStmtValuesReal com.squareup.sqldelight.core.psi.impl.SqlDelightInsertStmtValuesRealImpl com.squareup.sqldelight.core.psi.SqlDelightJavaType com.squareup.sqldelight.core.psi.impl.SqlDelightJavaTypeImpl com.squareup.sqldelight.core.psi.SqlDelightJavaTypeName com.squareup.sqldelight.core.psi.SqlDelightJavaTypeName2 com.squareup.sqldelight.core.psi.impl.SqlDelightJavaTypeName2Impl com.squareup.sqldelight.core.psi.impl.SqlDelightJavaTypeNameImpl com.squareup.sqldelight.core.lang.SqlDelightLanguage com.squareup.sqldelight.core.psi.SqlDelightOverrides com.squareup.sqldelight.core.psi.impl.SqlDelightOverridesImpl com.squareup.sqldelight.core.psi.SqlDelightParameterizedJavaType com.squareup.sqldelight.core.psi.impl.SqlDelightParameterizedJavaTypeImpl com.squareup.sqldelight.core.SqldelightParser com.squareup.sqldelight.core.lang.SqlDelightParserDefinition com.squareup.sqldelight.core.SqldelightParserUtil com.squareup.sqldelight.core.SqlDelightProjectService com.squareup.sqldelight.core.SqlDelightPropertiesFile com.squareup.sqldelight.core.SqlDelightPropertiesFileJsonAdapter com.squareup.sqldelight.core.lang.SqlDelightQueriesFile com.squareup.sqldelight.core.SqlDelightSourceFolder com.squareup.sqldelight.core.SqlDelightSourceFolderJsonAdapter com.squareup.sqldelight.core.psi.SqlDelightStmtClojure com.squareup.sqldelight.core.psi.impl.SqlDelightStmtClojureImpl com.squareup.sqldelight.core.psi.SqlDelightStmtClojureStmtList com.squareup.sqldelight.core.psi.impl.SqlDelightStmtClojureStmtListImpl com.squareup.sqldelight.core.psi.SqlDelightStmtIdentifier com.squareup.sqldelight.core.psi.SqlDelightStmtIdentifierClojure com.squareup.sqldelight.core.psi.impl.SqlDelightStmtIdentifierClojureImpl com.squareup.sqldelight.core.psi.impl.SqlDelightStmtIdentifierImpl com.squareup.sqldelight.core.psi.SqlDelightStmtList com.squareup.sqldelight.core.psi.impl.SqlDelightStmtListImpl com.squareup.sqldelight.core.psi.SqldelightTypes com.squareup.sqldelight.core.psi.SqlDelightVisitor com.alecstrong.sql.psi.core.psi.SqlInsertStmt (extensions in package com.squareup.sqldelight.core.lang) com.squareup.sqldelight.core.lang.psi.StmtIdentifier com.squareup.sqldelight.core.lang.psi.StmtIdentifierMixin com.intellij.openapi.vfs.VirtualFile (extensions in package com.squareup.sqldelight.core.lang)","title":"All Types"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight/","text":"sqldelight-compiler / com.squareup.sqldelight Package com.squareup.sqldelight Properties Name Summary VERSION val VERSION: String","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight/#package-comsquareupsqldelight","text":"","title":"Package com.squareup.sqldelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight/#properties","text":"Name Summary VERSION val VERSION: String","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight/-v-e-r-s-i-o-n/","text":"sqldelight-compiler / com.squareup.sqldelight / VERSION VERSION val VERSION: String","title":" v e r s i o n"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight/-v-e-r-s-i-o-n/#version","text":"val VERSION: String","title":"VERSION"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/","text":"sqldelight-compiler / com.squareup.sqldelight.core Package com.squareup.sqldelight.core Types Name Summary SqlDelightCompilationUnit data class SqlDelightCompilationUnit : Serializable A compilation unit represents the group of .sq files which will be compiled all at once. A single database can have multiple compilation units, depending on which gradle task is invoked. SqlDelightCompilationUnitJsonAdapter class SqlDelightCompilationUnitJsonAdapter : JsonAdapter< SqlDelightCompilationUnit > SqlDelightDatabaseName data class SqlDelightDatabaseName : Serializable SqlDelightDatabaseNameJsonAdapter class SqlDelightDatabaseNameJsonAdapter : JsonAdapter< SqlDelightDatabaseName > SqlDelightDatabaseProperties data class SqlDelightDatabaseProperties : Serializable SqlDelightDatabasePropertiesJsonAdapter class SqlDelightDatabasePropertiesJsonAdapter : JsonAdapter< SqlDelightDatabaseProperties > SqlDelightEnvironment class SqlDelightEnvironment : SqlCoreEnvironment, SqlDelightProjectService Mocks an intellij environment for compiling sqldelight files without an instance of intellij running. SqlDelightFileIndex interface SqlDelightFileIndex SqlDelightFileIndexImpl class SqlDelightFileIndexImpl : SqlDelightFileIndex SqldelightParser open class SqldelightParser : PsiParser, LightPsiParser SqldelightParserUtil object SqldelightParserUtil : GeneratedParserUtilBase SqlDelightProjectService interface SqlDelightProjectService SqlDelightPropertiesFile class SqlDelightPropertiesFile SqlDelightPropertiesFileJsonAdapter class SqlDelightPropertiesFileJsonAdapter : JsonAdapter< SqlDelightPropertiesFile > SqlDelightSourceFolder data class SqlDelightSourceFolder : Serializable SqlDelightSourceFolderJsonAdapter class SqlDelightSourceFolderJsonAdapter : JsonAdapter< SqlDelightSourceFolder > Exceptions Name Summary SqlDelightException class SqlDelightException : IllegalStateException","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/#package-comsquareupsqldelightcore","text":"","title":"Package com.squareup.sqldelight.core"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/#types","text":"Name Summary SqlDelightCompilationUnit data class SqlDelightCompilationUnit : Serializable A compilation unit represents the group of .sq files which will be compiled all at once. A single database can have multiple compilation units, depending on which gradle task is invoked. SqlDelightCompilationUnitJsonAdapter class SqlDelightCompilationUnitJsonAdapter : JsonAdapter< SqlDelightCompilationUnit > SqlDelightDatabaseName data class SqlDelightDatabaseName : Serializable SqlDelightDatabaseNameJsonAdapter class SqlDelightDatabaseNameJsonAdapter : JsonAdapter< SqlDelightDatabaseName > SqlDelightDatabaseProperties data class SqlDelightDatabaseProperties : Serializable SqlDelightDatabasePropertiesJsonAdapter class SqlDelightDatabasePropertiesJsonAdapter : JsonAdapter< SqlDelightDatabaseProperties > SqlDelightEnvironment class SqlDelightEnvironment : SqlCoreEnvironment, SqlDelightProjectService Mocks an intellij environment for compiling sqldelight files without an instance of intellij running. SqlDelightFileIndex interface SqlDelightFileIndex SqlDelightFileIndexImpl class SqlDelightFileIndexImpl : SqlDelightFileIndex SqldelightParser open class SqldelightParser : PsiParser, LightPsiParser SqldelightParserUtil object SqldelightParserUtil : GeneratedParserUtilBase SqlDelightProjectService interface SqlDelightProjectService SqlDelightPropertiesFile class SqlDelightPropertiesFile SqlDelightPropertiesFileJsonAdapter class SqlDelightPropertiesFileJsonAdapter : JsonAdapter< SqlDelightPropertiesFile > SqlDelightSourceFolder data class SqlDelightSourceFolder : Serializable SqlDelightSourceFolderJsonAdapter class SqlDelightSourceFolderJsonAdapter : JsonAdapter< SqlDelightSourceFolder >","title":"Types"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/#exceptions","text":"Name Summary SqlDelightException class SqlDelightException : IllegalStateException","title":"Exceptions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-compilation-unit/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightCompilationUnit SqlDelightCompilationUnit @JsonClass(true) data class SqlDelightCompilationUnit : Serializable A compilation unit represents the group of .sq files which will be compiled all at once. A single database can have multiple compilation units, depending on which gradle task is invoked. For example, a multiplatform module has separate compilation units for ios and android. An android module has separate compilation units for different variants. Only one compilation unit will be worked on during compilation time. Constructors Name Summary <init> SqlDelightCompilationUnit(name: String , sourceFolders: List < SqlDelightSourceFolder >) A compilation unit represents the group of .sq files which will be compiled all at once. A single database can have multiple compilation units, depending on which gradle task is invoked. Properties Name Summary name val name: String sourceFolders val sourceFolders: List < SqlDelightSourceFolder >","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-compilation-unit/#sqldelightcompilationunit","text":"@JsonClass(true) data class SqlDelightCompilationUnit : Serializable A compilation unit represents the group of .sq files which will be compiled all at once. A single database can have multiple compilation units, depending on which gradle task is invoked. For example, a multiplatform module has separate compilation units for ios and android. An android module has separate compilation units for different variants. Only one compilation unit will be worked on during compilation time.","title":"SqlDelightCompilationUnit"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-compilation-unit/#constructors","text":"Name Summary <init> SqlDelightCompilationUnit(name: String , sourceFolders: List < SqlDelightSourceFolder >) A compilation unit represents the group of .sq files which will be compiled all at once. A single database can have multiple compilation units, depending on which gradle task is invoked.","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-compilation-unit/#properties","text":"Name Summary name val name: String sourceFolders val sourceFolders: List < SqlDelightSourceFolder >","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-compilation-unit/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightCompilationUnit / <init> <init> SqlDelightCompilationUnit(name: String , sourceFolders: List < SqlDelightSourceFolder >) A compilation unit represents the group of .sq files which will be compiled all at once. A single database can have multiple compilation units, depending on which gradle task is invoked. For example, a multiplatform module has separate compilation units for ios and android. An android module has separate compilation units for different variants. Only one compilation unit will be worked on during compilation time.","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-compilation-unit/-init-/#init","text":"SqlDelightCompilationUnit(name: String , sourceFolders: List < SqlDelightSourceFolder >) A compilation unit represents the group of .sq files which will be compiled all at once. A single database can have multiple compilation units, depending on which gradle task is invoked. For example, a multiplatform module has separate compilation units for ios and android. An android module has separate compilation units for different variants. Only one compilation unit will be worked on during compilation time.","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-compilation-unit/name/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightCompilationUnit / name name val name: String","title":"Name"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-compilation-unit/name/#name","text":"val name: String","title":"name"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-compilation-unit/source-folders/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightCompilationUnit / sourceFolders sourceFolders val sourceFolders: List < SqlDelightSourceFolder >","title":"Source folders"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-compilation-unit/source-folders/#sourcefolders","text":"val sourceFolders: List < SqlDelightSourceFolder >","title":"sourceFolders"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-compilation-unit-json-adapter/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightCompilationUnitJsonAdapter SqlDelightCompilationUnitJsonAdapter class SqlDelightCompilationUnitJsonAdapter : JsonAdapter< SqlDelightCompilationUnit > Constructors Name Summary <init> SqlDelightCompilationUnitJsonAdapter(moshi: Moshi) Functions Name Summary fromJson fun fromJson(reader: JsonReader): SqlDelightCompilationUnit toJson fun toJson(writer: JsonWriter, value: SqlDelightCompilationUnit ?): Unit toString fun toString(): String","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-compilation-unit-json-adapter/#sqldelightcompilationunitjsonadapter","text":"class SqlDelightCompilationUnitJsonAdapter : JsonAdapter< SqlDelightCompilationUnit >","title":"SqlDelightCompilationUnitJsonAdapter"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-compilation-unit-json-adapter/#constructors","text":"Name Summary <init> SqlDelightCompilationUnitJsonAdapter(moshi: Moshi)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-compilation-unit-json-adapter/#functions","text":"Name Summary fromJson fun fromJson(reader: JsonReader): SqlDelightCompilationUnit toJson fun toJson(writer: JsonWriter, value: SqlDelightCompilationUnit ?): Unit toString fun toString(): String","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-compilation-unit-json-adapter/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightCompilationUnitJsonAdapter / <init> <init> SqlDelightCompilationUnitJsonAdapter(moshi: Moshi)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-compilation-unit-json-adapter/-init-/#init","text":"SqlDelightCompilationUnitJsonAdapter(moshi: Moshi)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-compilation-unit-json-adapter/from-json/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightCompilationUnitJsonAdapter / fromJson fromJson fun fromJson(reader: JsonReader): SqlDelightCompilationUnit","title":"From json"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-compilation-unit-json-adapter/from-json/#fromjson","text":"fun fromJson(reader: JsonReader): SqlDelightCompilationUnit","title":"fromJson"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-compilation-unit-json-adapter/to-json/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightCompilationUnitJsonAdapter / toJson toJson fun toJson(writer: JsonWriter, value: SqlDelightCompilationUnit ?): Unit","title":"To json"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-compilation-unit-json-adapter/to-json/#tojson","text":"fun toJson(writer: JsonWriter, value: SqlDelightCompilationUnit ?): Unit","title":"toJson"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-compilation-unit-json-adapter/to-string/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightCompilationUnitJsonAdapter / toString toString fun toString(): String","title":"To string"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-compilation-unit-json-adapter/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-name/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabaseName SqlDelightDatabaseName @JsonClass(true) data class SqlDelightDatabaseName : Serializable Constructors Name Summary <init> SqlDelightDatabaseName(packageName: String , className: String ) Properties Name Summary className val className: String packageName val packageName: String","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-name/#sqldelightdatabasename","text":"@JsonClass(true) data class SqlDelightDatabaseName : Serializable","title":"SqlDelightDatabaseName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-name/#constructors","text":"Name Summary <init> SqlDelightDatabaseName(packageName: String , className: String )","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-name/#properties","text":"Name Summary className val className: String packageName val packageName: String","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-name/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabaseName / <init> <init> SqlDelightDatabaseName(packageName: String , className: String )","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-name/-init-/#init","text":"SqlDelightDatabaseName(packageName: String , className: String )","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-name/class-name/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabaseName / className className val className: String","title":"Class name"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-name/class-name/#classname","text":"val className: String","title":"className"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-name/package-name/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabaseName / packageName packageName val packageName: String","title":"Package name"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-name/package-name/#packagename","text":"val packageName: String","title":"packageName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-name-json-adapter/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabaseNameJsonAdapter SqlDelightDatabaseNameJsonAdapter class SqlDelightDatabaseNameJsonAdapter : JsonAdapter< SqlDelightDatabaseName > Constructors Name Summary <init> SqlDelightDatabaseNameJsonAdapter(moshi: Moshi) Functions Name Summary fromJson fun fromJson(reader: JsonReader): SqlDelightDatabaseName toJson fun toJson(writer: JsonWriter, value: SqlDelightDatabaseName ?): Unit toString fun toString(): String","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-name-json-adapter/#sqldelightdatabasenamejsonadapter","text":"class SqlDelightDatabaseNameJsonAdapter : JsonAdapter< SqlDelightDatabaseName >","title":"SqlDelightDatabaseNameJsonAdapter"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-name-json-adapter/#constructors","text":"Name Summary <init> SqlDelightDatabaseNameJsonAdapter(moshi: Moshi)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-name-json-adapter/#functions","text":"Name Summary fromJson fun fromJson(reader: JsonReader): SqlDelightDatabaseName toJson fun toJson(writer: JsonWriter, value: SqlDelightDatabaseName ?): Unit toString fun toString(): String","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-name-json-adapter/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabaseNameJsonAdapter / <init> <init> SqlDelightDatabaseNameJsonAdapter(moshi: Moshi)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-name-json-adapter/-init-/#init","text":"SqlDelightDatabaseNameJsonAdapter(moshi: Moshi)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-name-json-adapter/from-json/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabaseNameJsonAdapter / fromJson fromJson fun fromJson(reader: JsonReader): SqlDelightDatabaseName","title":"From json"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-name-json-adapter/from-json/#fromjson","text":"fun fromJson(reader: JsonReader): SqlDelightDatabaseName","title":"fromJson"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-name-json-adapter/to-json/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabaseNameJsonAdapter / toJson toJson fun toJson(writer: JsonWriter, value: SqlDelightDatabaseName ?): Unit","title":"To json"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-name-json-adapter/to-json/#tojson","text":"fun toJson(writer: JsonWriter, value: SqlDelightDatabaseName ?): Unit","title":"toJson"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-name-json-adapter/to-string/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabaseNameJsonAdapter / toString toString fun toString(): String","title":"To string"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-name-json-adapter/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabaseProperties SqlDelightDatabaseProperties @JsonClass(true) data class SqlDelightDatabaseProperties : Serializable Constructors Name Summary <init> SqlDelightDatabaseProperties(packageName: String , compilationUnits: List < SqlDelightCompilationUnit >, outputDirectory: String , className: String , dependencies: List < SqlDelightDatabaseName >, dialectPreset: DialectPreset = DialectPreset.SQLITE_3_18, deriveSchemaFromMigrations: Boolean = false) Properties Name Summary className val className: String compilationUnits val compilationUnits: List < SqlDelightCompilationUnit > dependencies val dependencies: List < SqlDelightDatabaseName > deriveSchemaFromMigrations val deriveSchemaFromMigrations: Boolean dialectPreset val dialectPreset: DialectPreset outputDirectory val outputDirectory: String Note: this path uses platform-specific path separators, be careful where/how you use it packageName val packageName: String Functions Name Summary toJson fun toJson(): String Companion Object Functions Name Summary fromText fun fromText(text: String ): SqlDelightDatabaseProperties ?","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/#sqldelightdatabaseproperties","text":"@JsonClass(true) data class SqlDelightDatabaseProperties : Serializable","title":"SqlDelightDatabaseProperties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/#constructors","text":"Name Summary <init> SqlDelightDatabaseProperties(packageName: String , compilationUnits: List < SqlDelightCompilationUnit >, outputDirectory: String , className: String , dependencies: List < SqlDelightDatabaseName >, dialectPreset: DialectPreset = DialectPreset.SQLITE_3_18, deriveSchemaFromMigrations: Boolean = false)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/#properties","text":"Name Summary className val className: String compilationUnits val compilationUnits: List < SqlDelightCompilationUnit > dependencies val dependencies: List < SqlDelightDatabaseName > deriveSchemaFromMigrations val deriveSchemaFromMigrations: Boolean dialectPreset val dialectPreset: DialectPreset outputDirectory val outputDirectory: String Note: this path uses platform-specific path separators, be careful where/how you use it packageName val packageName: String","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/#functions","text":"Name Summary toJson fun toJson(): String","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/#companion-object-functions","text":"Name Summary fromText fun fromText(text: String ): SqlDelightDatabaseProperties ?","title":"Companion Object Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabaseProperties / <init> <init> SqlDelightDatabaseProperties(packageName: String , compilationUnits: List < SqlDelightCompilationUnit >, outputDirectory: String , className: String , dependencies: List < SqlDelightDatabaseName >, dialectPreset: DialectPreset = DialectPreset.SQLITE_3_18, deriveSchemaFromMigrations: Boolean = false)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/-init-/#init","text":"SqlDelightDatabaseProperties(packageName: String , compilationUnits: List < SqlDelightCompilationUnit >, outputDirectory: String , className: String , dependencies: List < SqlDelightDatabaseName >, dialectPreset: DialectPreset = DialectPreset.SQLITE_3_18, deriveSchemaFromMigrations: Boolean = false)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/class-name/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabaseProperties / className className val className: String","title":"Class name"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/class-name/#classname","text":"val className: String","title":"className"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/compilation-units/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabaseProperties / compilationUnits compilationUnits val compilationUnits: List < SqlDelightCompilationUnit >","title":"Compilation units"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/compilation-units/#compilationunits","text":"val compilationUnits: List < SqlDelightCompilationUnit >","title":"compilationUnits"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/dependencies/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabaseProperties / dependencies dependencies val dependencies: List < SqlDelightDatabaseName >","title":"Dependencies"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/dependencies/#dependencies","text":"val dependencies: List < SqlDelightDatabaseName >","title":"dependencies"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/derive-schema-from-migrations/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabaseProperties / deriveSchemaFromMigrations deriveSchemaFromMigrations val deriveSchemaFromMigrations: Boolean","title":"Derive schema from migrations"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/derive-schema-from-migrations/#deriveschemafrommigrations","text":"val deriveSchemaFromMigrations: Boolean","title":"deriveSchemaFromMigrations"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/dialect-preset/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabaseProperties / dialectPreset dialectPreset val dialectPreset: DialectPreset","title":"Dialect preset"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/dialect-preset/#dialectpreset","text":"val dialectPreset: DialectPreset","title":"dialectPreset"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/from-text/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabaseProperties / fromText fromText fun fromText(text: String ): SqlDelightDatabaseProperties ?","title":"From text"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/from-text/#fromtext","text":"fun fromText(text: String ): SqlDelightDatabaseProperties ?","title":"fromText"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/output-directory/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabaseProperties / outputDirectory outputDirectory val outputDirectory: String Note: this path uses platform-specific path separators, be careful where/how you use it","title":"Output directory"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/output-directory/#outputdirectory","text":"val outputDirectory: String Note: this path uses platform-specific path separators, be careful where/how you use it","title":"outputDirectory"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/package-name/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabaseProperties / packageName packageName val packageName: String","title":"Package name"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/package-name/#packagename","text":"val packageName: String","title":"packageName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/to-json/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabaseProperties / toJson toJson fun toJson(): String","title":"To json"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties/to-json/#tojson","text":"fun toJson(): String","title":"toJson"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties-json-adapter/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabasePropertiesJsonAdapter SqlDelightDatabasePropertiesJsonAdapter class SqlDelightDatabasePropertiesJsonAdapter : JsonAdapter< SqlDelightDatabaseProperties > Constructors Name Summary <init> SqlDelightDatabasePropertiesJsonAdapter(moshi: Moshi) Functions Name Summary fromJson fun fromJson(reader: JsonReader): SqlDelightDatabaseProperties toJson fun toJson(writer: JsonWriter, value: SqlDelightDatabaseProperties ?): Unit toString fun toString(): String","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties-json-adapter/#sqldelightdatabasepropertiesjsonadapter","text":"class SqlDelightDatabasePropertiesJsonAdapter : JsonAdapter< SqlDelightDatabaseProperties >","title":"SqlDelightDatabasePropertiesJsonAdapter"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties-json-adapter/#constructors","text":"Name Summary <init> SqlDelightDatabasePropertiesJsonAdapter(moshi: Moshi)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties-json-adapter/#functions","text":"Name Summary fromJson fun fromJson(reader: JsonReader): SqlDelightDatabaseProperties toJson fun toJson(writer: JsonWriter, value: SqlDelightDatabaseProperties ?): Unit toString fun toString(): String","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties-json-adapter/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabasePropertiesJsonAdapter / <init> <init> SqlDelightDatabasePropertiesJsonAdapter(moshi: Moshi)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties-json-adapter/-init-/#init","text":"SqlDelightDatabasePropertiesJsonAdapter(moshi: Moshi)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties-json-adapter/from-json/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabasePropertiesJsonAdapter / fromJson fromJson fun fromJson(reader: JsonReader): SqlDelightDatabaseProperties","title":"From json"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties-json-adapter/from-json/#fromjson","text":"fun fromJson(reader: JsonReader): SqlDelightDatabaseProperties","title":"fromJson"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties-json-adapter/to-json/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabasePropertiesJsonAdapter / toJson toJson fun toJson(writer: JsonWriter, value: SqlDelightDatabaseProperties ?): Unit","title":"To json"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties-json-adapter/to-json/#tojson","text":"fun toJson(writer: JsonWriter, value: SqlDelightDatabaseProperties ?): Unit","title":"toJson"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties-json-adapter/to-string/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightDatabasePropertiesJsonAdapter / toString toString fun toString(): String","title":"To string"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-database-properties-json-adapter/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightEnvironment SqlDelightEnvironment class SqlDelightEnvironment : SqlCoreEnvironment, SqlDelightProjectService Mocks an intellij environment for compiling sqldelight files without an instance of intellij running. Types Name Summary CompilationStatus sealed class CompilationStatus Constructors Name Summary <init> SqlDelightEnvironment(sourceFolders: List < File >, dependencyFolders: List < File >, properties: SqlDelightDatabaseProperties , outputDirectory: File ? = null, moduleName: String ) Mocks an intellij environment for compiling sqldelight files without an instance of intellij running. Properties Name Summary dialectPreset var dialectPreset: DialectPreset module val module: MockModule project val project: Project Functions Name Summary forMigrationFiles fun forMigrationFiles(body: ( MigrationFile ) -> Unit ): Unit forSourceFiles fun forSourceFiles(action: (SqlFileBase) -> Unit ): Unit generateSqlDelightFiles fun generateSqlDelightFiles(logger: ( String ) -> Unit ): SqlDelightEnvironment.CompilationStatus Run the SQLDelight compiler and return the error or success status. module fun module(vFile: VirtualFile): MockModule","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/#sqldelightenvironment","text":"class SqlDelightEnvironment : SqlCoreEnvironment, SqlDelightProjectService Mocks an intellij environment for compiling sqldelight files without an instance of intellij running.","title":"SqlDelightEnvironment"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/#types","text":"Name Summary CompilationStatus sealed class CompilationStatus","title":"Types"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/#constructors","text":"Name Summary <init> SqlDelightEnvironment(sourceFolders: List < File >, dependencyFolders: List < File >, properties: SqlDelightDatabaseProperties , outputDirectory: File ? = null, moduleName: String ) Mocks an intellij environment for compiling sqldelight files without an instance of intellij running.","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/#properties","text":"Name Summary dialectPreset var dialectPreset: DialectPreset module val module: MockModule project val project: Project","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/#functions","text":"Name Summary forMigrationFiles fun forMigrationFiles(body: ( MigrationFile ) -> Unit ): Unit forSourceFiles fun forSourceFiles(action: (SqlFileBase) -> Unit ): Unit generateSqlDelightFiles fun generateSqlDelightFiles(logger: ( String ) -> Unit ): SqlDelightEnvironment.CompilationStatus Run the SQLDelight compiler and return the error or success status. module fun module(vFile: VirtualFile): MockModule","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightEnvironment / <init> <init> SqlDelightEnvironment(sourceFolders: List < File >, dependencyFolders: List < File >, properties: SqlDelightDatabaseProperties , outputDirectory: File ? = null, moduleName: String ) Mocks an intellij environment for compiling sqldelight files without an instance of intellij running.","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-init-/#init","text":"SqlDelightEnvironment(sourceFolders: List < File >, dependencyFolders: List < File >, properties: SqlDelightDatabaseProperties , outputDirectory: File ? = null, moduleName: String ) Mocks an intellij environment for compiling sqldelight files without an instance of intellij running.","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/dialect-preset/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightEnvironment / dialectPreset dialectPreset var dialectPreset: DialectPreset Overrides SqlDelightProjectService.dialectPreset","title":"Dialect preset"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/dialect-preset/#dialectpreset","text":"var dialectPreset: DialectPreset Overrides SqlDelightProjectService.dialectPreset","title":"dialectPreset"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/for-migration-files/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightEnvironment / forMigrationFiles forMigrationFiles fun forMigrationFiles(body: ( MigrationFile ) -> Unit ): Unit","title":"For migration files"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/for-migration-files/#formigrationfiles","text":"fun forMigrationFiles(body: ( MigrationFile ) -> Unit ): Unit","title":"forMigrationFiles"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/for-source-files/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightEnvironment / forSourceFiles forSourceFiles fun forSourceFiles(action: (SqlFileBase) -> Unit ): Unit","title":"For source files"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/for-source-files/#forsourcefiles","text":"fun forSourceFiles(action: (SqlFileBase) -> Unit ): Unit","title":"forSourceFiles"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/generate-sql-delight-files/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightEnvironment / generateSqlDelightFiles generateSqlDelightFiles fun generateSqlDelightFiles(logger: ( String ) -> Unit ): SqlDelightEnvironment.CompilationStatus Run the SQLDelight compiler and return the error or success status.","title":"Generate sql delight files"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/generate-sql-delight-files/#generatesqldelightfiles","text":"fun generateSqlDelightFiles(logger: ( String ) -> Unit ): SqlDelightEnvironment.CompilationStatus Run the SQLDelight compiler and return the error or success status.","title":"generateSqlDelightFiles"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/module/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightEnvironment / module module val module: MockModule fun module(vFile: VirtualFile): MockModule Overrides SqlDelightProjectService.module","title":"Module"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/module/#module","text":"val module: MockModule fun module(vFile: VirtualFile): MockModule Overrides SqlDelightProjectService.module","title":"module"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/project/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightEnvironment / project project val project: Project","title":"Project"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/project/#project","text":"val project: Project","title":"project"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-compilation-status/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightEnvironment / CompilationStatus CompilationStatus sealed class CompilationStatus Types Name Summary Failure class Failure : SqlDelightEnvironment.CompilationStatus Success class Success : SqlDelightEnvironment.CompilationStatus Inheritors Name Summary Failure class Failure : SqlDelightEnvironment.CompilationStatus Success class Success : SqlDelightEnvironment.CompilationStatus","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-compilation-status/#compilationstatus","text":"sealed class CompilationStatus","title":"CompilationStatus"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-compilation-status/#types","text":"Name Summary Failure class Failure : SqlDelightEnvironment.CompilationStatus Success class Success : SqlDelightEnvironment.CompilationStatus","title":"Types"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-compilation-status/#inheritors","text":"Name Summary Failure class Failure : SqlDelightEnvironment.CompilationStatus Success class Success : SqlDelightEnvironment.CompilationStatus","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-compilation-status/-failure/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightEnvironment / CompilationStatus / Failure Failure class Failure : SqlDelightEnvironment.CompilationStatus Constructors Name Summary <init> Failure(errors: List < String >) Properties Name Summary errors val errors: List < String >","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-compilation-status/-failure/#failure","text":"class Failure : SqlDelightEnvironment.CompilationStatus","title":"Failure"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-compilation-status/-failure/#constructors","text":"Name Summary <init> Failure(errors: List < String >)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-compilation-status/-failure/#properties","text":"Name Summary errors val errors: List < String >","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-compilation-status/-failure/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightEnvironment / CompilationStatus / Failure / <init> <init> Failure(errors: List < String >)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-compilation-status/-failure/-init-/#init","text":"Failure(errors: List < String >)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-compilation-status/-failure/errors/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightEnvironment / CompilationStatus / Failure / errors errors val errors: List < String >","title":"Errors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-compilation-status/-failure/errors/#errors","text":"val errors: List < String >","title":"errors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-compilation-status/-success/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightEnvironment / CompilationStatus / Success Success class Success : SqlDelightEnvironment.CompilationStatus Constructors Name Summary <init> Success()","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-compilation-status/-success/#success","text":"class Success : SqlDelightEnvironment.CompilationStatus","title":"Success"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-compilation-status/-success/#constructors","text":"Name Summary <init> Success()","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-compilation-status/-success/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightEnvironment / CompilationStatus / Success / <init> <init> Success()","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-environment/-compilation-status/-success/-init-/#init","text":"Success()","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-exception/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightException SqlDelightException class SqlDelightException : IllegalStateException Constructors Name Summary <init> SqlDelightException(message: String )","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-exception/#sqldelightexception","text":"class SqlDelightException : IllegalStateException","title":"SqlDelightException"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-exception/#constructors","text":"Name Summary <init> SqlDelightException(message: String )","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-exception/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightException / <init> <init> SqlDelightException(message: String )","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-exception/-init-/#init","text":"SqlDelightException(message: String )","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndex SqlDelightFileIndex interface SqlDelightFileIndex Properties Name Summary className abstract val className: String contentRoot abstract val contentRoot: VirtualFile dependencies abstract val dependencies: List < SqlDelightDatabaseName > deriveSchemaFromMigrations abstract val deriveSchemaFromMigrations: Boolean isConfigured abstract val isConfigured: Boolean outputDirectory abstract val outputDirectory: String packageName abstract val packageName: String Functions Name Summary packageName abstract fun packageName(file: SqlDelightFile ): String sourceFolders abstract fun sourceFolders(file: VirtualFile, includeDependencies: Boolean = true): Collection <VirtualFile> abstract fun sourceFolders(file: SqlDelightFile , includeDependencies: Boolean = true): Collection <PsiDirectory> Companion Object Functions Name Summary getInstance fun getInstance(module: Module): SqlDelightFileIndex removeModule fun removeModule(module: Module): Unit sanitizeDirectoryName fun sanitizeDirectoryName(name: String ): String setInstance fun setInstance(module: Module, index: SqlDelightFileIndex ): Unit Inheritors Name Summary SqlDelightFileIndexImpl class SqlDelightFileIndexImpl : SqlDelightFileIndex","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/#sqldelightfileindex","text":"interface SqlDelightFileIndex","title":"SqlDelightFileIndex"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/#properties","text":"Name Summary className abstract val className: String contentRoot abstract val contentRoot: VirtualFile dependencies abstract val dependencies: List < SqlDelightDatabaseName > deriveSchemaFromMigrations abstract val deriveSchemaFromMigrations: Boolean isConfigured abstract val isConfigured: Boolean outputDirectory abstract val outputDirectory: String packageName abstract val packageName: String","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/#functions","text":"Name Summary packageName abstract fun packageName(file: SqlDelightFile ): String sourceFolders abstract fun sourceFolders(file: VirtualFile, includeDependencies: Boolean = true): Collection <VirtualFile> abstract fun sourceFolders(file: SqlDelightFile , includeDependencies: Boolean = true): Collection <PsiDirectory>","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/#companion-object-functions","text":"Name Summary getInstance fun getInstance(module: Module): SqlDelightFileIndex removeModule fun removeModule(module: Module): Unit sanitizeDirectoryName fun sanitizeDirectoryName(name: String ): String setInstance fun setInstance(module: Module, index: SqlDelightFileIndex ): Unit","title":"Companion Object Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/#inheritors","text":"Name Summary SqlDelightFileIndexImpl class SqlDelightFileIndexImpl : SqlDelightFileIndex","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/class-name/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndex / className className abstract val className: String Return The package name for the generated type which holds all the query files.","title":"Class name"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/class-name/#classname","text":"abstract val className: String Return The package name for the generated type which holds all the query files.","title":"className"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/content-root/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndex / contentRoot contentRoot abstract val contentRoot: VirtualFile Return The content root for the Module backing this index.","title":"Content root"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/content-root/#contentroot","text":"abstract val contentRoot: VirtualFile Return The content root for the Module backing this index.","title":"contentRoot"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/dependencies/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndex / dependencies dependencies abstract val dependencies: List < SqlDelightDatabaseName > Return The list of fully qualified classnames of databases this module depends on.","title":"Dependencies"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/dependencies/#dependencies","text":"abstract val dependencies: List < SqlDelightDatabaseName > Return The list of fully qualified classnames of databases this module depends on.","title":"dependencies"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/derive-schema-from-migrations/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndex / deriveSchemaFromMigrations deriveSchemaFromMigrations abstract val deriveSchemaFromMigrations: Boolean","title":"Derive schema from migrations"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/derive-schema-from-migrations/#deriveschemafrommigrations","text":"abstract val deriveSchemaFromMigrations: Boolean","title":"deriveSchemaFromMigrations"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/get-instance/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndex / getInstance getInstance fun getInstance(module: Module): SqlDelightFileIndex","title":"Get instance"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/get-instance/#getinstance","text":"fun getInstance(module: Module): SqlDelightFileIndex","title":"getInstance"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/is-configured/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndex / isConfigured isConfigured abstract val isConfigured: Boolean Return true if this index is configured to be used by SqlDelight.","title":"Is configured"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/is-configured/#isconfigured","text":"abstract val isConfigured: Boolean Return true if this index is configured to be used by SqlDelight.","title":"isConfigured"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/ordering/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndex / ordering ordering abstract fun ordering(file: MigrationFile ): Int ? Return The integer ordering this migration file will be run in.","title":"ordering - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/ordering/#ordering","text":"abstract fun ordering(file: MigrationFile ): Int ? Return The integer ordering this migration file will be run in.","title":"ordering"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/output-directory/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndex / outputDirectory outputDirectory abstract val outputDirectory: String Return the path to the output directory generated code should be placed in, relative to contentRoot","title":"Output directory"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/output-directory/#outputdirectory","text":"abstract val outputDirectory: String Return the path to the output directory generated code should be placed in, relative to contentRoot","title":"outputDirectory"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/package-name/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndex / packageName packageName abstract val packageName: String Return The package name for the whole source set. This is equivalent to the package name found in the manifest file for the current variant. abstract fun packageName(file: SqlDelightFile ): String Return The package name for a given SqlDelight file. Equal to the relative path under its fixture's sqldelight directory.","title":"Package name"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/package-name/#packagename","text":"abstract val packageName: String Return The package name for the whole source set. This is equivalent to the package name found in the manifest file for the current variant. abstract fun packageName(file: SqlDelightFile ): String Return The package name for a given SqlDelight file. Equal to the relative path under its fixture's sqldelight directory.","title":"packageName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/remove-module/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndex / removeModule removeModule fun removeModule(module: Module): Unit","title":"Remove module"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/remove-module/#removemodule","text":"fun removeModule(module: Module): Unit","title":"removeModule"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/sanitize-directory-name/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndex / sanitizeDirectoryName sanitizeDirectoryName fun sanitizeDirectoryName(name: String ): String","title":"Sanitize directory name"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/sanitize-directory-name/#sanitizedirectoryname","text":"fun sanitizeDirectoryName(name: String ): String","title":"sanitizeDirectoryName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/set-instance/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndex / setInstance setInstance fun setInstance(module: Module, index: SqlDelightFileIndex ): Unit","title":"Set instance"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/set-instance/#setinstance","text":"fun setInstance(module: Module, index: SqlDelightFileIndex ): Unit","title":"setInstance"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/source-folders/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndex / sourceFolders sourceFolders abstract fun sourceFolders(file: VirtualFile, includeDependencies: Boolean = true): Collection <VirtualFile> abstract fun sourceFolders(file: SqlDelightFile , includeDependencies: Boolean = true): Collection <PsiDirectory> Return The source roots of sqldelight files for file .","title":"Source folders"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index/source-folders/#sourcefolders","text":"abstract fun sourceFolders(file: VirtualFile, includeDependencies: Boolean = true): Collection <VirtualFile> abstract fun sourceFolders(file: SqlDelightFile , includeDependencies: Boolean = true): Collection <PsiDirectory> Return The source roots of sqldelight files for file .","title":"sourceFolders"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index-impl/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndexImpl SqlDelightFileIndexImpl class SqlDelightFileIndexImpl : SqlDelightFileIndex Constructors Name Summary <init> SqlDelightFileIndexImpl() Properties Name Summary className val className: Nothing contentRoot val contentRoot: Nothing dependencies val dependencies: List < SqlDelightDatabaseName > deriveSchemaFromMigrations val deriveSchemaFromMigrations: Boolean isConfigured val isConfigured: Boolean outputDirectory val outputDirectory: Nothing packageName val packageName: Nothing Functions Name Summary packageName fun packageName(file: SqlDelightFile ): Nothing sourceFolders fun sourceFolders(file: VirtualFile, includeDependencies: Boolean ): List <VirtualFile!> fun sourceFolders(file: SqlDelightFile , includeDependencies: Boolean ): List <PsiDirectory>","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index-impl/#sqldelightfileindeximpl","text":"class SqlDelightFileIndexImpl : SqlDelightFileIndex","title":"SqlDelightFileIndexImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index-impl/#constructors","text":"Name Summary <init> SqlDelightFileIndexImpl()","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index-impl/#properties","text":"Name Summary className val className: Nothing contentRoot val contentRoot: Nothing dependencies val dependencies: List < SqlDelightDatabaseName > deriveSchemaFromMigrations val deriveSchemaFromMigrations: Boolean isConfigured val isConfigured: Boolean outputDirectory val outputDirectory: Nothing packageName val packageName: Nothing","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index-impl/#functions","text":"Name Summary packageName fun packageName(file: SqlDelightFile ): Nothing sourceFolders fun sourceFolders(file: VirtualFile, includeDependencies: Boolean ): List <VirtualFile!> fun sourceFolders(file: SqlDelightFile , includeDependencies: Boolean ): List <PsiDirectory>","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index-impl/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndexImpl / <init> <init> SqlDelightFileIndexImpl()","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index-impl/-init-/#init","text":"SqlDelightFileIndexImpl()","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index-impl/class-name/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndexImpl / className className val className: Nothing Overrides SqlDelightFileIndex.className Return The package name for the generated type which holds all the query files.","title":"Class name"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index-impl/class-name/#classname","text":"val className: Nothing Overrides SqlDelightFileIndex.className Return The package name for the generated type which holds all the query files.","title":"className"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index-impl/content-root/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndexImpl / contentRoot contentRoot val contentRoot: Nothing Overrides SqlDelightFileIndex.contentRoot Return The content root for the Module backing this index.","title":"Content root"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index-impl/content-root/#contentroot","text":"val contentRoot: Nothing Overrides SqlDelightFileIndex.contentRoot Return The content root for the Module backing this index.","title":"contentRoot"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index-impl/dependencies/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndexImpl / dependencies dependencies val dependencies: List < SqlDelightDatabaseName > Overrides SqlDelightFileIndex.dependencies Return The list of fully qualified classnames of databases this module depends on.","title":"Dependencies"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index-impl/dependencies/#dependencies","text":"val dependencies: List < SqlDelightDatabaseName > Overrides SqlDelightFileIndex.dependencies Return The list of fully qualified classnames of databases this module depends on.","title":"dependencies"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index-impl/derive-schema-from-migrations/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndexImpl / deriveSchemaFromMigrations deriveSchemaFromMigrations val deriveSchemaFromMigrations: Boolean Overrides SqlDelightFileIndex.deriveSchemaFromMigrations","title":"Derive schema from migrations"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index-impl/derive-schema-from-migrations/#deriveschemafrommigrations","text":"val deriveSchemaFromMigrations: Boolean Overrides SqlDelightFileIndex.deriveSchemaFromMigrations","title":"deriveSchemaFromMigrations"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index-impl/is-configured/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndexImpl / isConfigured isConfigured val isConfigured: Boolean Overrides SqlDelightFileIndex.isConfigured Return true if this index is configured to be used by SqlDelight.","title":"Is configured"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index-impl/is-configured/#isconfigured","text":"val isConfigured: Boolean Overrides SqlDelightFileIndex.isConfigured Return true if this index is configured to be used by SqlDelight.","title":"isConfigured"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index-impl/ordering/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndexImpl / ordering ordering fun ordering(file: MigrationFile ): Nothing Overrides SqlDelightFileIndex.ordering Return The integer ordering this migration file will be run in.","title":"ordering - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index-impl/ordering/#ordering","text":"fun ordering(file: MigrationFile ): Nothing Overrides SqlDelightFileIndex.ordering Return The integer ordering this migration file will be run in.","title":"ordering"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index-impl/output-directory/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndexImpl / outputDirectory outputDirectory val outputDirectory: Nothing Overrides SqlDelightFileIndex.outputDirectory Return the path to the output directory generated code should be placed in, relative to contentRoot","title":"Output directory"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index-impl/output-directory/#outputdirectory","text":"val outputDirectory: Nothing Overrides SqlDelightFileIndex.outputDirectory Return the path to the output directory generated code should be placed in, relative to contentRoot","title":"outputDirectory"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index-impl/package-name/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndexImpl / packageName packageName val packageName: Nothing Overrides SqlDelightFileIndex.packageName Return The package name for the whole source set. This is equivalent to the package name found in the manifest file for the current variant. fun packageName(file: SqlDelightFile ): Nothing Overrides SqlDelightFileIndex.packageName Return The package name for a given SqlDelight file. Equal to the relative path under its fixture's sqldelight directory.","title":"Package name"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index-impl/package-name/#packagename","text":"val packageName: Nothing Overrides SqlDelightFileIndex.packageName Return The package name for the whole source set. This is equivalent to the package name found in the manifest file for the current variant. fun packageName(file: SqlDelightFile ): Nothing Overrides SqlDelightFileIndex.packageName Return The package name for a given SqlDelight file. Equal to the relative path under its fixture's sqldelight directory.","title":"packageName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index-impl/source-folders/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightFileIndexImpl / sourceFolders sourceFolders fun sourceFolders(file: VirtualFile, includeDependencies: Boolean ): List <VirtualFile!> Overrides SqlDelightFileIndex.sourceFolders fun sourceFolders(file: SqlDelightFile , includeDependencies: Boolean ): List <PsiDirectory> Overrides SqlDelightFileIndex.sourceFolders Return The source roots of sqldelight files for file .","title":"Source folders"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-file-index-impl/source-folders/#sourcefolders","text":"fun sourceFolders(file: VirtualFile, includeDependencies: Boolean ): List <VirtualFile!> Overrides SqlDelightFileIndex.sourceFolders fun sourceFolders(file: SqlDelightFile , includeDependencies: Boolean ): List <PsiDirectory> Overrides SqlDelightFileIndex.sourceFolders Return The source roots of sqldelight files for file .","title":"sourceFolders"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-project-service/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightProjectService SqlDelightProjectService interface SqlDelightProjectService Properties Name Summary dialectPreset abstract var dialectPreset: DialectPreset Functions Name Summary module abstract fun module(vFile: VirtualFile): Module? Companion Object Functions Name Summary getInstance fun getInstance(project: Project): SqlDelightProjectService Inheritors Name Summary SqlDelightEnvironment class SqlDelightEnvironment : SqlCoreEnvironment, SqlDelightProjectService Mocks an intellij environment for compiling sqldelight files without an instance of intellij running.","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-project-service/#sqldelightprojectservice","text":"interface SqlDelightProjectService","title":"SqlDelightProjectService"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-project-service/#properties","text":"Name Summary dialectPreset abstract var dialectPreset: DialectPreset","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-project-service/#functions","text":"Name Summary module abstract fun module(vFile: VirtualFile): Module?","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-project-service/#companion-object-functions","text":"Name Summary getInstance fun getInstance(project: Project): SqlDelightProjectService","title":"Companion Object Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-project-service/#inheritors","text":"Name Summary SqlDelightEnvironment class SqlDelightEnvironment : SqlCoreEnvironment, SqlDelightProjectService Mocks an intellij environment for compiling sqldelight files without an instance of intellij running.","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-project-service/dialect-preset/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightProjectService / dialectPreset dialectPreset abstract var dialectPreset: DialectPreset","title":"Dialect preset"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-project-service/dialect-preset/#dialectpreset","text":"abstract var dialectPreset: DialectPreset","title":"dialectPreset"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-project-service/get-instance/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightProjectService / getInstance getInstance fun getInstance(project: Project): SqlDelightProjectService","title":"Get instance"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-project-service/get-instance/#getinstance","text":"fun getInstance(project: Project): SqlDelightProjectService","title":"getInstance"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-project-service/module/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightProjectService / module module abstract fun module(vFile: VirtualFile): Module?","title":"Module"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-project-service/module/#module","text":"abstract fun module(vFile: VirtualFile): Module?","title":"module"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightPropertiesFile SqlDelightPropertiesFile @JsonClass(true) class SqlDelightPropertiesFile Constructors Name Summary <init> SqlDelightPropertiesFile(databases: List < SqlDelightDatabaseProperties >) Properties Name Summary databases val databases: List < SqlDelightDatabaseProperties > Functions Name Summary toFile fun toFile(file: File ): Unit Companion Object Properties Name Summary NAME const val NAME: String Companion Object Functions Name Summary fromFile fun fromFile(file: File ): SqlDelightPropertiesFile fromText fun fromText(text: String ): SqlDelightPropertiesFile ?","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file/#sqldelightpropertiesfile","text":"@JsonClass(true) class SqlDelightPropertiesFile","title":"SqlDelightPropertiesFile"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file/#constructors","text":"Name Summary <init> SqlDelightPropertiesFile(databases: List < SqlDelightDatabaseProperties >)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file/#properties","text":"Name Summary databases val databases: List < SqlDelightDatabaseProperties >","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file/#functions","text":"Name Summary toFile fun toFile(file: File ): Unit","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file/#companion-object-properties","text":"Name Summary NAME const val NAME: String","title":"Companion Object Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file/#companion-object-functions","text":"Name Summary fromFile fun fromFile(file: File ): SqlDelightPropertiesFile fromText fun fromText(text: String ): SqlDelightPropertiesFile ?","title":"Companion Object Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightPropertiesFile / <init> <init> SqlDelightPropertiesFile(databases: List < SqlDelightDatabaseProperties >)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file/-init-/#init","text":"SqlDelightPropertiesFile(databases: List < SqlDelightDatabaseProperties >)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file/-n-a-m-e/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightPropertiesFile / NAME NAME const val NAME: String","title":" n a m e"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file/-n-a-m-e/#name","text":"const val NAME: String","title":"NAME"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file/databases/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightPropertiesFile / databases databases val databases: List < SqlDelightDatabaseProperties >","title":"Databases"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file/databases/#databases","text":"val databases: List < SqlDelightDatabaseProperties >","title":"databases"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file/from-file/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightPropertiesFile / fromFile fromFile fun fromFile(file: File ): SqlDelightPropertiesFile","title":"From file"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file/from-file/#fromfile","text":"fun fromFile(file: File ): SqlDelightPropertiesFile","title":"fromFile"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file/from-text/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightPropertiesFile / fromText fromText fun fromText(text: String ): SqlDelightPropertiesFile ?","title":"From text"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file/from-text/#fromtext","text":"fun fromText(text: String ): SqlDelightPropertiesFile ?","title":"fromText"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file/to-file/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightPropertiesFile / toFile toFile fun toFile(file: File ): Unit","title":"To file"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file/to-file/#tofile","text":"fun toFile(file: File ): Unit","title":"toFile"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file-json-adapter/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightPropertiesFileJsonAdapter SqlDelightPropertiesFileJsonAdapter class SqlDelightPropertiesFileJsonAdapter : JsonAdapter< SqlDelightPropertiesFile > Constructors Name Summary <init> SqlDelightPropertiesFileJsonAdapter(moshi: Moshi) Functions Name Summary fromJson fun fromJson(reader: JsonReader): SqlDelightPropertiesFile toJson fun toJson(writer: JsonWriter, value: SqlDelightPropertiesFile ?): Unit toString fun toString(): String","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file-json-adapter/#sqldelightpropertiesfilejsonadapter","text":"class SqlDelightPropertiesFileJsonAdapter : JsonAdapter< SqlDelightPropertiesFile >","title":"SqlDelightPropertiesFileJsonAdapter"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file-json-adapter/#constructors","text":"Name Summary <init> SqlDelightPropertiesFileJsonAdapter(moshi: Moshi)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file-json-adapter/#functions","text":"Name Summary fromJson fun fromJson(reader: JsonReader): SqlDelightPropertiesFile toJson fun toJson(writer: JsonWriter, value: SqlDelightPropertiesFile ?): Unit toString fun toString(): String","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file-json-adapter/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightPropertiesFileJsonAdapter / <init> <init> SqlDelightPropertiesFileJsonAdapter(moshi: Moshi)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file-json-adapter/-init-/#init","text":"SqlDelightPropertiesFileJsonAdapter(moshi: Moshi)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file-json-adapter/from-json/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightPropertiesFileJsonAdapter / fromJson fromJson fun fromJson(reader: JsonReader): SqlDelightPropertiesFile","title":"From json"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file-json-adapter/from-json/#fromjson","text":"fun fromJson(reader: JsonReader): SqlDelightPropertiesFile","title":"fromJson"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file-json-adapter/to-json/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightPropertiesFileJsonAdapter / toJson toJson fun toJson(writer: JsonWriter, value: SqlDelightPropertiesFile ?): Unit","title":"To json"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file-json-adapter/to-json/#tojson","text":"fun toJson(writer: JsonWriter, value: SqlDelightPropertiesFile ?): Unit","title":"toJson"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file-json-adapter/to-string/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightPropertiesFileJsonAdapter / toString toString fun toString(): String","title":"To string"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-properties-file-json-adapter/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-source-folder/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightSourceFolder SqlDelightSourceFolder @JsonClass(true) data class SqlDelightSourceFolder : Serializable Constructors Name Summary <init> SqlDelightSourceFolder(path: String , dependency: Boolean = false) Properties Name Summary dependency val dependency: Boolean path val path: String","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-source-folder/#sqldelightsourcefolder","text":"@JsonClass(true) data class SqlDelightSourceFolder : Serializable","title":"SqlDelightSourceFolder"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-source-folder/#constructors","text":"Name Summary <init> SqlDelightSourceFolder(path: String , dependency: Boolean = false)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-source-folder/#properties","text":"Name Summary dependency val dependency: Boolean path val path: String","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-source-folder/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightSourceFolder / <init> <init> SqlDelightSourceFolder(path: String , dependency: Boolean = false)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-source-folder/-init-/#init","text":"SqlDelightSourceFolder(path: String , dependency: Boolean = false)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-source-folder/dependency/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightSourceFolder / dependency dependency val dependency: Boolean","title":"Dependency"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-source-folder/dependency/#dependency","text":"val dependency: Boolean","title":"dependency"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-source-folder/path/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightSourceFolder / path path val path: String","title":"Path"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-source-folder/path/#path","text":"val path: String","title":"path"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-source-folder-json-adapter/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightSourceFolderJsonAdapter SqlDelightSourceFolderJsonAdapter class SqlDelightSourceFolderJsonAdapter : JsonAdapter< SqlDelightSourceFolder > Constructors Name Summary <init> SqlDelightSourceFolderJsonAdapter(moshi: Moshi) Functions Name Summary fromJson fun fromJson(reader: JsonReader): SqlDelightSourceFolder toJson fun toJson(writer: JsonWriter, value: SqlDelightSourceFolder ?): Unit toString fun toString(): String","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-source-folder-json-adapter/#sqldelightsourcefolderjsonadapter","text":"class SqlDelightSourceFolderJsonAdapter : JsonAdapter< SqlDelightSourceFolder >","title":"SqlDelightSourceFolderJsonAdapter"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-source-folder-json-adapter/#constructors","text":"Name Summary <init> SqlDelightSourceFolderJsonAdapter(moshi: Moshi)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-source-folder-json-adapter/#functions","text":"Name Summary fromJson fun fromJson(reader: JsonReader): SqlDelightSourceFolder toJson fun toJson(writer: JsonWriter, value: SqlDelightSourceFolder ?): Unit toString fun toString(): String","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-source-folder-json-adapter/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightSourceFolderJsonAdapter / <init> <init> SqlDelightSourceFolderJsonAdapter(moshi: Moshi)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-source-folder-json-adapter/-init-/#init","text":"SqlDelightSourceFolderJsonAdapter(moshi: Moshi)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-source-folder-json-adapter/from-json/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightSourceFolderJsonAdapter / fromJson fromJson fun fromJson(reader: JsonReader): SqlDelightSourceFolder","title":"From json"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-source-folder-json-adapter/from-json/#fromjson","text":"fun fromJson(reader: JsonReader): SqlDelightSourceFolder","title":"fromJson"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-source-folder-json-adapter/to-json/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightSourceFolderJsonAdapter / toJson toJson fun toJson(writer: JsonWriter, value: SqlDelightSourceFolder ?): Unit","title":"To json"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-source-folder-json-adapter/to-json/#tojson","text":"fun toJson(writer: JsonWriter, value: SqlDelightSourceFolder ?): Unit","title":"toJson"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-source-folder-json-adapter/to-string/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqlDelightSourceFolderJsonAdapter / toString toString fun toString(): String","title":"To string"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sql-delight-source-folder-json-adapter/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser SqldelightParser open class SqldelightParser : PsiParser, LightPsiParser Constructors Name Summary <init> SqldelightParser() Functions Name Summary annotation_real open static fun annotation_real(builder_: PsiBuilder!, level_: Int ): Boolean annotation_value_real open static fun annotation_value_real(builder_: PsiBuilder!, level_: Int ): Boolean column_def_real open static fun column_def_real(builder_: PsiBuilder!, level_: Int ): Boolean import_stmt_list_real open static fun import_stmt_list_real(builder_: PsiBuilder!, level_: Int ): Boolean import_stmt_real open static fun import_stmt_real(builder_: PsiBuilder!, level_: Int ): Boolean insert_stmt_values_real open static fun insert_stmt_values_real(builder_: PsiBuilder!, level_: Int ): Boolean java_type_name2_real open static fun java_type_name2_real(builder_: PsiBuilder!, level_: Int ): Boolean java_type_name_real open static fun java_type_name_real(builder_: PsiBuilder!, level_: Int ): Boolean java_type_real open static fun java_type_real(builder_: PsiBuilder!, level_: Int ): Boolean overrides_real open static fun overrides_real(builder_: PsiBuilder!, level_: Int ): Boolean parameterized_java_type_real open static fun parameterized_java_type_real(builder_: PsiBuilder!, level_: Int ): Boolean parse open fun parse(root_: IElementType, builder_: PsiBuilder): ASTNode parse_root_ open fun parse_root_(root_: IElementType!, builder_: PsiBuilder!): Boolean parseLight open fun parseLight(root_: IElementType!, builder_: PsiBuilder!): Unit stmt_clojure_real open static fun stmt_clojure_real(builder_: PsiBuilder!, level_: Int ): Boolean stmt_clojure_stmt_list_real open static fun stmt_clojure_stmt_list_real(builder_: PsiBuilder!, level_: Int ): Boolean stmt_identifier_clojure_real open static fun stmt_identifier_clojure_real(builder_: PsiBuilder!, level_: Int ): Boolean stmt_identifier_real open static fun stmt_identifier_real(builder_: PsiBuilder!, level_: Int ): Boolean stmt_list_real open static fun stmt_list_real(builder_: PsiBuilder!, level_: Int ): Boolean","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/#sqldelightparser","text":"open class SqldelightParser : PsiParser, LightPsiParser","title":"SqldelightParser"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/#constructors","text":"Name Summary <init> SqldelightParser()","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/#functions","text":"Name Summary annotation_real open static fun annotation_real(builder_: PsiBuilder!, level_: Int ): Boolean annotation_value_real open static fun annotation_value_real(builder_: PsiBuilder!, level_: Int ): Boolean column_def_real open static fun column_def_real(builder_: PsiBuilder!, level_: Int ): Boolean import_stmt_list_real open static fun import_stmt_list_real(builder_: PsiBuilder!, level_: Int ): Boolean import_stmt_real open static fun import_stmt_real(builder_: PsiBuilder!, level_: Int ): Boolean insert_stmt_values_real open static fun insert_stmt_values_real(builder_: PsiBuilder!, level_: Int ): Boolean java_type_name2_real open static fun java_type_name2_real(builder_: PsiBuilder!, level_: Int ): Boolean java_type_name_real open static fun java_type_name_real(builder_: PsiBuilder!, level_: Int ): Boolean java_type_real open static fun java_type_real(builder_: PsiBuilder!, level_: Int ): Boolean overrides_real open static fun overrides_real(builder_: PsiBuilder!, level_: Int ): Boolean parameterized_java_type_real open static fun parameterized_java_type_real(builder_: PsiBuilder!, level_: Int ): Boolean parse open fun parse(root_: IElementType, builder_: PsiBuilder): ASTNode parse_root_ open fun parse_root_(root_: IElementType!, builder_: PsiBuilder!): Boolean parseLight open fun parseLight(root_: IElementType!, builder_: PsiBuilder!): Unit stmt_clojure_real open static fun stmt_clojure_real(builder_: PsiBuilder!, level_: Int ): Boolean stmt_clojure_stmt_list_real open static fun stmt_clojure_stmt_list_real(builder_: PsiBuilder!, level_: Int ): Boolean stmt_identifier_clojure_real open static fun stmt_identifier_clojure_real(builder_: PsiBuilder!, level_: Int ): Boolean stmt_identifier_real open static fun stmt_identifier_real(builder_: PsiBuilder!, level_: Int ): Boolean stmt_list_real open static fun stmt_list_real(builder_: PsiBuilder!, level_: Int ): Boolean","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / <init> <init> SqldelightParser()","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/-init-/#init","text":"SqldelightParser()","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/annotation_real/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / annotation_real annotation_real open static fun annotation_real(builder_: PsiBuilder!, level_: Int ): Boolean","title":"Annotation real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/annotation_real/#annotation_real","text":"open static fun annotation_real(builder_: PsiBuilder!, level_: Int ): Boolean","title":"annotation_real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/annotation_value_real/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / annotation_value_real annotation_value_real open static fun annotation_value_real(builder_: PsiBuilder!, level_: Int ): Boolean","title":"Annotation value real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/annotation_value_real/#annotation_value_real","text":"open static fun annotation_value_real(builder_: PsiBuilder!, level_: Int ): Boolean","title":"annotation_value_real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/column_def_real/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / column_def_real column_def_real open static fun column_def_real(builder_: PsiBuilder!, level_: Int ): Boolean","title":"Column def real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/column_def_real/#column_def_real","text":"open static fun column_def_real(builder_: PsiBuilder!, level_: Int ): Boolean","title":"column_def_real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/import_stmt_list_real/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / import_stmt_list_real import_stmt_list_real open static fun import_stmt_list_real(builder_: PsiBuilder!, level_: Int ): Boolean","title":"Import stmt list real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/import_stmt_list_real/#import_stmt_list_real","text":"open static fun import_stmt_list_real(builder_: PsiBuilder!, level_: Int ): Boolean","title":"import_stmt_list_real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/import_stmt_real/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / import_stmt_real import_stmt_real open static fun import_stmt_real(builder_: PsiBuilder!, level_: Int ): Boolean","title":"Import stmt real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/import_stmt_real/#import_stmt_real","text":"open static fun import_stmt_real(builder_: PsiBuilder!, level_: Int ): Boolean","title":"import_stmt_real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/insert_stmt_values_real/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / insert_stmt_values_real insert_stmt_values_real open static fun insert_stmt_values_real(builder_: PsiBuilder!, level_: Int ): Boolean","title":"Insert stmt values real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/insert_stmt_values_real/#insert_stmt_values_real","text":"open static fun insert_stmt_values_real(builder_: PsiBuilder!, level_: Int ): Boolean","title":"insert_stmt_values_real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/java_type_name2_real/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / java_type_name2_real java_type_name2_real open static fun java_type_name2_real(builder_: PsiBuilder!, level_: Int ): Boolean","title":"Java type name2 real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/java_type_name2_real/#java_type_name2_real","text":"open static fun java_type_name2_real(builder_: PsiBuilder!, level_: Int ): Boolean","title":"java_type_name2_real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/java_type_name_real/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / java_type_name_real java_type_name_real open static fun java_type_name_real(builder_: PsiBuilder!, level_: Int ): Boolean","title":"Java type name real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/java_type_name_real/#java_type_name_real","text":"open static fun java_type_name_real(builder_: PsiBuilder!, level_: Int ): Boolean","title":"java_type_name_real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/java_type_real/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / java_type_real java_type_real open static fun java_type_real(builder_: PsiBuilder!, level_: Int ): Boolean","title":"Java type real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/java_type_real/#java_type_real","text":"open static fun java_type_real(builder_: PsiBuilder!, level_: Int ): Boolean","title":"java_type_real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/overrides_real/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / overrides_real overrides_real open static fun overrides_real(builder_: PsiBuilder!, level_: Int ): Boolean","title":"Overrides real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/overrides_real/#overrides_real","text":"open static fun overrides_real(builder_: PsiBuilder!, level_: Int ): Boolean","title":"overrides_real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/parameterized_java_type_real/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / parameterized_java_type_real parameterized_java_type_real open static fun parameterized_java_type_real(builder_: PsiBuilder!, level_: Int ): Boolean","title":"Parameterized java type real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/parameterized_java_type_real/#parameterized_java_type_real","text":"open static fun parameterized_java_type_real(builder_: PsiBuilder!, level_: Int ): Boolean","title":"parameterized_java_type_real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/parse-light/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / parseLight parseLight open fun parseLight(root_: IElementType!, builder_: PsiBuilder!): Unit","title":"Parse light"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/parse-light/#parselight","text":"open fun parseLight(root_: IElementType!, builder_: PsiBuilder!): Unit","title":"parseLight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/parse/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / parse parse open fun parse(root_: IElementType, builder_: PsiBuilder): ASTNode","title":"Parse"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/parse/#parse","text":"open fun parse(root_: IElementType, builder_: PsiBuilder): ASTNode","title":"parse"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/parse_root_/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / parse_root_ parse_root_ protected open fun parse_root_(root_: IElementType!, builder_: PsiBuilder!): Boolean","title":"Parse root "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/parse_root_/#parse_root_","text":"protected open fun parse_root_(root_: IElementType!, builder_: PsiBuilder!): Boolean","title":"parse_root_"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/stmt_clojure_real/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / stmt_clojure_real stmt_clojure_real open static fun stmt_clojure_real(builder_: PsiBuilder!, level_: Int ): Boolean","title":"Stmt clojure real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/stmt_clojure_real/#stmt_clojure_real","text":"open static fun stmt_clojure_real(builder_: PsiBuilder!, level_: Int ): Boolean","title":"stmt_clojure_real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/stmt_clojure_stmt_list_real/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / stmt_clojure_stmt_list_real stmt_clojure_stmt_list_real open static fun stmt_clojure_stmt_list_real(builder_: PsiBuilder!, level_: Int ): Boolean","title":"Stmt clojure stmt list real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/stmt_clojure_stmt_list_real/#stmt_clojure_stmt_list_real","text":"open static fun stmt_clojure_stmt_list_real(builder_: PsiBuilder!, level_: Int ): Boolean","title":"stmt_clojure_stmt_list_real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/stmt_identifier_clojure_real/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / stmt_identifier_clojure_real stmt_identifier_clojure_real open static fun stmt_identifier_clojure_real(builder_: PsiBuilder!, level_: Int ): Boolean","title":"Stmt identifier clojure real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/stmt_identifier_clojure_real/#stmt_identifier_clojure_real","text":"open static fun stmt_identifier_clojure_real(builder_: PsiBuilder!, level_: Int ): Boolean","title":"stmt_identifier_clojure_real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/stmt_identifier_real/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / stmt_identifier_real stmt_identifier_real open static fun stmt_identifier_real(builder_: PsiBuilder!, level_: Int ): Boolean","title":"Stmt identifier real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/stmt_identifier_real/#stmt_identifier_real","text":"open static fun stmt_identifier_real(builder_: PsiBuilder!, level_: Int ): Boolean","title":"stmt_identifier_real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/stmt_list_real/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParser / stmt_list_real stmt_list_real open static fun stmt_list_real(builder_: PsiBuilder!, level_: Int ): Boolean","title":"Stmt list real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser/stmt_list_real/#stmt_list_real","text":"open static fun stmt_list_real(builder_: PsiBuilder!, level_: Int ): Boolean","title":"stmt_list_real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil SqldelightParserUtil object SqldelightParserUtil : GeneratedParserUtilBase Properties Name Summary annotation var annotation: Parser? annotation_value var annotation_value: Parser? column_def var column_def: Parser? createElement var createElement: (ASTNode) -> PsiElement import_stmt var import_stmt: Parser? import_stmt_list var import_stmt_list: Parser? insert_stmt_values var insert_stmt_values: Parser? java_type var java_type: Parser? java_type_name var java_type_name: Parser? java_type_name2 var java_type_name2: Parser? overrides var overrides: Parser? parameterized_java_type var parameterized_java_type: Parser? stmt_clojure var stmt_clojure: Parser? stmt_clojure_stmt_list var stmt_clojure_stmt_list: Parser? stmt_identifier var stmt_identifier: Parser? stmt_identifier_clojure var stmt_identifier_clojure: Parser? stmt_list var stmt_list: Parser? Functions Name Summary annotationExt fun annotationExt(builder: PsiBuilder, level: Int , annotation: Parser): Boolean annotationValueExt fun annotationValueExt(builder: PsiBuilder, level: Int , annotation_value: Parser): Boolean columnDefExt fun columnDefExt(builder: PsiBuilder, level: Int , column_def: Parser): Boolean importStmtExt fun importStmtExt(builder: PsiBuilder, level: Int , import_stmt: Parser): Boolean importStmtListExt fun importStmtListExt(builder: PsiBuilder, level: Int , import_stmt_list: Parser): Boolean insertStmtValuesExt fun insertStmtValuesExt(builder: PsiBuilder, level: Int , insert_stmt_values: Parser): Boolean javaTypeExt fun javaTypeExt(builder: PsiBuilder, level: Int , java_type: Parser): Boolean javaTypeName2Ext fun javaTypeName2Ext(builder: PsiBuilder, level: Int , java_type_name2: Parser): Boolean javaTypeNameExt fun javaTypeNameExt(builder: PsiBuilder, level: Int , java_type_name: Parser): Boolean overridesExt fun overridesExt(builder: PsiBuilder, level: Int , overrides: Parser): Boolean overrideSqlParser fun overrideSqlParser(): Unit parameterizedJavaTypeExt fun parameterizedJavaTypeExt(builder: PsiBuilder, level: Int , parameterized_java_type: Parser): Boolean reset fun reset(): Unit stmtClojureExt fun stmtClojureExt(builder: PsiBuilder, level: Int , stmt_clojure: Parser): Boolean stmtClojureStmtListExt fun stmtClojureStmtListExt(builder: PsiBuilder, level: Int , stmt_clojure_stmt_list: Parser): Boolean stmtIdentifierClojureExt fun stmtIdentifierClojureExt(builder: PsiBuilder, level: Int , stmt_identifier_clojure: Parser): Boolean stmtIdentifierExt fun stmtIdentifierExt(builder: PsiBuilder, level: Int , stmt_identifier: Parser): Boolean stmtListExt fun stmtListExt(builder: PsiBuilder, level: Int , stmt_list: Parser): Boolean","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/#sqldelightparserutil","text":"object SqldelightParserUtil : GeneratedParserUtilBase","title":"SqldelightParserUtil"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/#properties","text":"Name Summary annotation var annotation: Parser? annotation_value var annotation_value: Parser? column_def var column_def: Parser? createElement var createElement: (ASTNode) -> PsiElement import_stmt var import_stmt: Parser? import_stmt_list var import_stmt_list: Parser? insert_stmt_values var insert_stmt_values: Parser? java_type var java_type: Parser? java_type_name var java_type_name: Parser? java_type_name2 var java_type_name2: Parser? overrides var overrides: Parser? parameterized_java_type var parameterized_java_type: Parser? stmt_clojure var stmt_clojure: Parser? stmt_clojure_stmt_list var stmt_clojure_stmt_list: Parser? stmt_identifier var stmt_identifier: Parser? stmt_identifier_clojure var stmt_identifier_clojure: Parser? stmt_list var stmt_list: Parser?","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/#functions","text":"Name Summary annotationExt fun annotationExt(builder: PsiBuilder, level: Int , annotation: Parser): Boolean annotationValueExt fun annotationValueExt(builder: PsiBuilder, level: Int , annotation_value: Parser): Boolean columnDefExt fun columnDefExt(builder: PsiBuilder, level: Int , column_def: Parser): Boolean importStmtExt fun importStmtExt(builder: PsiBuilder, level: Int , import_stmt: Parser): Boolean importStmtListExt fun importStmtListExt(builder: PsiBuilder, level: Int , import_stmt_list: Parser): Boolean insertStmtValuesExt fun insertStmtValuesExt(builder: PsiBuilder, level: Int , insert_stmt_values: Parser): Boolean javaTypeExt fun javaTypeExt(builder: PsiBuilder, level: Int , java_type: Parser): Boolean javaTypeName2Ext fun javaTypeName2Ext(builder: PsiBuilder, level: Int , java_type_name2: Parser): Boolean javaTypeNameExt fun javaTypeNameExt(builder: PsiBuilder, level: Int , java_type_name: Parser): Boolean overridesExt fun overridesExt(builder: PsiBuilder, level: Int , overrides: Parser): Boolean overrideSqlParser fun overrideSqlParser(): Unit parameterizedJavaTypeExt fun parameterizedJavaTypeExt(builder: PsiBuilder, level: Int , parameterized_java_type: Parser): Boolean reset fun reset(): Unit stmtClojureExt fun stmtClojureExt(builder: PsiBuilder, level: Int , stmt_clojure: Parser): Boolean stmtClojureStmtListExt fun stmtClojureStmtListExt(builder: PsiBuilder, level: Int , stmt_clojure_stmt_list: Parser): Boolean stmtIdentifierClojureExt fun stmtIdentifierClojureExt(builder: PsiBuilder, level: Int , stmt_identifier_clojure: Parser): Boolean stmtIdentifierExt fun stmtIdentifierExt(builder: PsiBuilder, level: Int , stmt_identifier: Parser): Boolean stmtListExt fun stmtListExt(builder: PsiBuilder, level: Int , stmt_list: Parser): Boolean","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/annotation-ext/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / annotationExt annotationExt @JvmStatic fun annotationExt(builder: PsiBuilder, level: Int , annotation: Parser): Boolean","title":"Annotation ext"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/annotation-ext/#annotationext","text":"@JvmStatic fun annotationExt(builder: PsiBuilder, level: Int , annotation: Parser): Boolean","title":"annotationExt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/annotation-value-ext/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / annotationValueExt annotationValueExt @JvmStatic fun annotationValueExt(builder: PsiBuilder, level: Int , annotation_value: Parser): Boolean","title":"Annotation value ext"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/annotation-value-ext/#annotationvalueext","text":"@JvmStatic fun annotationValueExt(builder: PsiBuilder, level: Int , annotation_value: Parser): Boolean","title":"annotationValueExt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/annotation/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / annotation annotation var annotation: Parser?","title":"Annotation"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/annotation/#annotation","text":"var annotation: Parser?","title":"annotation"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/annotation_value/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / annotation_value annotation_value var annotation_value: Parser?","title":"Annotation value"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/annotation_value/#annotation_value","text":"var annotation_value: Parser?","title":"annotation_value"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/column-def-ext/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / columnDefExt columnDefExt @JvmStatic fun columnDefExt(builder: PsiBuilder, level: Int , column_def: Parser): Boolean","title":"Column def ext"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/column-def-ext/#columndefext","text":"@JvmStatic fun columnDefExt(builder: PsiBuilder, level: Int , column_def: Parser): Boolean","title":"columnDefExt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/column_def/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / column_def column_def var column_def: Parser?","title":"Column def"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/column_def/#column_def","text":"var column_def: Parser?","title":"column_def"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/create-element/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / createElement createElement var createElement: (ASTNode) -> PsiElement","title":"Create element"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/create-element/#createelement","text":"var createElement: (ASTNode) -> PsiElement","title":"createElement"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/import-stmt-ext/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / importStmtExt importStmtExt @JvmStatic fun importStmtExt(builder: PsiBuilder, level: Int , import_stmt: Parser): Boolean","title":"Import stmt ext"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/import-stmt-ext/#importstmtext","text":"@JvmStatic fun importStmtExt(builder: PsiBuilder, level: Int , import_stmt: Parser): Boolean","title":"importStmtExt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/import-stmt-list-ext/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / importStmtListExt importStmtListExt @JvmStatic fun importStmtListExt(builder: PsiBuilder, level: Int , import_stmt_list: Parser): Boolean","title":"Import stmt list ext"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/import-stmt-list-ext/#importstmtlistext","text":"@JvmStatic fun importStmtListExt(builder: PsiBuilder, level: Int , import_stmt_list: Parser): Boolean","title":"importStmtListExt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/import_stmt/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / import_stmt import_stmt var import_stmt: Parser?","title":"Import stmt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/import_stmt/#import_stmt","text":"var import_stmt: Parser?","title":"import_stmt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/import_stmt_list/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / import_stmt_list import_stmt_list var import_stmt_list: Parser?","title":"Import stmt list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/import_stmt_list/#import_stmt_list","text":"var import_stmt_list: Parser?","title":"import_stmt_list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/insert-stmt-values-ext/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / insertStmtValuesExt insertStmtValuesExt @JvmStatic fun insertStmtValuesExt(builder: PsiBuilder, level: Int , insert_stmt_values: Parser): Boolean","title":"Insert stmt values ext"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/insert-stmt-values-ext/#insertstmtvaluesext","text":"@JvmStatic fun insertStmtValuesExt(builder: PsiBuilder, level: Int , insert_stmt_values: Parser): Boolean","title":"insertStmtValuesExt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/insert_stmt_values/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / insert_stmt_values insert_stmt_values var insert_stmt_values: Parser?","title":"Insert stmt values"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/insert_stmt_values/#insert_stmt_values","text":"var insert_stmt_values: Parser?","title":"insert_stmt_values"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/java-type-ext/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / javaTypeExt javaTypeExt @JvmStatic fun javaTypeExt(builder: PsiBuilder, level: Int , java_type: Parser): Boolean","title":"Java type ext"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/java-type-ext/#javatypeext","text":"@JvmStatic fun javaTypeExt(builder: PsiBuilder, level: Int , java_type: Parser): Boolean","title":"javaTypeExt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/java-type-name-ext/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / javaTypeNameExt javaTypeNameExt @JvmStatic fun javaTypeNameExt(builder: PsiBuilder, level: Int , java_type_name: Parser): Boolean","title":"Java type name ext"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/java-type-name-ext/#javatypenameext","text":"@JvmStatic fun javaTypeNameExt(builder: PsiBuilder, level: Int , java_type_name: Parser): Boolean","title":"javaTypeNameExt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/java-type-name2-ext/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / javaTypeName2Ext javaTypeName2Ext @JvmStatic fun javaTypeName2Ext(builder: PsiBuilder, level: Int , java_type_name2: Parser): Boolean","title":"Java type name2 ext"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/java-type-name2-ext/#javatypename2ext","text":"@JvmStatic fun javaTypeName2Ext(builder: PsiBuilder, level: Int , java_type_name2: Parser): Boolean","title":"javaTypeName2Ext"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/java_type/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / java_type java_type var java_type: Parser?","title":"Java type"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/java_type/#java_type","text":"var java_type: Parser?","title":"java_type"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/java_type_name/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / java_type_name java_type_name var java_type_name: Parser?","title":"Java type name"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/java_type_name/#java_type_name","text":"var java_type_name: Parser?","title":"java_type_name"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/java_type_name2/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / java_type_name2 java_type_name2 var java_type_name2: Parser?","title":"Java type name2"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/java_type_name2/#java_type_name2","text":"var java_type_name2: Parser?","title":"java_type_name2"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/override-sql-parser/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / overrideSqlParser overrideSqlParser fun overrideSqlParser(): Unit","title":"Override sql parser"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/override-sql-parser/#overridesqlparser","text":"fun overrideSqlParser(): Unit","title":"overrideSqlParser"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/overrides-ext/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / overridesExt overridesExt @JvmStatic fun overridesExt(builder: PsiBuilder, level: Int , overrides: Parser): Boolean","title":"Overrides ext"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/overrides-ext/#overridesext","text":"@JvmStatic fun overridesExt(builder: PsiBuilder, level: Int , overrides: Parser): Boolean","title":"overridesExt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/overrides/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / overrides overrides var overrides: Parser?","title":"Overrides"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/overrides/#overrides","text":"var overrides: Parser?","title":"overrides"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/parameterized-java-type-ext/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / parameterizedJavaTypeExt parameterizedJavaTypeExt @JvmStatic fun parameterizedJavaTypeExt(builder: PsiBuilder, level: Int , parameterized_java_type: Parser): Boolean","title":"Parameterized java type ext"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/parameterized-java-type-ext/#parameterizedjavatypeext","text":"@JvmStatic fun parameterizedJavaTypeExt(builder: PsiBuilder, level: Int , parameterized_java_type: Parser): Boolean","title":"parameterizedJavaTypeExt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/parameterized_java_type/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / parameterized_java_type parameterized_java_type var parameterized_java_type: Parser?","title":"Parameterized java type"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/parameterized_java_type/#parameterized_java_type","text":"var parameterized_java_type: Parser?","title":"parameterized_java_type"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/reset/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / reset reset fun reset(): Unit","title":"Reset"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/reset/#reset","text":"fun reset(): Unit","title":"reset"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt-clojure-ext/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / stmtClojureExt stmtClojureExt @JvmStatic fun stmtClojureExt(builder: PsiBuilder, level: Int , stmt_clojure: Parser): Boolean","title":"Stmt clojure ext"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt-clojure-ext/#stmtclojureext","text":"@JvmStatic fun stmtClojureExt(builder: PsiBuilder, level: Int , stmt_clojure: Parser): Boolean","title":"stmtClojureExt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt-clojure-stmt-list-ext/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / stmtClojureStmtListExt stmtClojureStmtListExt @JvmStatic fun stmtClojureStmtListExt(builder: PsiBuilder, level: Int , stmt_clojure_stmt_list: Parser): Boolean","title":"Stmt clojure stmt list ext"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt-clojure-stmt-list-ext/#stmtclojurestmtlistext","text":"@JvmStatic fun stmtClojureStmtListExt(builder: PsiBuilder, level: Int , stmt_clojure_stmt_list: Parser): Boolean","title":"stmtClojureStmtListExt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt-identifier-clojure-ext/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / stmtIdentifierClojureExt stmtIdentifierClojureExt @JvmStatic fun stmtIdentifierClojureExt(builder: PsiBuilder, level: Int , stmt_identifier_clojure: Parser): Boolean","title":"Stmt identifier clojure ext"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt-identifier-clojure-ext/#stmtidentifierclojureext","text":"@JvmStatic fun stmtIdentifierClojureExt(builder: PsiBuilder, level: Int , stmt_identifier_clojure: Parser): Boolean","title":"stmtIdentifierClojureExt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt-identifier-ext/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / stmtIdentifierExt stmtIdentifierExt @JvmStatic fun stmtIdentifierExt(builder: PsiBuilder, level: Int , stmt_identifier: Parser): Boolean","title":"Stmt identifier ext"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt-identifier-ext/#stmtidentifierext","text":"@JvmStatic fun stmtIdentifierExt(builder: PsiBuilder, level: Int , stmt_identifier: Parser): Boolean","title":"stmtIdentifierExt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt-list-ext/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / stmtListExt stmtListExt @JvmStatic fun stmtListExt(builder: PsiBuilder, level: Int , stmt_list: Parser): Boolean","title":"Stmt list ext"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt-list-ext/#stmtlistext","text":"@JvmStatic fun stmtListExt(builder: PsiBuilder, level: Int , stmt_list: Parser): Boolean","title":"stmtListExt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt_clojure/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / stmt_clojure stmt_clojure var stmt_clojure: Parser?","title":"Stmt clojure"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt_clojure/#stmt_clojure","text":"var stmt_clojure: Parser?","title":"stmt_clojure"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt_clojure_stmt_list/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / stmt_clojure_stmt_list stmt_clojure_stmt_list var stmt_clojure_stmt_list: Parser?","title":"Stmt clojure stmt list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt_clojure_stmt_list/#stmt_clojure_stmt_list","text":"var stmt_clojure_stmt_list: Parser?","title":"stmt_clojure_stmt_list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt_identifier/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / stmt_identifier stmt_identifier var stmt_identifier: Parser?","title":"Stmt identifier"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt_identifier/#stmt_identifier","text":"var stmt_identifier: Parser?","title":"stmt_identifier"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt_identifier_clojure/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / stmt_identifier_clojure stmt_identifier_clojure var stmt_identifier_clojure: Parser?","title":"Stmt identifier clojure"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt_identifier_clojure/#stmt_identifier_clojure","text":"var stmt_identifier_clojure: Parser?","title":"stmt_identifier_clojure"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt_list/","text":"sqldelight-compiler / com.squareup.sqldelight.core / SqldelightParserUtil / stmt_list stmt_list var stmt_list: Parser?","title":"Stmt list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core/-sqldelight-parser-util/stmt_list/#stmt_list","text":"var stmt_list: Parser?","title":"stmt_list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler Package com.squareup.sqldelight.core.compiler Types Name Summary ExecuteQueryGenerator open class ExecuteQueryGenerator : QueryGenerator MutatorQueryGenerator class MutatorQueryGenerator : ExecuteQueryGenerator QueriesTypeGenerator class QueriesTypeGenerator QueryGenerator abstract class QueryGenerator QueryInterfaceGenerator class QueryInterfaceGenerator SelectQueryGenerator class SelectQueryGenerator : QueryGenerator SqlDelightCompiler object SqlDelightCompiler","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/#package-comsquareupsqldelightcorecompiler","text":"","title":"Package com.squareup.sqldelight.core.compiler"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/#types","text":"Name Summary ExecuteQueryGenerator open class ExecuteQueryGenerator : QueryGenerator MutatorQueryGenerator class MutatorQueryGenerator : ExecuteQueryGenerator QueriesTypeGenerator class QueriesTypeGenerator QueryGenerator abstract class QueryGenerator QueryInterfaceGenerator class QueryInterfaceGenerator SelectQueryGenerator class SelectQueryGenerator : QueryGenerator SqlDelightCompiler object SqlDelightCompiler","title":"Types"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-execute-query-generator/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler / ExecuteQueryGenerator ExecuteQueryGenerator open class ExecuteQueryGenerator : QueryGenerator Constructors Name Summary <init> ExecuteQueryGenerator(query: NamedExecute ) Functions Name Summary function fun function(): FunSpec The public api to execute query interfaceFunction fun interfaceFunction(): Builder value fun value(): PropertySpec Inherited Functions Name Summary addJavadoc fun addJavadoc(builder: Builder): Unit executeBlock fun executeBlock(): CodeBlock Creates the block of code that prepares query as a prepared statement and binds the arguments to it. This code block does not make any use of class fields, and only populates a single variable STATEMENT_NAME Inheritors Name Summary MutatorQueryGenerator class MutatorQueryGenerator : ExecuteQueryGenerator","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-execute-query-generator/#executequerygenerator","text":"open class ExecuteQueryGenerator : QueryGenerator","title":"ExecuteQueryGenerator"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-execute-query-generator/#constructors","text":"Name Summary <init> ExecuteQueryGenerator(query: NamedExecute )","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-execute-query-generator/#functions","text":"Name Summary function fun function(): FunSpec The public api to execute query interfaceFunction fun interfaceFunction(): Builder value fun value(): PropertySpec","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-execute-query-generator/#inherited-functions","text":"Name Summary addJavadoc fun addJavadoc(builder: Builder): Unit executeBlock fun executeBlock(): CodeBlock Creates the block of code that prepares query as a prepared statement and binds the arguments to it. This code block does not make any use of class fields, and only populates a single variable STATEMENT_NAME","title":"Inherited Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-execute-query-generator/#inheritors","text":"Name Summary MutatorQueryGenerator class MutatorQueryGenerator : ExecuteQueryGenerator","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-execute-query-generator/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler / ExecuteQueryGenerator / <init> <init> ExecuteQueryGenerator(query: NamedExecute )","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-execute-query-generator/-init-/#init","text":"ExecuteQueryGenerator(query: NamedExecute )","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-execute-query-generator/function/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler / ExecuteQueryGenerator / function function fun function(): FunSpec The public api to execute query","title":"Function"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-execute-query-generator/function/#function","text":"fun function(): FunSpec The public api to execute query","title":"function"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-execute-query-generator/interface-function/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler / ExecuteQueryGenerator / interfaceFunction interfaceFunction fun interfaceFunction(): Builder","title":"Interface function"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-execute-query-generator/interface-function/#interfacefunction","text":"fun interfaceFunction(): Builder","title":"interfaceFunction"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-execute-query-generator/notify-queries/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler / ExecuteQueryGenerator / notifyQueries notifyQueries protected open fun Builder.notifyQueries(): Builder","title":"notifyQueries - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-execute-query-generator/notify-queries/#notifyqueries","text":"protected open fun Builder.notifyQueries(): Builder","title":"notifyQueries"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-execute-query-generator/value/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler / ExecuteQueryGenerator / value value fun value(): PropertySpec","title":"Value"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-execute-query-generator/value/#value","text":"fun value(): PropertySpec","title":"value"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-mutator-query-generator/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler / MutatorQueryGenerator MutatorQueryGenerator class MutatorQueryGenerator : ExecuteQueryGenerator Constructors Name Summary <init> MutatorQueryGenerator(query: NamedMutator ) Inherited Functions Name Summary function fun function(): FunSpec The public api to execute query interfaceFunction fun interfaceFunction(): Builder value fun value(): PropertySpec","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-mutator-query-generator/#mutatorquerygenerator","text":"class MutatorQueryGenerator : ExecuteQueryGenerator","title":"MutatorQueryGenerator"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-mutator-query-generator/#constructors","text":"Name Summary <init> MutatorQueryGenerator(query: NamedMutator )","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-mutator-query-generator/#inherited-functions","text":"Name Summary function fun function(): FunSpec The public api to execute query interfaceFunction fun interfaceFunction(): Builder value fun value(): PropertySpec","title":"Inherited Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-mutator-query-generator/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler / MutatorQueryGenerator / <init> <init> MutatorQueryGenerator(query: NamedMutator )","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-mutator-query-generator/-init-/#init","text":"MutatorQueryGenerator(query: NamedMutator )","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-mutator-query-generator/notify-queries/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler / MutatorQueryGenerator / notifyQueries notifyQueries protected fun Builder.notifyQueries(): Builder Overrides ExecuteQueryGenerator.notifyQueries","title":"notifyQueries - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-mutator-query-generator/notify-queries/#notifyqueries","text":"protected fun Builder.notifyQueries(): Builder Overrides ExecuteQueryGenerator.notifyQueries","title":"notifyQueries"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-queries-type-generator/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler / QueriesTypeGenerator QueriesTypeGenerator class QueriesTypeGenerator Constructors Name Summary <init> QueriesTypeGenerator(module: Module, file: SqlDelightQueriesFile ) Functions Name Summary generateType fun generateType(packageName: String ): TypeSpec Generate the full queries object - done once per file, containing all labeled select and mutator queries. interfaceType fun interfaceType(): TypeSpec","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-queries-type-generator/#queriestypegenerator","text":"class QueriesTypeGenerator","title":"QueriesTypeGenerator"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-queries-type-generator/#constructors","text":"Name Summary <init> QueriesTypeGenerator(module: Module, file: SqlDelightQueriesFile )","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-queries-type-generator/#functions","text":"Name Summary generateType fun generateType(packageName: String ): TypeSpec Generate the full queries object - done once per file, containing all labeled select and mutator queries. interfaceType fun interfaceType(): TypeSpec","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-queries-type-generator/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler / QueriesTypeGenerator / <init> <init> QueriesTypeGenerator(module: Module, file: SqlDelightQueriesFile )","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-queries-type-generator/-init-/#init","text":"QueriesTypeGenerator(module: Module, file: SqlDelightQueriesFile )","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-queries-type-generator/generate-type/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler / QueriesTypeGenerator / generateType generateType fun generateType(packageName: String ): TypeSpec Generate the full queries object - done once per file, containing all labeled select and mutator queries. eg: class DataQueries( private val queryWrapper: QueryWrapper, private val driver: SqlDriver, transactions: ThreadLocal<Transacter.Transaction> ) : TransacterImpl(driver, transactions)","title":"Generate type"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-queries-type-generator/generate-type/#generatetype","text":"fun generateType(packageName: String ): TypeSpec Generate the full queries object - done once per file, containing all labeled select and mutator queries. eg: class DataQueries( private val queryWrapper: QueryWrapper, private val driver: SqlDriver, transactions: ThreadLocal<Transacter.Transaction> ) : TransacterImpl(driver, transactions)","title":"generateType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-queries-type-generator/interface-type/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler / QueriesTypeGenerator / interfaceType interfaceType fun interfaceType(): TypeSpec","title":"Interface type"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-queries-type-generator/interface-type/#interfacetype","text":"fun interfaceType(): TypeSpec","title":"interfaceType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-generator/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler / QueryGenerator QueryGenerator abstract class QueryGenerator Constructors Name Summary <init> QueryGenerator(query: BindableQuery ) Functions Name Summary addJavadoc fun addJavadoc(builder: Builder): Unit executeBlock fun executeBlock(): CodeBlock Creates the block of code that prepares query as a prepared statement and binds the arguments to it. This code block does not make any use of class fields, and only populates a single variable STATEMENT_NAME Inheritors Name Summary ExecuteQueryGenerator open class ExecuteQueryGenerator : QueryGenerator SelectQueryGenerator class SelectQueryGenerator : QueryGenerator","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-generator/#querygenerator","text":"abstract class QueryGenerator","title":"QueryGenerator"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-generator/#constructors","text":"Name Summary <init> QueryGenerator(query: BindableQuery )","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-generator/#functions","text":"Name Summary addJavadoc fun addJavadoc(builder: Builder): Unit executeBlock fun executeBlock(): CodeBlock Creates the block of code that prepares query as a prepared statement and binds the arguments to it. This code block does not make any use of class fields, and only populates a single variable STATEMENT_NAME","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-generator/#inheritors","text":"Name Summary ExecuteQueryGenerator open class ExecuteQueryGenerator : QueryGenerator SelectQueryGenerator class SelectQueryGenerator : QueryGenerator","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-generator/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler / QueryGenerator / <init> <init> QueryGenerator(query: BindableQuery )","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-generator/-init-/#init","text":"QueryGenerator(query: BindableQuery )","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-generator/add-javadoc/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler / QueryGenerator / addJavadoc addJavadoc protected fun addJavadoc(builder: Builder): Unit","title":"Add javadoc"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-generator/add-javadoc/#addjavadoc","text":"protected fun addJavadoc(builder: Builder): Unit","title":"addJavadoc"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-generator/execute-block/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler / QueryGenerator / executeBlock executeBlock protected fun executeBlock(): CodeBlock Creates the block of code that prepares query as a prepared statement and binds the arguments to it. This code block does not make any use of class fields, and only populates a single variable STATEMENT_NAME val numberIndexes = createArguments(count = number.size) val statement = database.prepareStatement(\"\"\" |SELECT * |FROM player |WHERE number IN $numberIndexes \"\"\".trimMargin(), SqlPreparedStatement.Type.SELECT, 1 + (number.size - 1)) number.forEachIndexed { index, number -> statement.bindLong(index + 2, number) }","title":"Execute block"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-generator/execute-block/#executeblock","text":"protected fun executeBlock(): CodeBlock Creates the block of code that prepares query as a prepared statement and binds the arguments to it. This code block does not make any use of class fields, and only populates a single variable STATEMENT_NAME val numberIndexes = createArguments(count = number.size) val statement = database.prepareStatement(\"\"\" |SELECT * |FROM player |WHERE number IN $numberIndexes \"\"\".trimMargin(), SqlPreparedStatement.Type.SELECT, 1 + (number.size - 1)) number.forEachIndexed { index, number -> statement.bindLong(index + 2, number) }","title":"executeBlock"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-interface-generator/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler / QueryInterfaceGenerator QueryInterfaceGenerator class QueryInterfaceGenerator Constructors Name Summary <init> QueryInterfaceGenerator(query: NamedQuery ) Properties Name Summary query val query: NamedQuery Functions Name Summary kotlinImplementationSpec fun kotlinImplementationSpec(): TypeSpec","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-interface-generator/#queryinterfacegenerator","text":"class QueryInterfaceGenerator","title":"QueryInterfaceGenerator"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-interface-generator/#constructors","text":"Name Summary <init> QueryInterfaceGenerator(query: NamedQuery )","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-interface-generator/#properties","text":"Name Summary query val query: NamedQuery","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-interface-generator/#functions","text":"Name Summary kotlinImplementationSpec fun kotlinImplementationSpec(): TypeSpec","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-interface-generator/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler / QueryInterfaceGenerator / <init> <init> QueryInterfaceGenerator(query: NamedQuery )","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-interface-generator/-init-/#init","text":"QueryInterfaceGenerator(query: NamedQuery )","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-interface-generator/kotlin-implementation-spec/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler / QueryInterfaceGenerator / kotlinImplementationSpec kotlinImplementationSpec fun kotlinImplementationSpec(): TypeSpec","title":"Kotlin implementation spec"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-interface-generator/kotlin-implementation-spec/#kotlinimplementationspec","text":"fun kotlinImplementationSpec(): TypeSpec","title":"kotlinImplementationSpec"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-interface-generator/query/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler / QueryInterfaceGenerator / query query val query: NamedQuery","title":"Query"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-query-interface-generator/query/#query","text":"val query: NamedQuery","title":"query"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler / SelectQueryGenerator SelectQueryGenerator class SelectQueryGenerator : QueryGenerator Constructors Name Summary <init> SelectQueryGenerator(query: NamedQuery ) Functions Name Summary customResultTypeFunction fun customResultTypeFunction(): FunSpec The exposed query method which returns a provided custom type. customResultTypeFunctionInterface fun customResultTypeFunctionInterface(): Builder defaultResultTypeFunction fun defaultResultTypeFunction(): FunSpec The exposed query method which returns the default data class implementation. defaultResultTypeFunctionInterface fun defaultResultTypeFunctionInterface(): Builder queryCollectionProperty fun queryCollectionProperty(): PropertySpec The private property used to delegate query result updates. querySubtype fun querySubtype(): TypeSpec The private query subtype for this specific query. Inherited Functions Name Summary addJavadoc fun addJavadoc(builder: Builder): Unit executeBlock fun executeBlock(): CodeBlock Creates the block of code that prepares query as a prepared statement and binds the arguments to it. This code block does not make any use of class fields, and only populates a single variable STATEMENT_NAME","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/#selectquerygenerator","text":"class SelectQueryGenerator : QueryGenerator","title":"SelectQueryGenerator"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/#constructors","text":"Name Summary <init> SelectQueryGenerator(query: NamedQuery )","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/#functions","text":"Name Summary customResultTypeFunction fun customResultTypeFunction(): FunSpec The exposed query method which returns a provided custom type. customResultTypeFunctionInterface fun customResultTypeFunctionInterface(): Builder defaultResultTypeFunction fun defaultResultTypeFunction(): FunSpec The exposed query method which returns the default data class implementation. defaultResultTypeFunctionInterface fun defaultResultTypeFunctionInterface(): Builder queryCollectionProperty fun queryCollectionProperty(): PropertySpec The private property used to delegate query result updates. querySubtype fun querySubtype(): TypeSpec The private query subtype for this specific query.","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/#inherited-functions","text":"Name Summary addJavadoc fun addJavadoc(builder: Builder): Unit executeBlock fun executeBlock(): CodeBlock Creates the block of code that prepares query as a prepared statement and binds the arguments to it. This code block does not make any use of class fields, and only populates a single variable STATEMENT_NAME","title":"Inherited Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler / SelectQueryGenerator / <init> <init> SelectQueryGenerator(query: NamedQuery )","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/-init-/#init","text":"SelectQueryGenerator(query: NamedQuery )","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/custom-result-type-function-interface/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler / SelectQueryGenerator / customResultTypeFunctionInterface customResultTypeFunctionInterface fun customResultTypeFunctionInterface(): Builder","title":"Custom result type function interface"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/custom-result-type-function-interface/#customresulttypefunctioninterface","text":"fun customResultTypeFunctionInterface(): Builder","title":"customResultTypeFunctionInterface"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/custom-result-type-function/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler / SelectQueryGenerator / customResultTypeFunction customResultTypeFunction fun customResultTypeFunction(): FunSpec The exposed query method which returns a provided custom type. fun <T> selectForId(id, mapper: (column1: String) -> T): Query<T>","title":"Custom result type function"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/custom-result-type-function/#customresulttypefunction","text":"fun customResultTypeFunction(): FunSpec The exposed query method which returns a provided custom type. fun <T> selectForId(id, mapper: (column1: String) -> T): Query<T>","title":"customResultTypeFunction"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/default-result-type-function-interface/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler / SelectQueryGenerator / defaultResultTypeFunctionInterface defaultResultTypeFunctionInterface fun defaultResultTypeFunctionInterface(): Builder","title":"Default result type function interface"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/default-result-type-function-interface/#defaultresulttypefunctioninterface","text":"fun defaultResultTypeFunctionInterface(): Builder","title":"defaultResultTypeFunctionInterface"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/default-result-type-function/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler / SelectQueryGenerator / defaultResultTypeFunction defaultResultTypeFunction fun defaultResultTypeFunction(): FunSpec The exposed query method which returns the default data class implementation. fun selectForId(id: Int): Query<Data>","title":"Default result type function"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/default-result-type-function/#defaultresulttypefunction","text":"fun defaultResultTypeFunction(): FunSpec The exposed query method which returns the default data class implementation. fun selectForId(id: Int): Query<Data>","title":"defaultResultTypeFunction"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/query-collection-property/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler / SelectQueryGenerator / queryCollectionProperty queryCollectionProperty fun queryCollectionProperty(): PropertySpec The private property used to delegate query result updates. private val selectForId: MutableList<Query<*>> = mutableListOf()","title":"Query collection property"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/query-collection-property/#querycollectionproperty","text":"fun queryCollectionProperty(): PropertySpec The private property used to delegate query result updates. private val selectForId: MutableList<Query<*>> = mutableListOf()","title":"queryCollectionProperty"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/query-subtype/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler / SelectQueryGenerator / querySubtype querySubtype fun querySubtype(): TypeSpec The private query subtype for this specific query. private class SelectForIdQuery<out T>( private val _id: Int, mapper: (SqlResultSet) -> T ) : Query<T>(statement, selectForId, mapper) { private inner class SelectForIdQuery<out T>( private val _id: Int, mapper: (Cursor) -> T ): Query<T>(database.helper, selectForId, mapper)","title":"Query subtype"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-select-query-generator/query-subtype/#querysubtype","text":"fun querySubtype(): TypeSpec The private query subtype for this specific query. private class SelectForIdQuery<out T>( private val _id: Int, mapper: (SqlResultSet) -> T ) : Query<T>(statement, selectForId, mapper) { private inner class SelectForIdQuery<out T>( private val _id: Int, mapper: (Cursor) -> T ): Query<T>(database.helper, selectForId, mapper)","title":"querySubtype"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-sql-delight-compiler/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler / SqlDelightCompiler SqlDelightCompiler object SqlDelightCompiler Functions Name Summary writeDatabaseInterface fun writeDatabaseInterface(module: Module, file: SqlDelightFile , implementationFolder: String , output: FileAppender): Unit writeImplementations fun writeImplementations(module: Module, sourceFile: SqlDelightQueriesFile , implementationFolder: String , output: FileAppender): Unit writeInterfaces fun writeInterfaces(module: Module, file: SqlDelightQueriesFile , implementationFolder: String , output: FileAppender): Unit fun writeInterfaces(module: Module, file: MigrationFile , implementationFolder: String , output: FileAppender, includeAll: Boolean = false): Unit","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-sql-delight-compiler/#sqldelightcompiler","text":"object SqlDelightCompiler","title":"SqlDelightCompiler"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-sql-delight-compiler/#functions","text":"Name Summary writeDatabaseInterface fun writeDatabaseInterface(module: Module, file: SqlDelightFile , implementationFolder: String , output: FileAppender): Unit writeImplementations fun writeImplementations(module: Module, sourceFile: SqlDelightQueriesFile , implementationFolder: String , output: FileAppender): Unit writeInterfaces fun writeInterfaces(module: Module, file: SqlDelightQueriesFile , implementationFolder: String , output: FileAppender): Unit fun writeInterfaces(module: Module, file: MigrationFile , implementationFolder: String , output: FileAppender, includeAll: Boolean = false): Unit","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-sql-delight-compiler/write-database-interface/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler / SqlDelightCompiler / writeDatabaseInterface writeDatabaseInterface fun writeDatabaseInterface(module: Module, file: SqlDelightFile , implementationFolder: String , output: FileAppender): Unit","title":"Write database interface"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-sql-delight-compiler/write-database-interface/#writedatabaseinterface","text":"fun writeDatabaseInterface(module: Module, file: SqlDelightFile , implementationFolder: String , output: FileAppender): Unit","title":"writeDatabaseInterface"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-sql-delight-compiler/write-implementations/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler / SqlDelightCompiler / writeImplementations writeImplementations fun writeImplementations(module: Module, sourceFile: SqlDelightQueriesFile , implementationFolder: String , output: FileAppender): Unit","title":"Write implementations"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-sql-delight-compiler/write-implementations/#writeimplementations","text":"fun writeImplementations(module: Module, sourceFile: SqlDelightQueriesFile , implementationFolder: String , output: FileAppender): Unit","title":"writeImplementations"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-sql-delight-compiler/write-interfaces/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler / SqlDelightCompiler / writeInterfaces writeInterfaces fun writeInterfaces(module: Module, file: SqlDelightQueriesFile , implementationFolder: String , output: FileAppender): Unit fun writeInterfaces(module: Module, file: MigrationFile , implementationFolder: String , output: FileAppender, includeAll: Boolean = false): Unit","title":"Write interfaces"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler/-sql-delight-compiler/write-interfaces/#writeinterfaces","text":"fun writeInterfaces(module: Module, file: SqlDelightQueriesFile , implementationFolder: String , output: FileAppender): Unit fun writeInterfaces(module: Module, file: MigrationFile , implementationFolder: String , output: FileAppender, includeAll: Boolean = false): Unit","title":"writeInterfaces"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler.model Package com.squareup.sqldelight.core.compiler.model Types Name Summary BindableQuery abstract class BindableQuery NamedExecute open class NamedExecute : BindableQuery NamedMutator sealed class NamedMutator : NamedExecute NamedQuery data class NamedQuery : BindableQuery","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/#package-comsquareupsqldelightcorecompilermodel","text":"","title":"Package com.squareup.sqldelight.core.compiler.model"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/#types","text":"Name Summary BindableQuery abstract class BindableQuery NamedExecute open class NamedExecute : BindableQuery NamedMutator sealed class NamedMutator : NamedExecute NamedQuery data class NamedQuery : BindableQuery","title":"Types"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-bindable-query/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / BindableQuery BindableQuery abstract class BindableQuery Constructors Name Summary <init> BindableQuery(identifier: PsiElement?, statement: PsiElement) Properties Name Summary id abstract val id: Int Companion Object Properties Name Summary queryIdMap val queryIdMap: ConcurrentHashMap < String , Int > The query id map use to avoid string hashcode collision. Ideally this map should be per module. Companion Object Functions Name Summary getUniqueQueryIdentifier fun getUniqueQueryIdentifier(qualifiedQueryName: String ): Int Use the hashcode of qualifiedQueryName to generate the unique identifier id for queries. Detect the hashcode collision by caching the generated identifiers. Runtime exception will be thrown when collision happens. Client would need to give a different query name to avoid the collision. Inheritors Name Summary NamedExecute open class NamedExecute : BindableQuery NamedQuery data class NamedQuery : BindableQuery","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-bindable-query/#bindablequery","text":"abstract class BindableQuery","title":"BindableQuery"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-bindable-query/#constructors","text":"Name Summary <init> BindableQuery(identifier: PsiElement?, statement: PsiElement)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-bindable-query/#properties","text":"Name Summary id abstract val id: Int","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-bindable-query/#companion-object-properties","text":"Name Summary queryIdMap val queryIdMap: ConcurrentHashMap < String , Int > The query id map use to avoid string hashcode collision. Ideally this map should be per module.","title":"Companion Object Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-bindable-query/#companion-object-functions","text":"Name Summary getUniqueQueryIdentifier fun getUniqueQueryIdentifier(qualifiedQueryName: String ): Int Use the hashcode of qualifiedQueryName to generate the unique identifier id for queries. Detect the hashcode collision by caching the generated identifiers. Runtime exception will be thrown when collision happens. Client would need to give a different query name to avoid the collision.","title":"Companion Object Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-bindable-query/#inheritors","text":"Name Summary NamedExecute open class NamedExecute : BindableQuery NamedQuery data class NamedQuery : BindableQuery","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-bindable-query/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / BindableQuery / <init> <init> BindableQuery(identifier: PsiElement?, statement: PsiElement)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-bindable-query/-init-/#init","text":"BindableQuery(identifier: PsiElement?, statement: PsiElement)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-bindable-query/get-unique-query-identifier/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / BindableQuery / getUniqueQueryIdentifier getUniqueQueryIdentifier fun getUniqueQueryIdentifier(qualifiedQueryName: String ): Int Use the hashcode of qualifiedQueryName to generate the unique identifier id for queries. Detect the hashcode collision by caching the generated identifiers. Runtime exception will be thrown when collision happens. Client would need to give a different query name to avoid the collision.","title":"Get unique query identifier"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-bindable-query/get-unique-query-identifier/#getuniquequeryidentifier","text":"fun getUniqueQueryIdentifier(qualifiedQueryName: String ): Int Use the hashcode of qualifiedQueryName to generate the unique identifier id for queries. Detect the hashcode collision by caching the generated identifiers. Runtime exception will be thrown when collision happens. Client would need to give a different query name to avoid the collision.","title":"getUniqueQueryIdentifier"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-bindable-query/id/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / BindableQuery / id id abstract val id: Int","title":"Id"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-bindable-query/id/#id","text":"abstract val id: Int","title":"id"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-bindable-query/query-id-map/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / BindableQuery / queryIdMap queryIdMap val queryIdMap: ConcurrentHashMap < String , Int > The query id map use to avoid string hashcode collision. Ideally this map should be per module.","title":"Query id map"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-bindable-query/query-id-map/#queryidmap","text":"val queryIdMap: ConcurrentHashMap < String , Int > The query id map use to avoid string hashcode collision. Ideally this map should be per module.","title":"queryIdMap"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-execute/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / NamedExecute NamedExecute open class NamedExecute : BindableQuery Constructors Name Summary <init> NamedExecute(identifier: StmtIdentifierMixin , statement: PsiElement) Properties Name Summary id open val id: Int name val name: String Inheritors Name Summary NamedMutator sealed class NamedMutator : NamedExecute","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-execute/#namedexecute","text":"open class NamedExecute : BindableQuery","title":"NamedExecute"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-execute/#constructors","text":"Name Summary <init> NamedExecute(identifier: StmtIdentifierMixin , statement: PsiElement)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-execute/#properties","text":"Name Summary id open val id: Int name val name: String","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-execute/#inheritors","text":"Name Summary NamedMutator sealed class NamedMutator : NamedExecute","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-execute/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / NamedExecute / <init> <init> NamedExecute(identifier: StmtIdentifierMixin , statement: PsiElement)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-execute/-init-/#init","text":"NamedExecute(identifier: StmtIdentifierMixin , statement: PsiElement)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-execute/id/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / NamedExecute / id id open val id: Int Overrides BindableQuery.id","title":"Id"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-execute/id/#id","text":"open val id: Int Overrides BindableQuery.id","title":"id"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-execute/name/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / NamedExecute / name name val name: String","title":"Name"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-execute/name/#name","text":"val name: String","title":"name"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / NamedMutator NamedMutator sealed class NamedMutator : NamedExecute Types Name Summary Delete class Delete : NamedMutator Insert class Insert : NamedMutator Update class Update : NamedMutator Properties Name Summary containingFile val containingFile: SqlDelightQueriesFile Inherited Properties Name Summary id open val id: Int name val name: String Inheritors Name Summary Delete class Delete : NamedMutator Insert class Insert : NamedMutator Update class Update : NamedMutator","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/#namedmutator","text":"sealed class NamedMutator : NamedExecute","title":"NamedMutator"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/#types","text":"Name Summary Delete class Delete : NamedMutator Insert class Insert : NamedMutator Update class Update : NamedMutator","title":"Types"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/#properties","text":"Name Summary containingFile val containingFile: SqlDelightQueriesFile","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/#inherited-properties","text":"Name Summary id open val id: Int name val name: String","title":"Inherited Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/#inheritors","text":"Name Summary Delete class Delete : NamedMutator Insert class Insert : NamedMutator Update class Update : NamedMutator","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/containing-file/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / NamedMutator / containingFile containingFile val containingFile: SqlDelightQueriesFile","title":"Containing file"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/containing-file/#containingfile","text":"val containingFile: SqlDelightQueriesFile","title":"containingFile"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/-delete/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / NamedMutator / Delete Delete class Delete : NamedMutator Constructors Name Summary <init> Delete(delete: SqlDeleteStmtLimited, identifier: StmtIdentifierMixin ) Inherited Properties Name Summary containingFile val containingFile: SqlDelightQueriesFile","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/-delete/#delete","text":"class Delete : NamedMutator","title":"Delete"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/-delete/#constructors","text":"Name Summary <init> Delete(delete: SqlDeleteStmtLimited, identifier: StmtIdentifierMixin )","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/-delete/#inherited-properties","text":"Name Summary containingFile val containingFile: SqlDelightQueriesFile","title":"Inherited Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/-delete/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / NamedMutator / Delete / <init> <init> Delete(delete: SqlDeleteStmtLimited, identifier: StmtIdentifierMixin )","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/-delete/-init-/#init","text":"Delete(delete: SqlDeleteStmtLimited, identifier: StmtIdentifierMixin )","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/-insert/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / NamedMutator / Insert Insert class Insert : NamedMutator Constructors Name Summary <init> Insert(insert: SqlInsertStmt, identifier: StmtIdentifierMixin ) Inherited Properties Name Summary containingFile val containingFile: SqlDelightQueriesFile","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/-insert/#insert","text":"class Insert : NamedMutator","title":"Insert"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/-insert/#constructors","text":"Name Summary <init> Insert(insert: SqlInsertStmt, identifier: StmtIdentifierMixin )","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/-insert/#inherited-properties","text":"Name Summary containingFile val containingFile: SqlDelightQueriesFile","title":"Inherited Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/-insert/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / NamedMutator / Insert / <init> <init> Insert(insert: SqlInsertStmt, identifier: StmtIdentifierMixin )","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/-insert/-init-/#init","text":"Insert(insert: SqlInsertStmt, identifier: StmtIdentifierMixin )","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/-update/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / NamedMutator / Update Update class Update : NamedMutator Constructors Name Summary <init> Update(update: SqlUpdateStmtLimited, identifier: StmtIdentifierMixin ) Inherited Properties Name Summary containingFile val containingFile: SqlDelightQueriesFile","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/-update/#update","text":"class Update : NamedMutator","title":"Update"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/-update/#constructors","text":"Name Summary <init> Update(update: SqlUpdateStmtLimited, identifier: StmtIdentifierMixin )","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/-update/#inherited-properties","text":"Name Summary containingFile val containingFile: SqlDelightQueriesFile","title":"Inherited Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/-update/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / NamedMutator / Update / <init> <init> Update(update: SqlUpdateStmtLimited, identifier: StmtIdentifierMixin )","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-mutator/-update/-init-/#init","text":"Update(update: SqlUpdateStmtLimited, identifier: StmtIdentifierMixin )","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-query/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / NamedQuery NamedQuery data class NamedQuery : BindableQuery Constructors Name Summary <init> NamedQuery(name: String , select: SqlCompoundSelectStmt, statementIdentifier: PsiElement? = null) Properties Name Summary id val id: Int name val name: String select val select: SqlCompoundSelectStmt","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-query/#namedquery","text":"data class NamedQuery : BindableQuery","title":"NamedQuery"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-query/#constructors","text":"Name Summary <init> NamedQuery(name: String , select: SqlCompoundSelectStmt, statementIdentifier: PsiElement? = null)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-query/#properties","text":"Name Summary id val id: Int name val name: String select val select: SqlCompoundSelectStmt","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-query/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / NamedQuery / <init> <init> NamedQuery(name: String , select: SqlCompoundSelectStmt, statementIdentifier: PsiElement? = null)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-query/-init-/#init","text":"NamedQuery(name: String , select: SqlCompoundSelectStmt, statementIdentifier: PsiElement? = null)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-query/id/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / NamedQuery / id id val id: Int Overrides BindableQuery.id","title":"Id"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-query/id/#id","text":"val id: Int Overrides BindableQuery.id","title":"id"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-query/name/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / NamedQuery / name name val name: String","title":"Name"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-query/name/#name","text":"val name: String","title":"name"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-query/select/","text":"sqldelight-compiler / com.squareup.sqldelight.core.compiler.model / NamedQuery / select select val select: SqlCompoundSelectStmt","title":"Select"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.compiler.model/-named-query/select/#select","text":"val select: SqlCompoundSelectStmt","title":"select"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang Package com.squareup.sqldelight.core.lang Types Name Summary DatabaseFileType object DatabaseFileType : FileType DatabaseFileViewProviderFactory class DatabaseFileViewProviderFactory : FileViewProviderFactory MigrationFile class MigrationFile : SqlDelightFile MigrationFileType object MigrationFileType : LanguageFileType MigrationLanguage object MigrationLanguage : Language MigrationParserDefinition class MigrationParserDefinition : SqlParserDefinition SqlDelightFile abstract class SqlDelightFile : SqlFileBase SqlDelightFileType object SqlDelightFileType : LanguageFileType SqlDelightLanguage object SqlDelightLanguage : Language SqlDelightParserDefinition class SqlDelightParserDefinition : SqlParserDefinition SqlDelightQueriesFile class SqlDelightQueriesFile : SqlDelightFile , SqlAnnotatedElement Extensions for External Classes Name Summary com.alecstrong.sql.psi.core.psi.SqlInsertStmt com.intellij.openapi.vfs.VirtualFile","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/#package-comsquareupsqldelightcorelang","text":"","title":"Package com.squareup.sqldelight.core.lang"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/#types","text":"Name Summary DatabaseFileType object DatabaseFileType : FileType DatabaseFileViewProviderFactory class DatabaseFileViewProviderFactory : FileViewProviderFactory MigrationFile class MigrationFile : SqlDelightFile MigrationFileType object MigrationFileType : LanguageFileType MigrationLanguage object MigrationLanguage : Language MigrationParserDefinition class MigrationParserDefinition : SqlParserDefinition SqlDelightFile abstract class SqlDelightFile : SqlFileBase SqlDelightFileType object SqlDelightFileType : LanguageFileType SqlDelightLanguage object SqlDelightLanguage : Language SqlDelightParserDefinition class SqlDelightParserDefinition : SqlParserDefinition SqlDelightQueriesFile class SqlDelightQueriesFile : SqlDelightFile , SqlAnnotatedElement","title":"Types"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/#extensions-for-external-classes","text":"Name Summary com.alecstrong.sql.psi.core.psi.SqlInsertStmt com.intellij.openapi.vfs.VirtualFile","title":"Extensions for External Classes"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-language/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationLanguage MigrationLanguage object MigrationLanguage : Language","title":" migration language"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-language/#migrationlanguage","text":"object MigrationLanguage : Language","title":"MigrationLanguage"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-language/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightLanguage SqlDelightLanguage object SqlDelightLanguage : Language","title":" sql delight language"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-language/#sqldelightlanguage","text":"object SqlDelightLanguage : Language","title":"SqlDelightLanguage"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / DatabaseFileType DatabaseFileType object DatabaseFileType : FileType Properties Name Summary EXTENSION const val EXTENSION: String Functions Name Summary getCharset fun getCharset(vFile: VirtualFile, bytes: ByteArray ): Nothing ? getDefaultExtension fun getDefaultExtension(): String getDescription fun getDescription(): String getIcon fun getIcon(): Icon getName fun getName(): String isBinary fun isBinary(): Boolean isReadOnly fun isReadOnly(): Boolean","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/#databasefiletype","text":"object DatabaseFileType : FileType","title":"DatabaseFileType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/#properties","text":"Name Summary EXTENSION const val EXTENSION: String","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/#functions","text":"Name Summary getCharset fun getCharset(vFile: VirtualFile, bytes: ByteArray ): Nothing ? getDefaultExtension fun getDefaultExtension(): String getDescription fun getDescription(): String getIcon fun getIcon(): Icon getName fun getName(): String isBinary fun isBinary(): Boolean isReadOnly fun isReadOnly(): Boolean","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/-e-x-t-e-n-s-i-o-n/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / DatabaseFileType / EXTENSION EXTENSION const val EXTENSION: String","title":" e x t e n s i o n"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/-e-x-t-e-n-s-i-o-n/#extension","text":"const val EXTENSION: String","title":"EXTENSION"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/get-charset/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / DatabaseFileType / getCharset getCharset fun getCharset(vFile: VirtualFile, bytes: ByteArray ): Nothing ?","title":"Get charset"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/get-charset/#getcharset","text":"fun getCharset(vFile: VirtualFile, bytes: ByteArray ): Nothing ?","title":"getCharset"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/get-default-extension/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / DatabaseFileType / getDefaultExtension getDefaultExtension fun getDefaultExtension(): String","title":"Get default extension"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/get-default-extension/#getdefaultextension","text":"fun getDefaultExtension(): String","title":"getDefaultExtension"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/get-description/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / DatabaseFileType / getDescription getDescription fun getDescription(): String","title":"Get description"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/get-description/#getdescription","text":"fun getDescription(): String","title":"getDescription"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/get-icon/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / DatabaseFileType / getIcon getIcon fun getIcon(): Icon","title":"Get icon"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/get-icon/#geticon","text":"fun getIcon(): Icon","title":"getIcon"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/get-name/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / DatabaseFileType / getName getName fun getName(): String","title":"Get name"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/get-name/#getname","text":"fun getName(): String","title":"getName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/is-binary/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / DatabaseFileType / isBinary isBinary fun isBinary(): Boolean","title":"Is binary"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/is-binary/#isbinary","text":"fun isBinary(): Boolean","title":"isBinary"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/is-read-only/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / DatabaseFileType / isReadOnly isReadOnly fun isReadOnly(): Boolean","title":"Is read only"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-type/is-read-only/#isreadonly","text":"fun isReadOnly(): Boolean","title":"isReadOnly"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-view-provider-factory/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / DatabaseFileViewProviderFactory DatabaseFileViewProviderFactory class DatabaseFileViewProviderFactory : FileViewProviderFactory Constructors Name Summary <init> DatabaseFileViewProviderFactory() Functions Name Summary createFileViewProvider fun createFileViewProvider(vFile: VirtualFile, language: Language?, psiManager: PsiManager, eventSystemEnabled: Boolean ): FileViewProvider","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-view-provider-factory/#databasefileviewproviderfactory","text":"class DatabaseFileViewProviderFactory : FileViewProviderFactory","title":"DatabaseFileViewProviderFactory"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-view-provider-factory/#constructors","text":"Name Summary <init> DatabaseFileViewProviderFactory()","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-view-provider-factory/#functions","text":"Name Summary createFileViewProvider fun createFileViewProvider(vFile: VirtualFile, language: Language?, psiManager: PsiManager, eventSystemEnabled: Boolean ): FileViewProvider","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-view-provider-factory/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / DatabaseFileViewProviderFactory / <init> <init> DatabaseFileViewProviderFactory()","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-view-provider-factory/-init-/#init","text":"DatabaseFileViewProviderFactory()","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-view-provider-factory/create-file-view-provider/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / DatabaseFileViewProviderFactory / createFileViewProvider createFileViewProvider fun createFileViewProvider(vFile: VirtualFile, language: Language?, psiManager: PsiManager, eventSystemEnabled: Boolean ): FileViewProvider","title":"Create file view provider"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-database-file-view-provider-factory/create-file-view-provider/#createfileviewprovider","text":"fun createFileViewProvider(vFile: VirtualFile, language: Language?, psiManager: PsiManager, eventSystemEnabled: Boolean ): FileViewProvider","title":"createFileViewProvider"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationFile MigrationFile class MigrationFile : SqlDelightFile Constructors Name Summary <init> MigrationFile(viewProvider: FileViewProvider) Properties Name Summary order val order: Int version val version: Int Inherited Properties Name Summary generatedDir val generatedDir: String module val module: Module Functions Name Summary getFileType fun getFileType(): MigrationFileType iterateSqlFiles fun iterateSqlFiles(iterator: (SqlFileBase) -> Boolean ): Unit Inherited Functions Name Summary getVirtualFile open fun getVirtualFile(): VirtualFile? Extension Functions Name Summary childOfType fun PsiElement.childOfType(type: IElementType): PsiElement? fun PsiElement.childOfType(types: TokenSet): PsiElement? findChildrenOfType fun <T : PsiElement> PsiElement.findChildrenOfType(): Collection < T > nextSiblingOfType fun <T : PsiElement> PsiElement.nextSiblingOfType(): T rawSqlText fun PsiElement.rawSqlText(replacements: List < Pair < IntRange , String >> = emptyList()): String","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file/#migrationfile","text":"class MigrationFile : SqlDelightFile","title":"MigrationFile"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file/#constructors","text":"Name Summary <init> MigrationFile(viewProvider: FileViewProvider)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file/#properties","text":"Name Summary order val order: Int version val version: Int","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file/#inherited-properties","text":"Name Summary generatedDir val generatedDir: String module val module: Module","title":"Inherited Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file/#functions","text":"Name Summary getFileType fun getFileType(): MigrationFileType iterateSqlFiles fun iterateSqlFiles(iterator: (SqlFileBase) -> Boolean ): Unit","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file/#inherited-functions","text":"Name Summary getVirtualFile open fun getVirtualFile(): VirtualFile?","title":"Inherited Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file/#extension-functions","text":"Name Summary childOfType fun PsiElement.childOfType(type: IElementType): PsiElement? fun PsiElement.childOfType(types: TokenSet): PsiElement? findChildrenOfType fun <T : PsiElement> PsiElement.findChildrenOfType(): Collection < T > nextSiblingOfType fun <T : PsiElement> PsiElement.nextSiblingOfType(): T rawSqlText fun PsiElement.rawSqlText(replacements: List < Pair < IntRange , String >> = emptyList()): String","title":"Extension Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationFile / <init> <init> MigrationFile(viewProvider: FileViewProvider)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file/-init-/#init","text":"MigrationFile(viewProvider: FileViewProvider)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file/get-file-type/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationFile / getFileType getFileType fun getFileType(): MigrationFileType","title":"Get file type"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file/get-file-type/#getfiletype","text":"fun getFileType(): MigrationFileType","title":"getFileType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file/iterate-sql-files/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationFile / iterateSqlFiles iterateSqlFiles protected fun iterateSqlFiles(iterator: (SqlFileBase) -> Boolean ): Unit","title":"Iterate sql files"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file/iterate-sql-files/#iteratesqlfiles","text":"protected fun iterateSqlFiles(iterator: (SqlFileBase) -> Boolean ): Unit","title":"iterateSqlFiles"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file/order/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationFile / order order val order: Int","title":"Order"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file/order/#order","text":"val order: Int","title":"order"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file/version/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationFile / version version val version: Int","title":"Version"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file/version/#version","text":"val version: Int","title":"version"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file-type/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationFileType MigrationFileType object MigrationFileType : LanguageFileType Properties Name Summary EXTENSION const val EXTENSION: String Functions Name Summary getDefaultExtension fun getDefaultExtension(): String getDescription fun getDescription(): String getIcon fun getIcon(): Icon getName fun getName(): String","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file-type/#migrationfiletype","text":"object MigrationFileType : LanguageFileType","title":"MigrationFileType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file-type/#properties","text":"Name Summary EXTENSION const val EXTENSION: String","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file-type/#functions","text":"Name Summary getDefaultExtension fun getDefaultExtension(): String getDescription fun getDescription(): String getIcon fun getIcon(): Icon getName fun getName(): String","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file-type/-e-x-t-e-n-s-i-o-n/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationFileType / EXTENSION EXTENSION const val EXTENSION: String","title":" e x t e n s i o n"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file-type/-e-x-t-e-n-s-i-o-n/#extension","text":"const val EXTENSION: String","title":"EXTENSION"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file-type/get-default-extension/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationFileType / getDefaultExtension getDefaultExtension fun getDefaultExtension(): String","title":"Get default extension"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file-type/get-default-extension/#getdefaultextension","text":"fun getDefaultExtension(): String","title":"getDefaultExtension"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file-type/get-description/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationFileType / getDescription getDescription fun getDescription(): String","title":"Get description"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file-type/get-description/#getdescription","text":"fun getDescription(): String","title":"getDescription"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file-type/get-icon/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationFileType / getIcon getIcon fun getIcon(): Icon","title":"Get icon"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file-type/get-icon/#geticon","text":"fun getIcon(): Icon","title":"getIcon"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file-type/get-name/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationFileType / getName getName fun getName(): String","title":"Get name"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-file-type/get-name/#getname","text":"fun getName(): String","title":"getName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-parser-definition/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationParserDefinition MigrationParserDefinition class MigrationParserDefinition : SqlParserDefinition Constructors Name Summary <init> MigrationParserDefinition() Functions Name Summary createFile fun createFile(viewProvider: FileViewProvider): MigrationFile createParser fun createParser(project: Project): SqlParser getFileNodeType fun getFileNodeType(): IFileElementType getLanguage fun getLanguage(): SqlDelightLanguage","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-parser-definition/#migrationparserdefinition","text":"class MigrationParserDefinition : SqlParserDefinition","title":"MigrationParserDefinition"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-parser-definition/#constructors","text":"Name Summary <init> MigrationParserDefinition()","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-parser-definition/#functions","text":"Name Summary createFile fun createFile(viewProvider: FileViewProvider): MigrationFile createParser fun createParser(project: Project): SqlParser getFileNodeType fun getFileNodeType(): IFileElementType getLanguage fun getLanguage(): SqlDelightLanguage","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-parser-definition/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationParserDefinition / <init> <init> MigrationParserDefinition()","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-parser-definition/-init-/#init","text":"MigrationParserDefinition()","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-parser-definition/create-file/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationParserDefinition / createFile createFile fun createFile(viewProvider: FileViewProvider): MigrationFile","title":"Create file"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-parser-definition/create-file/#createfile","text":"fun createFile(viewProvider: FileViewProvider): MigrationFile","title":"createFile"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-parser-definition/create-parser/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationParserDefinition / createParser createParser fun createParser(project: Project): SqlParser","title":"Create parser"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-parser-definition/create-parser/#createparser","text":"fun createParser(project: Project): SqlParser","title":"createParser"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-parser-definition/get-file-node-type/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationParserDefinition / getFileNodeType getFileNodeType fun getFileNodeType(): IFileElementType","title":"Get file node type"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-parser-definition/get-file-node-type/#getfilenodetype","text":"fun getFileNodeType(): IFileElementType","title":"getFileNodeType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-parser-definition/get-language/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / MigrationParserDefinition / getLanguage getLanguage fun getLanguage(): SqlDelightLanguage","title":"Get language"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-migration-parser-definition/get-language/#getlanguage","text":"fun getLanguage(): SqlDelightLanguage","title":"getLanguage"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightFile SqlDelightFile abstract class SqlDelightFile : SqlFileBase Constructors Name Summary <init> SqlDelightFile(viewProvider: FileViewProvider, language: Language) Properties Name Summary generatedDir val generatedDir: String module val module: Module Functions Name Summary getVirtualFile open fun getVirtualFile(): VirtualFile? Extension Functions Name Summary childOfType fun PsiElement.childOfType(type: IElementType): PsiElement? fun PsiElement.childOfType(types: TokenSet): PsiElement? findChildrenOfType fun <T : PsiElement> PsiElement.findChildrenOfType(): Collection < T > nextSiblingOfType fun <T : PsiElement> PsiElement.nextSiblingOfType(): T rawSqlText fun PsiElement.rawSqlText(replacements: List < Pair < IntRange , String >> = emptyList()): String Inheritors Name Summary MigrationFile class MigrationFile : SqlDelightFile SqlDelightQueriesFile class SqlDelightQueriesFile : SqlDelightFile , SqlAnnotatedElement","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file/#sqldelightfile","text":"abstract class SqlDelightFile : SqlFileBase","title":"SqlDelightFile"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file/#constructors","text":"Name Summary <init> SqlDelightFile(viewProvider: FileViewProvider, language: Language)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file/#properties","text":"Name Summary generatedDir val generatedDir: String module val module: Module","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file/#functions","text":"Name Summary getVirtualFile open fun getVirtualFile(): VirtualFile?","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file/#extension-functions","text":"Name Summary childOfType fun PsiElement.childOfType(type: IElementType): PsiElement? fun PsiElement.childOfType(types: TokenSet): PsiElement? findChildrenOfType fun <T : PsiElement> PsiElement.findChildrenOfType(): Collection < T > nextSiblingOfType fun <T : PsiElement> PsiElement.nextSiblingOfType(): T rawSqlText fun PsiElement.rawSqlText(replacements: List < Pair < IntRange , String >> = emptyList()): String","title":"Extension Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file/#inheritors","text":"Name Summary MigrationFile class MigrationFile : SqlDelightFile SqlDelightQueriesFile class SqlDelightQueriesFile : SqlDelightFile , SqlAnnotatedElement","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightFile / <init> <init> SqlDelightFile(viewProvider: FileViewProvider, language: Language)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file/-init-/#init","text":"SqlDelightFile(viewProvider: FileViewProvider, language: Language)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file/generated-dir/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightFile / generatedDir generatedDir val generatedDir: String","title":"Generated dir"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file/generated-dir/#generateddir","text":"val generatedDir: String","title":"generatedDir"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file/get-virtual-file/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightFile / getVirtualFile getVirtualFile open fun getVirtualFile(): VirtualFile?","title":"Get virtual file"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file/get-virtual-file/#getvirtualfile","text":"open fun getVirtualFile(): VirtualFile?","title":"getVirtualFile"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file/module/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightFile / module module protected val module: Module","title":"Module"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file/module/#module","text":"protected val module: Module","title":"module"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file-type/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightFileType SqlDelightFileType object SqlDelightFileType : LanguageFileType Properties Name Summary EXTENSION const val EXTENSION: String FOLDER_NAME const val FOLDER_NAME: String Functions Name Summary getDefaultExtension fun getDefaultExtension(): String getDescription fun getDescription(): String getIcon fun getIcon(): Icon getName fun getName(): String","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file-type/#sqldelightfiletype","text":"object SqlDelightFileType : LanguageFileType","title":"SqlDelightFileType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file-type/#properties","text":"Name Summary EXTENSION const val EXTENSION: String FOLDER_NAME const val FOLDER_NAME: String","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file-type/#functions","text":"Name Summary getDefaultExtension fun getDefaultExtension(): String getDescription fun getDescription(): String getIcon fun getIcon(): Icon getName fun getName(): String","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file-type/-e-x-t-e-n-s-i-o-n/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightFileType / EXTENSION EXTENSION const val EXTENSION: String","title":" e x t e n s i o n"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file-type/-e-x-t-e-n-s-i-o-n/#extension","text":"const val EXTENSION: String","title":"EXTENSION"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file-type/-f-o-l-d-e-r_-n-a-m-e/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightFileType / FOLDER_NAME FOLDER_NAME const val FOLDER_NAME: String","title":" f o l d e r  n a m e"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file-type/-f-o-l-d-e-r_-n-a-m-e/#folder_name","text":"const val FOLDER_NAME: String","title":"FOLDER_NAME"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file-type/get-default-extension/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightFileType / getDefaultExtension getDefaultExtension fun getDefaultExtension(): String","title":"Get default extension"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file-type/get-default-extension/#getdefaultextension","text":"fun getDefaultExtension(): String","title":"getDefaultExtension"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file-type/get-description/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightFileType / getDescription getDescription fun getDescription(): String","title":"Get description"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file-type/get-description/#getdescription","text":"fun getDescription(): String","title":"getDescription"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file-type/get-icon/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightFileType / getIcon getIcon fun getIcon(): Icon","title":"Get icon"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file-type/get-icon/#geticon","text":"fun getIcon(): Icon","title":"getIcon"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file-type/get-name/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightFileType / getName getName fun getName(): String","title":"Get name"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-file-type/get-name/#getname","text":"fun getName(): String","title":"getName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-parser-definition/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightParserDefinition SqlDelightParserDefinition class SqlDelightParserDefinition : SqlParserDefinition Constructors Name Summary <init> SqlDelightParserDefinition() Functions Name Summary createFile fun createFile(viewProvider: FileViewProvider): SqlDelightQueriesFile createParser fun createParser(project: Project): SqlParser getFileNodeType fun getFileNodeType(): IFileElementType getLanguage fun getLanguage(): SqlDelightLanguage","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-parser-definition/#sqldelightparserdefinition","text":"class SqlDelightParserDefinition : SqlParserDefinition","title":"SqlDelightParserDefinition"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-parser-definition/#constructors","text":"Name Summary <init> SqlDelightParserDefinition()","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-parser-definition/#functions","text":"Name Summary createFile fun createFile(viewProvider: FileViewProvider): SqlDelightQueriesFile createParser fun createParser(project: Project): SqlParser getFileNodeType fun getFileNodeType(): IFileElementType getLanguage fun getLanguage(): SqlDelightLanguage","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-parser-definition/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightParserDefinition / <init> <init> SqlDelightParserDefinition()","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-parser-definition/-init-/#init","text":"SqlDelightParserDefinition()","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-parser-definition/create-file/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightParserDefinition / createFile createFile fun createFile(viewProvider: FileViewProvider): SqlDelightQueriesFile","title":"Create file"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-parser-definition/create-file/#createfile","text":"fun createFile(viewProvider: FileViewProvider): SqlDelightQueriesFile","title":"createFile"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-parser-definition/create-parser/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightParserDefinition / createParser createParser fun createParser(project: Project): SqlParser","title":"Create parser"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-parser-definition/create-parser/#createparser","text":"fun createParser(project: Project): SqlParser","title":"createParser"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-parser-definition/get-file-node-type/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightParserDefinition / getFileNodeType getFileNodeType fun getFileNodeType(): IFileElementType","title":"Get file node type"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-parser-definition/get-file-node-type/#getfilenodetype","text":"fun getFileNodeType(): IFileElementType","title":"getFileNodeType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-parser-definition/get-language/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightParserDefinition / getLanguage getLanguage fun getLanguage(): SqlDelightLanguage","title":"Get language"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-parser-definition/get-language/#getlanguage","text":"fun getLanguage(): SqlDelightLanguage","title":"getLanguage"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightQueriesFile SqlDelightQueriesFile class SqlDelightQueriesFile : SqlDelightFile , SqlAnnotatedElement Types Name Summary LabeledStatement data class LabeledStatement Constructors Name Summary <init> SqlDelightQueriesFile(viewProvider: FileViewProvider) Properties Name Summary order val order: Nothing ? Inherited Properties Name Summary generatedDir val generatedDir: String module val module: Module Functions Name Summary annotate fun annotate(annotationHolder: SqlAnnotationHolder): Unit getFileType fun getFileType(): SqlDelightFileType iterateSqlFiles fun iterateSqlFiles(iterator: (SqlFileBase) -> Boolean ): Unit Inherited Functions Name Summary getVirtualFile open fun getVirtualFile(): VirtualFile? Extension Functions Name Summary childOfType fun PsiElement.childOfType(type: IElementType): PsiElement? fun PsiElement.childOfType(types: TokenSet): PsiElement? findChildrenOfType fun <T : PsiElement> PsiElement.findChildrenOfType(): Collection < T > nextSiblingOfType fun <T : PsiElement> PsiElement.nextSiblingOfType(): T rawSqlText fun PsiElement.rawSqlText(replacements: List < Pair < IntRange , String >> = emptyList()): String","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/#sqldelightqueriesfile","text":"class SqlDelightQueriesFile : SqlDelightFile , SqlAnnotatedElement","title":"SqlDelightQueriesFile"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/#types","text":"Name Summary LabeledStatement data class LabeledStatement","title":"Types"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/#constructors","text":"Name Summary <init> SqlDelightQueriesFile(viewProvider: FileViewProvider)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/#properties","text":"Name Summary order val order: Nothing ?","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/#inherited-properties","text":"Name Summary generatedDir val generatedDir: String module val module: Module","title":"Inherited Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/#functions","text":"Name Summary annotate fun annotate(annotationHolder: SqlAnnotationHolder): Unit getFileType fun getFileType(): SqlDelightFileType iterateSqlFiles fun iterateSqlFiles(iterator: (SqlFileBase) -> Boolean ): Unit","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/#inherited-functions","text":"Name Summary getVirtualFile open fun getVirtualFile(): VirtualFile?","title":"Inherited Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/#extension-functions","text":"Name Summary childOfType fun PsiElement.childOfType(type: IElementType): PsiElement? fun PsiElement.childOfType(types: TokenSet): PsiElement? findChildrenOfType fun <T : PsiElement> PsiElement.findChildrenOfType(): Collection < T > nextSiblingOfType fun <T : PsiElement> PsiElement.nextSiblingOfType(): T rawSqlText fun PsiElement.rawSqlText(replacements: List < Pair < IntRange , String >> = emptyList()): String","title":"Extension Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightQueriesFile / <init> <init> SqlDelightQueriesFile(viewProvider: FileViewProvider)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/-init-/#init","text":"SqlDelightQueriesFile(viewProvider: FileViewProvider)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/annotate/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightQueriesFile / annotate annotate fun annotate(annotationHolder: SqlAnnotationHolder): Unit","title":"Annotate"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/annotate/#annotate","text":"fun annotate(annotationHolder: SqlAnnotationHolder): Unit","title":"annotate"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/get-file-type/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightQueriesFile / getFileType getFileType fun getFileType(): SqlDelightFileType","title":"Get file type"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/get-file-type/#getfiletype","text":"fun getFileType(): SqlDelightFileType","title":"getFileType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/get-virtual-file/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightQueriesFile / getVirtualFile getVirtualFile fun getVirtualFile(): VirtualFile?","title":"getVirtualFile - SQLDelight"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/get-virtual-file/#getvirtualfile","text":"fun getVirtualFile(): VirtualFile?","title":"getVirtualFile"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/iterate-sql-files/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightQueriesFile / iterateSqlFiles iterateSqlFiles fun iterateSqlFiles(iterator: (SqlFileBase) -> Boolean ): Unit","title":"Iterate sql files"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/iterate-sql-files/#iteratesqlfiles","text":"fun iterateSqlFiles(iterator: (SqlFileBase) -> Boolean ): Unit","title":"iterateSqlFiles"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/order/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightQueriesFile / order order val order: Nothing ?","title":"Order"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/order/#order","text":"val order: Nothing ?","title":"order"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/-labeled-statement/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightQueriesFile / LabeledStatement LabeledStatement data class LabeledStatement Constructors Name Summary <init> LabeledStatement(identifier: StmtIdentifierMixin , statement: SqlStmt) Properties Name Summary identifier val identifier: StmtIdentifierMixin statement val statement: SqlStmt","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/-labeled-statement/#labeledstatement","text":"data class LabeledStatement","title":"LabeledStatement"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/-labeled-statement/#constructors","text":"Name Summary <init> LabeledStatement(identifier: StmtIdentifierMixin , statement: SqlStmt)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/-labeled-statement/#properties","text":"Name Summary identifier val identifier: StmtIdentifierMixin statement val statement: SqlStmt","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/-labeled-statement/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightQueriesFile / LabeledStatement / <init> <init> LabeledStatement(identifier: StmtIdentifierMixin , statement: SqlStmt)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/-labeled-statement/-init-/#init","text":"LabeledStatement(identifier: StmtIdentifierMixin , statement: SqlStmt)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/-labeled-statement/identifier/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightQueriesFile / LabeledStatement / identifier identifier val identifier: StmtIdentifierMixin","title":"Identifier"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/-labeled-statement/identifier/#identifier","text":"val identifier: StmtIdentifierMixin","title":"identifier"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/-labeled-statement/statement/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / SqlDelightQueriesFile / LabeledStatement / statement statement val statement: SqlStmt","title":"Statement"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/-sql-delight-queries-file/-labeled-statement/statement/#statement","text":"val statement: SqlStmt","title":"statement"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/com.alecstrong.sql.psi.core.psi.-sql-insert-stmt/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / com.alecstrong.sql.psi.core.psi.SqlInsertStmt Extensions for com.alecstrong.sql.psi.core.psi.SqlInsertStmt Name Summary acceptsTableInterface fun SqlInsertStmt.acceptsTableInterface(): Boolean","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/com.alecstrong.sql.psi.core.psi.-sql-insert-stmt/#extensions-for-comalecstrongsqlpsicorepsisqlinsertstmt","text":"Name Summary acceptsTableInterface fun SqlInsertStmt.acceptsTableInterface(): Boolean","title":"Extensions for com.alecstrong.sql.psi.core.psi.SqlInsertStmt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/com.alecstrong.sql.psi.core.psi.-sql-insert-stmt/accepts-table-interface/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / com.alecstrong.sql.psi.core.psi.SqlInsertStmt / acceptsTableInterface acceptsTableInterface fun SqlInsertStmt.acceptsTableInterface(): Boolean","title":"Accepts table interface"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/com.alecstrong.sql.psi.core.psi.-sql-insert-stmt/accepts-table-interface/#acceptstableinterface","text":"fun SqlInsertStmt.acceptsTableInterface(): Boolean","title":"acceptsTableInterface"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/com.intellij.openapi.vfs.-virtual-file/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / com.intellij.openapi.vfs.VirtualFile Extensions for com.intellij.openapi.vfs.VirtualFile Name Summary queriesName val VirtualFile.queriesName: String","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/com.intellij.openapi.vfs.-virtual-file/#extensions-for-comintellijopenapivfsvirtualfile","text":"Name Summary queriesName val VirtualFile.queriesName: String","title":"Extensions for com.intellij.openapi.vfs.VirtualFile"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/com.intellij.openapi.vfs.-virtual-file/queries-name/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang / com.intellij.openapi.vfs.VirtualFile / queriesName queriesName val VirtualFile.queriesName: String","title":"Queries name"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang/com.intellij.openapi.vfs.-virtual-file/queries-name/#queriesname","text":"val VirtualFile.queriesName: String","title":"queriesName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang.psi Package com.squareup.sqldelight.core.lang.psi Types Name Summary ClojureStmtListMixin abstract class ClojureStmtListMixin : SqlCompositeElementImpl, SqlDelightStmtClojureStmtList ImportStmtMixin abstract class ImportStmtMixin : ASTWrapperPsiElement, SqlDelightImportStmt , SqlAnnotatedElement InsertStmtValuesMixin open class InsertStmtValuesMixin : SqlInsertStmtValuesImpl, SqlDelightInsertStmtValues JavaTypeMixin abstract class JavaTypeMixin : ASTWrapperPsiElement StmtIdentifier interface StmtIdentifier : PsiNamedElement StmtIdentifierMixin abstract class StmtIdentifierMixin : ASTWrapperPsiElement, SqlDelightStmtIdentifier , SqlDelightStmtIdentifierClojure , SqlAnnotatedElement","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/#package-comsquareupsqldelightcorelangpsi","text":"","title":"Package com.squareup.sqldelight.core.lang.psi"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/#types","text":"Name Summary ClojureStmtListMixin abstract class ClojureStmtListMixin : SqlCompositeElementImpl, SqlDelightStmtClojureStmtList ImportStmtMixin abstract class ImportStmtMixin : ASTWrapperPsiElement, SqlDelightImportStmt , SqlAnnotatedElement InsertStmtValuesMixin open class InsertStmtValuesMixin : SqlInsertStmtValuesImpl, SqlDelightInsertStmtValues JavaTypeMixin abstract class JavaTypeMixin : ASTWrapperPsiElement StmtIdentifier interface StmtIdentifier : PsiNamedElement StmtIdentifierMixin abstract class StmtIdentifierMixin : ASTWrapperPsiElement, SqlDelightStmtIdentifier , SqlDelightStmtIdentifierClojure , SqlAnnotatedElement","title":"Types"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-clojure-stmt-list-mixin/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / ClojureStmtListMixin ClojureStmtListMixin abstract class ClojureStmtListMixin : SqlCompositeElementImpl, SqlDelightStmtClojureStmtList Constructors Name Summary <init> ClojureStmtListMixin(node: ASTNode) Functions Name Summary tablesAvailable open fun tablesAvailable(child: PsiElement): Collection <LazyQuery> Extension Functions Name Summary childOfType fun PsiElement.childOfType(type: IElementType): PsiElement? fun PsiElement.childOfType(types: TokenSet): PsiElement? findChildrenOfType fun <T : PsiElement> PsiElement.findChildrenOfType(): Collection < T > nextSiblingOfType fun <T : PsiElement> PsiElement.nextSiblingOfType(): T rawSqlText fun PsiElement.rawSqlText(replacements: List < Pair < IntRange , String >> = emptyList()): String Inheritors Name Summary SqlDelightStmtClojureStmtListImpl open class SqlDelightStmtClojureStmtListImpl : ClojureStmtListMixin , SqlDelightStmtClojureStmtList","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-clojure-stmt-list-mixin/#clojurestmtlistmixin","text":"abstract class ClojureStmtListMixin : SqlCompositeElementImpl, SqlDelightStmtClojureStmtList","title":"ClojureStmtListMixin"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-clojure-stmt-list-mixin/#constructors","text":"Name Summary <init> ClojureStmtListMixin(node: ASTNode)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-clojure-stmt-list-mixin/#functions","text":"Name Summary tablesAvailable open fun tablesAvailable(child: PsiElement): Collection <LazyQuery>","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-clojure-stmt-list-mixin/#extension-functions","text":"Name Summary childOfType fun PsiElement.childOfType(type: IElementType): PsiElement? fun PsiElement.childOfType(types: TokenSet): PsiElement? findChildrenOfType fun <T : PsiElement> PsiElement.findChildrenOfType(): Collection < T > nextSiblingOfType fun <T : PsiElement> PsiElement.nextSiblingOfType(): T rawSqlText fun PsiElement.rawSqlText(replacements: List < Pair < IntRange , String >> = emptyList()): String","title":"Extension Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-clojure-stmt-list-mixin/#inheritors","text":"Name Summary SqlDelightStmtClojureStmtListImpl open class SqlDelightStmtClojureStmtListImpl : ClojureStmtListMixin , SqlDelightStmtClojureStmtList","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-clojure-stmt-list-mixin/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / ClojureStmtListMixin / <init> <init> ClojureStmtListMixin(node: ASTNode)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-clojure-stmt-list-mixin/-init-/#init","text":"ClojureStmtListMixin(node: ASTNode)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-clojure-stmt-list-mixin/tables-available/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / ClojureStmtListMixin / tablesAvailable tablesAvailable open fun tablesAvailable(child: PsiElement): Collection <LazyQuery>","title":"Tables available"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-clojure-stmt-list-mixin/tables-available/#tablesavailable","text":"open fun tablesAvailable(child: PsiElement): Collection <LazyQuery>","title":"tablesAvailable"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-import-stmt-mixin/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / ImportStmtMixin ImportStmtMixin abstract class ImportStmtMixin : ASTWrapperPsiElement, SqlDelightImportStmt , SqlAnnotatedElement Constructors Name Summary <init> ImportStmtMixin(node: ASTNode) Functions Name Summary annotate open fun annotate(annotationHolder: SqlAnnotationHolder): Unit Inherited Functions Name Summary getJavaType abstract fun getJavaType(): SqlDelightJavaType Extension Functions Name Summary childOfType fun PsiElement.childOfType(type: IElementType): PsiElement? fun PsiElement.childOfType(types: TokenSet): PsiElement? findChildrenOfType fun <T : PsiElement> PsiElement.findChildrenOfType(): Collection < T > nextSiblingOfType fun <T : PsiElement> PsiElement.nextSiblingOfType(): T rawSqlText fun PsiElement.rawSqlText(replacements: List < Pair < IntRange , String >> = emptyList()): String Inheritors Name Summary SqlDelightImportStmtImpl open class SqlDelightImportStmtImpl : ImportStmtMixin , SqlDelightImportStmt","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-import-stmt-mixin/#importstmtmixin","text":"abstract class ImportStmtMixin : ASTWrapperPsiElement, SqlDelightImportStmt , SqlAnnotatedElement","title":"ImportStmtMixin"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-import-stmt-mixin/#constructors","text":"Name Summary <init> ImportStmtMixin(node: ASTNode)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-import-stmt-mixin/#functions","text":"Name Summary annotate open fun annotate(annotationHolder: SqlAnnotationHolder): Unit","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-import-stmt-mixin/#inherited-functions","text":"Name Summary getJavaType abstract fun getJavaType(): SqlDelightJavaType","title":"Inherited Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-import-stmt-mixin/#extension-functions","text":"Name Summary childOfType fun PsiElement.childOfType(type: IElementType): PsiElement? fun PsiElement.childOfType(types: TokenSet): PsiElement? findChildrenOfType fun <T : PsiElement> PsiElement.findChildrenOfType(): Collection < T > nextSiblingOfType fun <T : PsiElement> PsiElement.nextSiblingOfType(): T rawSqlText fun PsiElement.rawSqlText(replacements: List < Pair < IntRange , String >> = emptyList()): String","title":"Extension Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-import-stmt-mixin/#inheritors","text":"Name Summary SqlDelightImportStmtImpl open class SqlDelightImportStmtImpl : ImportStmtMixin , SqlDelightImportStmt","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-import-stmt-mixin/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / ImportStmtMixin / <init> <init> ImportStmtMixin(node: ASTNode)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-import-stmt-mixin/-init-/#init","text":"ImportStmtMixin(node: ASTNode)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-import-stmt-mixin/annotate/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / ImportStmtMixin / annotate annotate open fun annotate(annotationHolder: SqlAnnotationHolder): Unit","title":"Annotate"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-import-stmt-mixin/annotate/#annotate","text":"open fun annotate(annotationHolder: SqlAnnotationHolder): Unit","title":"annotate"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-insert-stmt-values-mixin/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / InsertStmtValuesMixin InsertStmtValuesMixin open class InsertStmtValuesMixin : SqlInsertStmtValuesImpl, SqlDelightInsertStmtValues Constructors Name Summary <init> InsertStmtValuesMixin(node: ASTNode) Functions Name Summary annotate open fun annotate(annotationHolder: SqlAnnotationHolder): Unit Extension Functions Name Summary childOfType fun PsiElement.childOfType(type: IElementType): PsiElement? fun PsiElement.childOfType(types: TokenSet): PsiElement? findChildrenOfType fun <T : PsiElement> PsiElement.findChildrenOfType(): Collection < T > nextSiblingOfType fun <T : PsiElement> PsiElement.nextSiblingOfType(): T rawSqlText fun PsiElement.rawSqlText(replacements: List < Pair < IntRange , String >> = emptyList()): String Inheritors Name Summary SqlDelightInsertStmtValuesImpl open class SqlDelightInsertStmtValuesImpl : InsertStmtValuesMixin , SqlDelightInsertStmtValues SqlDelightInsertStmtValuesRealImpl open class SqlDelightInsertStmtValuesRealImpl : InsertStmtValuesMixin , SqlDelightInsertStmtValuesReal","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-insert-stmt-values-mixin/#insertstmtvaluesmixin","text":"open class InsertStmtValuesMixin : SqlInsertStmtValuesImpl, SqlDelightInsertStmtValues","title":"InsertStmtValuesMixin"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-insert-stmt-values-mixin/#constructors","text":"Name Summary <init> InsertStmtValuesMixin(node: ASTNode)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-insert-stmt-values-mixin/#functions","text":"Name Summary annotate open fun annotate(annotationHolder: SqlAnnotationHolder): Unit","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-insert-stmt-values-mixin/#extension-functions","text":"Name Summary childOfType fun PsiElement.childOfType(type: IElementType): PsiElement? fun PsiElement.childOfType(types: TokenSet): PsiElement? findChildrenOfType fun <T : PsiElement> PsiElement.findChildrenOfType(): Collection < T > nextSiblingOfType fun <T : PsiElement> PsiElement.nextSiblingOfType(): T rawSqlText fun PsiElement.rawSqlText(replacements: List < Pair < IntRange , String >> = emptyList()): String","title":"Extension Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-insert-stmt-values-mixin/#inheritors","text":"Name Summary SqlDelightInsertStmtValuesImpl open class SqlDelightInsertStmtValuesImpl : InsertStmtValuesMixin , SqlDelightInsertStmtValues SqlDelightInsertStmtValuesRealImpl open class SqlDelightInsertStmtValuesRealImpl : InsertStmtValuesMixin , SqlDelightInsertStmtValuesReal","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-insert-stmt-values-mixin/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / InsertStmtValuesMixin / <init> <init> InsertStmtValuesMixin(node: ASTNode)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-insert-stmt-values-mixin/-init-/#init","text":"InsertStmtValuesMixin(node: ASTNode)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-insert-stmt-values-mixin/annotate/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / InsertStmtValuesMixin / annotate annotate open fun annotate(annotationHolder: SqlAnnotationHolder): Unit","title":"Annotate"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-insert-stmt-values-mixin/annotate/#annotate","text":"open fun annotate(annotationHolder: SqlAnnotationHolder): Unit","title":"annotate"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-java-type-mixin/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / JavaTypeMixin JavaTypeMixin abstract class JavaTypeMixin : ASTWrapperPsiElement Constructors Name Summary <init> JavaTypeMixin(node: ASTNode) Functions Name Summary getReference open fun getReference(): PsiReference Extension Functions Name Summary childOfType fun PsiElement.childOfType(type: IElementType): PsiElement? fun PsiElement.childOfType(types: TokenSet): PsiElement? findChildrenOfType fun <T : PsiElement> PsiElement.findChildrenOfType(): Collection < T > nextSiblingOfType fun <T : PsiElement> PsiElement.nextSiblingOfType(): T rawSqlText fun PsiElement.rawSqlText(replacements: List < Pair < IntRange , String >> = emptyList()): String Inheritors Name Summary SqlDelightJavaTypeImpl open class SqlDelightJavaTypeImpl : JavaTypeMixin , SqlDelightJavaType","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-java-type-mixin/#javatypemixin","text":"abstract class JavaTypeMixin : ASTWrapperPsiElement","title":"JavaTypeMixin"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-java-type-mixin/#constructors","text":"Name Summary <init> JavaTypeMixin(node: ASTNode)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-java-type-mixin/#functions","text":"Name Summary getReference open fun getReference(): PsiReference","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-java-type-mixin/#extension-functions","text":"Name Summary childOfType fun PsiElement.childOfType(type: IElementType): PsiElement? fun PsiElement.childOfType(types: TokenSet): PsiElement? findChildrenOfType fun <T : PsiElement> PsiElement.findChildrenOfType(): Collection < T > nextSiblingOfType fun <T : PsiElement> PsiElement.nextSiblingOfType(): T rawSqlText fun PsiElement.rawSqlText(replacements: List < Pair < IntRange , String >> = emptyList()): String","title":"Extension Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-java-type-mixin/#inheritors","text":"Name Summary SqlDelightJavaTypeImpl open class SqlDelightJavaTypeImpl : JavaTypeMixin , SqlDelightJavaType","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-java-type-mixin/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / JavaTypeMixin / <init> <init> JavaTypeMixin(node: ASTNode)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-java-type-mixin/-init-/#init","text":"JavaTypeMixin(node: ASTNode)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-java-type-mixin/get-reference/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / JavaTypeMixin / getReference getReference open fun getReference(): PsiReference","title":"Get reference"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-java-type-mixin/get-reference/#getreference","text":"open fun getReference(): PsiReference","title":"getReference"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / StmtIdentifier StmtIdentifier interface StmtIdentifier : PsiNamedElement Functions Name Summary identifier abstract fun identifier(): SqlIdentifier? Extension Functions Name Summary childOfType fun PsiElement.childOfType(type: IElementType): PsiElement? fun PsiElement.childOfType(types: TokenSet): PsiElement? findChildrenOfType fun <T : PsiElement> PsiElement.findChildrenOfType(): Collection < T > nextSiblingOfType fun <T : PsiElement> PsiElement.nextSiblingOfType(): T rawSqlText fun PsiElement.rawSqlText(replacements: List < Pair < IntRange , String >> = emptyList()): String Inheritors Name Summary SqlDelightStmtIdentifier interface SqlDelightStmtIdentifier : StmtIdentifier","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier/#stmtidentifier","text":"interface StmtIdentifier : PsiNamedElement","title":"StmtIdentifier"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier/#functions","text":"Name Summary identifier abstract fun identifier(): SqlIdentifier?","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier/#extension-functions","text":"Name Summary childOfType fun PsiElement.childOfType(type: IElementType): PsiElement? fun PsiElement.childOfType(types: TokenSet): PsiElement? findChildrenOfType fun <T : PsiElement> PsiElement.findChildrenOfType(): Collection < T > nextSiblingOfType fun <T : PsiElement> PsiElement.nextSiblingOfType(): T rawSqlText fun PsiElement.rawSqlText(replacements: List < Pair < IntRange , String >> = emptyList()): String","title":"Extension Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier/#inheritors","text":"Name Summary SqlDelightStmtIdentifier interface SqlDelightStmtIdentifier : StmtIdentifier","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier/identifier/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / StmtIdentifier / identifier identifier abstract fun identifier(): SqlIdentifier?","title":"Identifier"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier/identifier/#identifier","text":"abstract fun identifier(): SqlIdentifier?","title":"identifier"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier-mixin/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / StmtIdentifierMixin StmtIdentifierMixin abstract class StmtIdentifierMixin : ASTWrapperPsiElement, SqlDelightStmtIdentifier , SqlDelightStmtIdentifierClojure , SqlAnnotatedElement Constructors Name Summary <init> StmtIdentifierMixin(node: ASTNode) Functions Name Summary annotate open fun annotate(annotationHolder: SqlAnnotationHolder): Unit getName open fun getName(): String ? identifier open fun identifier(): SqlIdentifier? setName open fun setName(name: String ): PsiElement Extension Functions Name Summary childOfType fun PsiElement.childOfType(type: IElementType): PsiElement? fun PsiElement.childOfType(types: TokenSet): PsiElement? findChildrenOfType fun <T : PsiElement> PsiElement.findChildrenOfType(): Collection < T > nextSiblingOfType fun <T : PsiElement> PsiElement.nextSiblingOfType(): T rawSqlText fun PsiElement.rawSqlText(replacements: List < Pair < IntRange , String >> = emptyList()): String Inheritors Name Summary SqlDelightStmtIdentifierClojureImpl open class SqlDelightStmtIdentifierClojureImpl : StmtIdentifierMixin , SqlDelightStmtIdentifierClojure SqlDelightStmtIdentifierImpl open class SqlDelightStmtIdentifierImpl : StmtIdentifierMixin , SqlDelightStmtIdentifier","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier-mixin/#stmtidentifiermixin","text":"abstract class StmtIdentifierMixin : ASTWrapperPsiElement, SqlDelightStmtIdentifier , SqlDelightStmtIdentifierClojure , SqlAnnotatedElement","title":"StmtIdentifierMixin"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier-mixin/#constructors","text":"Name Summary <init> StmtIdentifierMixin(node: ASTNode)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier-mixin/#functions","text":"Name Summary annotate open fun annotate(annotationHolder: SqlAnnotationHolder): Unit getName open fun getName(): String ? identifier open fun identifier(): SqlIdentifier? setName open fun setName(name: String ): PsiElement","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier-mixin/#extension-functions","text":"Name Summary childOfType fun PsiElement.childOfType(type: IElementType): PsiElement? fun PsiElement.childOfType(types: TokenSet): PsiElement? findChildrenOfType fun <T : PsiElement> PsiElement.findChildrenOfType(): Collection < T > nextSiblingOfType fun <T : PsiElement> PsiElement.nextSiblingOfType(): T rawSqlText fun PsiElement.rawSqlText(replacements: List < Pair < IntRange , String >> = emptyList()): String","title":"Extension Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier-mixin/#inheritors","text":"Name Summary SqlDelightStmtIdentifierClojureImpl open class SqlDelightStmtIdentifierClojureImpl : StmtIdentifierMixin , SqlDelightStmtIdentifierClojure SqlDelightStmtIdentifierImpl open class SqlDelightStmtIdentifierImpl : StmtIdentifierMixin , SqlDelightStmtIdentifier","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier-mixin/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / StmtIdentifierMixin / <init> <init> StmtIdentifierMixin(node: ASTNode)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier-mixin/-init-/#init","text":"StmtIdentifierMixin(node: ASTNode)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier-mixin/annotate/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / StmtIdentifierMixin / annotate annotate open fun annotate(annotationHolder: SqlAnnotationHolder): Unit","title":"Annotate"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier-mixin/annotate/#annotate","text":"open fun annotate(annotationHolder: SqlAnnotationHolder): Unit","title":"annotate"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier-mixin/get-name/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / StmtIdentifierMixin / getName getName open fun getName(): String ?","title":"Get name"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier-mixin/get-name/#getname","text":"open fun getName(): String ?","title":"getName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier-mixin/identifier/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / StmtIdentifierMixin / identifier identifier open fun identifier(): SqlIdentifier? Overrides StmtIdentifier.identifier","title":"Identifier"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier-mixin/identifier/#identifier","text":"open fun identifier(): SqlIdentifier? Overrides StmtIdentifier.identifier","title":"identifier"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier-mixin/set-name/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang.psi / StmtIdentifierMixin / setName setName open fun setName(name: String ): PsiElement","title":"Set name"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.psi/-stmt-identifier-mixin/set-name/#setname","text":"open fun setName(name: String ): PsiElement","title":"setName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.util/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang.util Package com.squareup.sqldelight.core.lang.util Extensions for External Classes Name Summary com.intellij.psi.PsiElement kotlin.collections.Collection","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.util/#package-comsquareupsqldelightcorelangutil","text":"","title":"Package com.squareup.sqldelight.core.lang.util"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.util/#extensions-for-external-classes","text":"Name Summary com.intellij.psi.PsiElement kotlin.collections.Collection","title":"Extensions for External Classes"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.util/com.intellij.psi.-psi-element/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang.util / com.intellij.psi.PsiElement Extensions for com.intellij.psi.PsiElement Name Summary childOfType fun PsiElement.childOfType(type: IElementType): PsiElement? fun PsiElement.childOfType(types: TokenSet): PsiElement? findChildrenOfType fun <T : PsiElement> PsiElement.findChildrenOfType(): Collection < T > nextSiblingOfType fun <T : PsiElement> PsiElement.nextSiblingOfType(): T rawSqlText fun PsiElement.rawSqlText(replacements: List < Pair < IntRange , String >> = emptyList()): String","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.util/com.intellij.psi.-psi-element/#extensions-for-comintellijpsipsielement","text":"Name Summary childOfType fun PsiElement.childOfType(type: IElementType): PsiElement? fun PsiElement.childOfType(types: TokenSet): PsiElement? findChildrenOfType fun <T : PsiElement> PsiElement.findChildrenOfType(): Collection < T > nextSiblingOfType fun <T : PsiElement> PsiElement.nextSiblingOfType(): T rawSqlText fun PsiElement.rawSqlText(replacements: List < Pair < IntRange , String >> = emptyList()): String","title":"Extensions for com.intellij.psi.PsiElement"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.util/com.intellij.psi.-psi-element/child-of-type/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang.util / com.intellij.psi.PsiElement / childOfType childOfType fun PsiElement.childOfType(type: IElementType): PsiElement? fun PsiElement.childOfType(types: TokenSet): PsiElement?","title":"Child of type"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.util/com.intellij.psi.-psi-element/child-of-type/#childoftype","text":"fun PsiElement.childOfType(type: IElementType): PsiElement? fun PsiElement.childOfType(types: TokenSet): PsiElement?","title":"childOfType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.util/com.intellij.psi.-psi-element/find-children-of-type/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang.util / com.intellij.psi.PsiElement / findChildrenOfType findChildrenOfType inline fun <reified T : PsiElement> PsiElement.findChildrenOfType(): Collection < T >","title":"Find children of type"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.util/com.intellij.psi.-psi-element/find-children-of-type/#findchildrenoftype","text":"inline fun <reified T : PsiElement> PsiElement.findChildrenOfType(): Collection < T >","title":"findChildrenOfType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.util/com.intellij.psi.-psi-element/next-sibling-of-type/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang.util / com.intellij.psi.PsiElement / nextSiblingOfType nextSiblingOfType inline fun <reified T : PsiElement> PsiElement.nextSiblingOfType(): T","title":"Next sibling of type"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.util/com.intellij.psi.-psi-element/next-sibling-of-type/#nextsiblingoftype","text":"inline fun <reified T : PsiElement> PsiElement.nextSiblingOfType(): T","title":"nextSiblingOfType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.util/com.intellij.psi.-psi-element/raw-sql-text/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang.util / com.intellij.psi.PsiElement / rawSqlText rawSqlText fun PsiElement.rawSqlText(replacements: List < Pair < IntRange , String >> = emptyList()): String","title":"Raw sql text"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.util/com.intellij.psi.-psi-element/raw-sql-text/#rawsqltext","text":"fun PsiElement.rawSqlText(replacements: List < Pair < IntRange , String >> = emptyList()): String","title":"rawSqlText"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.util/kotlin.collections.-collection/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang.util / kotlin.collections.Collection Extensions for kotlin.collections.Collection Name Summary forInitializationStatements fun Collection < SqlDelightQueriesFile >.forInitializationStatements(body: (sqlText: String ) -> Unit ): Unit","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.util/kotlin.collections.-collection/#extensions-for-kotlincollectionscollection","text":"Name Summary forInitializationStatements fun Collection < SqlDelightQueriesFile >.forInitializationStatements(body: (sqlText: String ) -> Unit ): Unit","title":"Extensions for kotlin.collections.Collection"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.util/kotlin.collections.-collection/for-initialization-statements/","text":"sqldelight-compiler / com.squareup.sqldelight.core.lang.util / kotlin.collections.Collection / forInitializationStatements forInitializationStatements fun Collection < SqlDelightQueriesFile >.forInitializationStatements(body: (sqlText: String ) -> Unit ): Unit","title":"For initialization statements"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.lang.util/kotlin.collections.-collection/for-initialization-statements/#forinitializationstatements","text":"fun Collection < SqlDelightQueriesFile >.forInitializationStatements(body: (sqlText: String ) -> Unit ): Unit","title":"forInitializationStatements"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi Package com.squareup.sqldelight.core.psi Types Name Summary SqlDelightAnnotation interface SqlDelightAnnotation : PsiElement SqlDelightAnnotationValue interface SqlDelightAnnotationValue : PsiElement SqlDelightColumnDef interface SqlDelightColumnDef : SqlColumnDef, TypedColumn SqlDelightImportStmt interface SqlDelightImportStmt : PsiElement SqlDelightImportStmtList interface SqlDelightImportStmtList : PsiElement SqlDelightInsertStmtValues interface SqlDelightInsertStmtValues : SqlInsertStmtValues SqlDelightInsertStmtValuesReal interface SqlDelightInsertStmtValuesReal : SqlInsertStmtValues SqlDelightJavaType interface SqlDelightJavaType : PsiElement SqlDelightJavaTypeName interface SqlDelightJavaTypeName : PsiElement SqlDelightJavaTypeName2 interface SqlDelightJavaTypeName2 : PsiElement SqlDelightOverrides interface SqlDelightOverrides : PsiElement SqlDelightParameterizedJavaType interface SqlDelightParameterizedJavaType : PsiElement SqlDelightStmtClojure interface SqlDelightStmtClojure : SqlCompositeElement SqlDelightStmtClojureStmtList interface SqlDelightStmtClojureStmtList : SqlCompositeElement SqlDelightStmtIdentifier interface SqlDelightStmtIdentifier : StmtIdentifier SqlDelightStmtIdentifierClojure interface SqlDelightStmtIdentifierClojure : SqlDelightStmtIdentifier SqlDelightStmtList interface SqlDelightStmtList : SqlStmtList SqldelightTypes interface SqldelightTypes SqlDelightVisitor open class SqlDelightVisitor : PsiElementVisitor","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/#package-comsquareupsqldelightcorepsi","text":"","title":"Package com.squareup.sqldelight.core.psi"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/#types","text":"Name Summary SqlDelightAnnotation interface SqlDelightAnnotation : PsiElement SqlDelightAnnotationValue interface SqlDelightAnnotationValue : PsiElement SqlDelightColumnDef interface SqlDelightColumnDef : SqlColumnDef, TypedColumn SqlDelightImportStmt interface SqlDelightImportStmt : PsiElement SqlDelightImportStmtList interface SqlDelightImportStmtList : PsiElement SqlDelightInsertStmtValues interface SqlDelightInsertStmtValues : SqlInsertStmtValues SqlDelightInsertStmtValuesReal interface SqlDelightInsertStmtValuesReal : SqlInsertStmtValues SqlDelightJavaType interface SqlDelightJavaType : PsiElement SqlDelightJavaTypeName interface SqlDelightJavaTypeName : PsiElement SqlDelightJavaTypeName2 interface SqlDelightJavaTypeName2 : PsiElement SqlDelightOverrides interface SqlDelightOverrides : PsiElement SqlDelightParameterizedJavaType interface SqlDelightParameterizedJavaType : PsiElement SqlDelightStmtClojure interface SqlDelightStmtClojure : SqlCompositeElement SqlDelightStmtClojureStmtList interface SqlDelightStmtClojureStmtList : SqlCompositeElement SqlDelightStmtIdentifier interface SqlDelightStmtIdentifier : StmtIdentifier SqlDelightStmtIdentifierClojure interface SqlDelightStmtIdentifierClojure : SqlDelightStmtIdentifier SqlDelightStmtList interface SqlDelightStmtList : SqlStmtList SqldelightTypes interface SqldelightTypes SqlDelightVisitor open class SqlDelightVisitor : PsiElementVisitor","title":"Types"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-insert-stmt-values-real/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightInsertStmtValuesReal SqlDelightInsertStmtValuesReal interface SqlDelightInsertStmtValuesReal : SqlInsertStmtValues Inheritors Name Summary SqlDelightInsertStmtValuesRealImpl open class SqlDelightInsertStmtValuesRealImpl : InsertStmtValuesMixin , SqlDelightInsertStmtValuesReal","title":" sql delight insert stmt values real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-insert-stmt-values-real/#sqldelightinsertstmtvaluesreal","text":"interface SqlDelightInsertStmtValuesReal : SqlInsertStmtValues","title":"SqlDelightInsertStmtValuesReal"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-insert-stmt-values-real/#inheritors","text":"Name Summary SqlDelightInsertStmtValuesRealImpl open class SqlDelightInsertStmtValuesRealImpl : InsertStmtValuesMixin , SqlDelightInsertStmtValuesReal","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-insert-stmt-values/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightInsertStmtValues SqlDelightInsertStmtValues interface SqlDelightInsertStmtValues : SqlInsertStmtValues Inheritors Name Summary InsertStmtValuesMixin open class InsertStmtValuesMixin : SqlInsertStmtValuesImpl, SqlDelightInsertStmtValues SqlDelightInsertStmtValuesImpl open class SqlDelightInsertStmtValuesImpl : InsertStmtValuesMixin , SqlDelightInsertStmtValues","title":" sql delight insert stmt values"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-insert-stmt-values/#sqldelightinsertstmtvalues","text":"interface SqlDelightInsertStmtValues : SqlInsertStmtValues","title":"SqlDelightInsertStmtValues"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-insert-stmt-values/#inheritors","text":"Name Summary InsertStmtValuesMixin open class InsertStmtValuesMixin : SqlInsertStmtValuesImpl, SqlDelightInsertStmtValues SqlDelightInsertStmtValuesImpl open class SqlDelightInsertStmtValuesImpl : InsertStmtValuesMixin , SqlDelightInsertStmtValues","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-java-type/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightJavaType SqlDelightJavaType interface SqlDelightJavaType : PsiElement Inheritors Name Summary SqlDelightJavaTypeImpl open class SqlDelightJavaTypeImpl : JavaTypeMixin , SqlDelightJavaType","title":" sql delight java type"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-java-type/#sqldelightjavatype","text":"interface SqlDelightJavaType : PsiElement","title":"SqlDelightJavaType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-java-type/#inheritors","text":"Name Summary SqlDelightJavaTypeImpl open class SqlDelightJavaTypeImpl : JavaTypeMixin , SqlDelightJavaType","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-clojure-stmt-list/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightStmtClojureStmtList SqlDelightStmtClojureStmtList interface SqlDelightStmtClojureStmtList : SqlCompositeElement Inheritors Name Summary ClojureStmtListMixin abstract class ClojureStmtListMixin : SqlCompositeElementImpl, SqlDelightStmtClojureStmtList SqlDelightStmtClojureStmtListImpl open class SqlDelightStmtClojureStmtListImpl : ClojureStmtListMixin , SqlDelightStmtClojureStmtList","title":" sql delight stmt clojure stmt list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-clojure-stmt-list/#sqldelightstmtclojurestmtlist","text":"interface SqlDelightStmtClojureStmtList : SqlCompositeElement","title":"SqlDelightStmtClojureStmtList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-clojure-stmt-list/#inheritors","text":"Name Summary ClojureStmtListMixin abstract class ClojureStmtListMixin : SqlCompositeElementImpl, SqlDelightStmtClojureStmtList SqlDelightStmtClojureStmtListImpl open class SqlDelightStmtClojureStmtListImpl : ClojureStmtListMixin , SqlDelightStmtClojureStmtList","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-identifier-clojure/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightStmtIdentifierClojure SqlDelightStmtIdentifierClojure interface SqlDelightStmtIdentifierClojure : SqlDelightStmtIdentifier Inheritors Name Summary SqlDelightStmtIdentifierClojureImpl open class SqlDelightStmtIdentifierClojureImpl : StmtIdentifierMixin , SqlDelightStmtIdentifierClojure StmtIdentifierMixin abstract class StmtIdentifierMixin : ASTWrapperPsiElement, SqlDelightStmtIdentifier , SqlDelightStmtIdentifierClojure , SqlAnnotatedElement","title":" sql delight stmt identifier clojure"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-identifier-clojure/#sqldelightstmtidentifierclojure","text":"interface SqlDelightStmtIdentifierClojure : SqlDelightStmtIdentifier","title":"SqlDelightStmtIdentifierClojure"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-identifier-clojure/#inheritors","text":"Name Summary SqlDelightStmtIdentifierClojureImpl open class SqlDelightStmtIdentifierClojureImpl : StmtIdentifierMixin , SqlDelightStmtIdentifierClojure StmtIdentifierMixin abstract class StmtIdentifierMixin : ASTWrapperPsiElement, SqlDelightStmtIdentifier , SqlDelightStmtIdentifierClojure , SqlAnnotatedElement","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-identifier/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightStmtIdentifier SqlDelightStmtIdentifier interface SqlDelightStmtIdentifier : StmtIdentifier Inherited Functions Name Summary identifier abstract fun identifier(): SqlIdentifier? Inheritors Name Summary SqlDelightStmtIdentifierClojure interface SqlDelightStmtIdentifierClojure : SqlDelightStmtIdentifier SqlDelightStmtIdentifierImpl open class SqlDelightStmtIdentifierImpl : StmtIdentifierMixin , SqlDelightStmtIdentifier StmtIdentifierMixin abstract class StmtIdentifierMixin : ASTWrapperPsiElement, SqlDelightStmtIdentifier , SqlDelightStmtIdentifierClojure , SqlAnnotatedElement","title":" sql delight stmt identifier"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-identifier/#sqldelightstmtidentifier","text":"interface SqlDelightStmtIdentifier : StmtIdentifier","title":"SqlDelightStmtIdentifier"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-identifier/#inherited-functions","text":"Name Summary identifier abstract fun identifier(): SqlIdentifier?","title":"Inherited Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-identifier/#inheritors","text":"Name Summary SqlDelightStmtIdentifierClojure interface SqlDelightStmtIdentifierClojure : SqlDelightStmtIdentifier SqlDelightStmtIdentifierImpl open class SqlDelightStmtIdentifierImpl : StmtIdentifierMixin , SqlDelightStmtIdentifier StmtIdentifierMixin abstract class StmtIdentifierMixin : ASTWrapperPsiElement, SqlDelightStmtIdentifier , SqlDelightStmtIdentifierClojure , SqlAnnotatedElement","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightAnnotation SqlDelightAnnotation interface SqlDelightAnnotation : PsiElement Functions Name Summary getAnnotationValueList abstract fun getAnnotationValueList(): MutableList < SqlDelightAnnotationValue !> getJavaType abstract fun getJavaType(): SqlDelightJavaType Inheritors Name Summary SqlDelightAnnotationImpl open class SqlDelightAnnotationImpl : ASTWrapperPsiElement, SqlDelightAnnotation","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation/#sqldelightannotation","text":"interface SqlDelightAnnotation : PsiElement","title":"SqlDelightAnnotation"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation/#functions","text":"Name Summary getAnnotationValueList abstract fun getAnnotationValueList(): MutableList < SqlDelightAnnotationValue !> getJavaType abstract fun getJavaType(): SqlDelightJavaType","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation/#inheritors","text":"Name Summary SqlDelightAnnotationImpl open class SqlDelightAnnotationImpl : ASTWrapperPsiElement, SqlDelightAnnotation","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation/get-annotation-value-list/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightAnnotation / getAnnotationValueList getAnnotationValueList @NotNull abstract fun getAnnotationValueList(): MutableList < SqlDelightAnnotationValue !>","title":"Get annotation value list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation/get-annotation-value-list/#getannotationvaluelist","text":"@NotNull abstract fun getAnnotationValueList(): MutableList < SqlDelightAnnotationValue !>","title":"getAnnotationValueList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation/get-java-type/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightAnnotation / getJavaType getJavaType @NotNull abstract fun getJavaType(): SqlDelightJavaType","title":"Get java type"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation/get-java-type/#getjavatype","text":"@NotNull abstract fun getJavaType(): SqlDelightJavaType","title":"getJavaType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation-value/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightAnnotationValue SqlDelightAnnotationValue interface SqlDelightAnnotationValue : PsiElement Functions Name Summary getAnnotation abstract fun getAnnotation(): SqlDelightAnnotation ? getAnnotationValueList abstract fun getAnnotationValueList(): MutableList < SqlDelightAnnotationValue !> getJavaTypeName abstract fun getJavaTypeName(): SqlDelightJavaTypeName ? Inheritors Name Summary SqlDelightAnnotationValueImpl open class SqlDelightAnnotationValueImpl : ASTWrapperPsiElement, SqlDelightAnnotationValue","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation-value/#sqldelightannotationvalue","text":"interface SqlDelightAnnotationValue : PsiElement","title":"SqlDelightAnnotationValue"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation-value/#functions","text":"Name Summary getAnnotation abstract fun getAnnotation(): SqlDelightAnnotation ? getAnnotationValueList abstract fun getAnnotationValueList(): MutableList < SqlDelightAnnotationValue !> getJavaTypeName abstract fun getJavaTypeName(): SqlDelightJavaTypeName ?","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation-value/#inheritors","text":"Name Summary SqlDelightAnnotationValueImpl open class SqlDelightAnnotationValueImpl : ASTWrapperPsiElement, SqlDelightAnnotationValue","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation-value/get-annotation-value-list/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightAnnotationValue / getAnnotationValueList getAnnotationValueList @NotNull abstract fun getAnnotationValueList(): MutableList < SqlDelightAnnotationValue !>","title":"Get annotation value list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation-value/get-annotation-value-list/#getannotationvaluelist","text":"@NotNull abstract fun getAnnotationValueList(): MutableList < SqlDelightAnnotationValue !>","title":"getAnnotationValueList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation-value/get-annotation/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightAnnotationValue / getAnnotation getAnnotation @Nullable abstract fun getAnnotation(): SqlDelightAnnotation ?","title":"Get annotation"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation-value/get-annotation/#getannotation","text":"@Nullable abstract fun getAnnotation(): SqlDelightAnnotation ?","title":"getAnnotation"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation-value/get-java-type-name/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightAnnotationValue / getJavaTypeName getJavaTypeName @Nullable abstract fun getJavaTypeName(): SqlDelightJavaTypeName ?","title":"Get java type name"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-annotation-value/get-java-type-name/#getjavatypename","text":"@Nullable abstract fun getJavaTypeName(): SqlDelightJavaTypeName ?","title":"getJavaTypeName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-column-def/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightColumnDef SqlDelightColumnDef interface SqlDelightColumnDef : SqlColumnDef, TypedColumn Functions Name Summary getAnnotationList abstract fun getAnnotationList(): MutableList < SqlDelightAnnotation !> getJavaTypeName abstract fun getJavaTypeName(): SqlDelightJavaTypeName ? Inheritors Name Summary SqlDelightColumnDefImpl open class SqlDelightColumnDefImpl : ColumnDefMixin, SqlDelightColumnDef","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-column-def/#sqldelightcolumndef","text":"interface SqlDelightColumnDef : SqlColumnDef, TypedColumn","title":"SqlDelightColumnDef"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-column-def/#functions","text":"Name Summary getAnnotationList abstract fun getAnnotationList(): MutableList < SqlDelightAnnotation !> getJavaTypeName abstract fun getJavaTypeName(): SqlDelightJavaTypeName ?","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-column-def/#inheritors","text":"Name Summary SqlDelightColumnDefImpl open class SqlDelightColumnDefImpl : ColumnDefMixin, SqlDelightColumnDef","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-column-def/get-annotation-list/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightColumnDef / getAnnotationList getAnnotationList @NotNull abstract fun getAnnotationList(): MutableList < SqlDelightAnnotation !>","title":"Get annotation list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-column-def/get-annotation-list/#getannotationlist","text":"@NotNull abstract fun getAnnotationList(): MutableList < SqlDelightAnnotation !>","title":"getAnnotationList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-column-def/get-java-type-name/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightColumnDef / getJavaTypeName getJavaTypeName @Nullable abstract fun getJavaTypeName(): SqlDelightJavaTypeName ?","title":"Get java type name"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-column-def/get-java-type-name/#getjavatypename","text":"@Nullable abstract fun getJavaTypeName(): SqlDelightJavaTypeName ?","title":"getJavaTypeName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-import-stmt/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightImportStmt SqlDelightImportStmt interface SqlDelightImportStmt : PsiElement Functions Name Summary getJavaType abstract fun getJavaType(): SqlDelightJavaType Inheritors Name Summary ImportStmtMixin abstract class ImportStmtMixin : ASTWrapperPsiElement, SqlDelightImportStmt , SqlAnnotatedElement SqlDelightImportStmtImpl open class SqlDelightImportStmtImpl : ImportStmtMixin , SqlDelightImportStmt","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-import-stmt/#sqldelightimportstmt","text":"interface SqlDelightImportStmt : PsiElement","title":"SqlDelightImportStmt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-import-stmt/#functions","text":"Name Summary getJavaType abstract fun getJavaType(): SqlDelightJavaType","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-import-stmt/#inheritors","text":"Name Summary ImportStmtMixin abstract class ImportStmtMixin : ASTWrapperPsiElement, SqlDelightImportStmt , SqlAnnotatedElement SqlDelightImportStmtImpl open class SqlDelightImportStmtImpl : ImportStmtMixin , SqlDelightImportStmt","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-import-stmt/get-java-type/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightImportStmt / getJavaType getJavaType @NotNull abstract fun getJavaType(): SqlDelightJavaType","title":"Get java type"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-import-stmt/get-java-type/#getjavatype","text":"@NotNull abstract fun getJavaType(): SqlDelightJavaType","title":"getJavaType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-import-stmt-list/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightImportStmtList SqlDelightImportStmtList interface SqlDelightImportStmtList : PsiElement Functions Name Summary getImportStmtList abstract fun getImportStmtList(): MutableList < SqlDelightImportStmt !> Inheritors Name Summary SqlDelightImportStmtListImpl open class SqlDelightImportStmtListImpl : ASTWrapperPsiElement, SqlDelightImportStmtList","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-import-stmt-list/#sqldelightimportstmtlist","text":"interface SqlDelightImportStmtList : PsiElement","title":"SqlDelightImportStmtList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-import-stmt-list/#functions","text":"Name Summary getImportStmtList abstract fun getImportStmtList(): MutableList < SqlDelightImportStmt !>","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-import-stmt-list/#inheritors","text":"Name Summary SqlDelightImportStmtListImpl open class SqlDelightImportStmtListImpl : ASTWrapperPsiElement, SqlDelightImportStmtList","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-import-stmt-list/get-import-stmt-list/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightImportStmtList / getImportStmtList getImportStmtList @NotNull abstract fun getImportStmtList(): MutableList < SqlDelightImportStmt !>","title":"Get import stmt list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-import-stmt-list/get-import-stmt-list/#getimportstmtlist","text":"@NotNull abstract fun getImportStmtList(): MutableList < SqlDelightImportStmt !>","title":"getImportStmtList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-java-type-name/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightJavaTypeName SqlDelightJavaTypeName interface SqlDelightJavaTypeName : PsiElement Functions Name Summary getParameterizedJavaType abstract fun getParameterizedJavaType(): SqlDelightParameterizedJavaType ? Inheritors Name Summary SqlDelightJavaTypeNameImpl open class SqlDelightJavaTypeNameImpl : ASTWrapperPsiElement, SqlDelightJavaTypeName","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-java-type-name/#sqldelightjavatypename","text":"interface SqlDelightJavaTypeName : PsiElement","title":"SqlDelightJavaTypeName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-java-type-name/#functions","text":"Name Summary getParameterizedJavaType abstract fun getParameterizedJavaType(): SqlDelightParameterizedJavaType ?","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-java-type-name/#inheritors","text":"Name Summary SqlDelightJavaTypeNameImpl open class SqlDelightJavaTypeNameImpl : ASTWrapperPsiElement, SqlDelightJavaTypeName","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-java-type-name/get-parameterized-java-type/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightJavaTypeName / getParameterizedJavaType getParameterizedJavaType @Nullable abstract fun getParameterizedJavaType(): SqlDelightParameterizedJavaType ?","title":"Get parameterized java type"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-java-type-name/get-parameterized-java-type/#getparameterizedjavatype","text":"@Nullable abstract fun getParameterizedJavaType(): SqlDelightParameterizedJavaType ?","title":"getParameterizedJavaType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-java-type-name2/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightJavaTypeName2 SqlDelightJavaTypeName2 interface SqlDelightJavaTypeName2 : PsiElement Functions Name Summary getJavaType abstract fun getJavaType(): SqlDelightJavaType Inheritors Name Summary SqlDelightJavaTypeName2Impl open class SqlDelightJavaTypeName2Impl : ASTWrapperPsiElement, SqlDelightJavaTypeName2","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-java-type-name2/#sqldelightjavatypename2","text":"interface SqlDelightJavaTypeName2 : PsiElement","title":"SqlDelightJavaTypeName2"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-java-type-name2/#functions","text":"Name Summary getJavaType abstract fun getJavaType(): SqlDelightJavaType","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-java-type-name2/#inheritors","text":"Name Summary SqlDelightJavaTypeName2Impl open class SqlDelightJavaTypeName2Impl : ASTWrapperPsiElement, SqlDelightJavaTypeName2","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-java-type-name2/get-java-type/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightJavaTypeName2 / getJavaType getJavaType @NotNull abstract fun getJavaType(): SqlDelightJavaType","title":"Get java type"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-java-type-name2/get-java-type/#getjavatype","text":"@NotNull abstract fun getJavaType(): SqlDelightJavaType","title":"getJavaType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-overrides/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightOverrides SqlDelightOverrides interface SqlDelightOverrides : PsiElement Functions Name Summary getColumnDef abstract fun getColumnDef(): SqlDelightColumnDef ? getInsertStmtValues abstract fun getInsertStmtValues(): SqlDelightInsertStmtValues ? getStmtList abstract fun getStmtList(): SqlDelightStmtList ? Inheritors Name Summary SqlDelightOverridesImpl open class SqlDelightOverridesImpl : ASTWrapperPsiElement, SqlDelightOverrides","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-overrides/#sqldelightoverrides","text":"interface SqlDelightOverrides : PsiElement","title":"SqlDelightOverrides"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-overrides/#functions","text":"Name Summary getColumnDef abstract fun getColumnDef(): SqlDelightColumnDef ? getInsertStmtValues abstract fun getInsertStmtValues(): SqlDelightInsertStmtValues ? getStmtList abstract fun getStmtList(): SqlDelightStmtList ?","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-overrides/#inheritors","text":"Name Summary SqlDelightOverridesImpl open class SqlDelightOverridesImpl : ASTWrapperPsiElement, SqlDelightOverrides","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-overrides/get-column-def/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightOverrides / getColumnDef getColumnDef @Nullable abstract fun getColumnDef(): SqlDelightColumnDef ?","title":"Get column def"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-overrides/get-column-def/#getcolumndef","text":"@Nullable abstract fun getColumnDef(): SqlDelightColumnDef ?","title":"getColumnDef"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-overrides/get-insert-stmt-values/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightOverrides / getInsertStmtValues getInsertStmtValues @Nullable abstract fun getInsertStmtValues(): SqlDelightInsertStmtValues ?","title":"Get insert stmt values"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-overrides/get-insert-stmt-values/#getinsertstmtvalues","text":"@Nullable abstract fun getInsertStmtValues(): SqlDelightInsertStmtValues ?","title":"getInsertStmtValues"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-overrides/get-stmt-list/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightOverrides / getStmtList getStmtList @Nullable abstract fun getStmtList(): SqlDelightStmtList ?","title":"Get stmt list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-overrides/get-stmt-list/#getstmtlist","text":"@Nullable abstract fun getStmtList(): SqlDelightStmtList ?","title":"getStmtList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-parameterized-java-type/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightParameterizedJavaType SqlDelightParameterizedJavaType interface SqlDelightParameterizedJavaType : PsiElement Functions Name Summary getJavaTypeList abstract fun getJavaTypeList(): MutableList < SqlDelightJavaType !> getJavaTypeName2List abstract fun getJavaTypeName2List(): MutableList < SqlDelightJavaTypeName2 !> getJavaTypeNameList abstract fun getJavaTypeNameList(): MutableList < SqlDelightJavaTypeName !> Inheritors Name Summary SqlDelightParameterizedJavaTypeImpl open class SqlDelightParameterizedJavaTypeImpl : ASTWrapperPsiElement, SqlDelightParameterizedJavaType","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-parameterized-java-type/#sqldelightparameterizedjavatype","text":"interface SqlDelightParameterizedJavaType : PsiElement","title":"SqlDelightParameterizedJavaType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-parameterized-java-type/#functions","text":"Name Summary getJavaTypeList abstract fun getJavaTypeList(): MutableList < SqlDelightJavaType !> getJavaTypeName2List abstract fun getJavaTypeName2List(): MutableList < SqlDelightJavaTypeName2 !> getJavaTypeNameList abstract fun getJavaTypeNameList(): MutableList < SqlDelightJavaTypeName !>","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-parameterized-java-type/#inheritors","text":"Name Summary SqlDelightParameterizedJavaTypeImpl open class SqlDelightParameterizedJavaTypeImpl : ASTWrapperPsiElement, SqlDelightParameterizedJavaType","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-parameterized-java-type/get-java-type-list/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightParameterizedJavaType / getJavaTypeList getJavaTypeList @NotNull abstract fun getJavaTypeList(): MutableList < SqlDelightJavaType !>","title":"Get java type list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-parameterized-java-type/get-java-type-list/#getjavatypelist","text":"@NotNull abstract fun getJavaTypeList(): MutableList < SqlDelightJavaType !>","title":"getJavaTypeList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-parameterized-java-type/get-java-type-name-list/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightParameterizedJavaType / getJavaTypeNameList getJavaTypeNameList @NotNull abstract fun getJavaTypeNameList(): MutableList < SqlDelightJavaTypeName !>","title":"Get java type name list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-parameterized-java-type/get-java-type-name-list/#getjavatypenamelist","text":"@NotNull abstract fun getJavaTypeNameList(): MutableList < SqlDelightJavaTypeName !>","title":"getJavaTypeNameList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-parameterized-java-type/get-java-type-name2-list/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightParameterizedJavaType / getJavaTypeName2List getJavaTypeName2List @NotNull abstract fun getJavaTypeName2List(): MutableList < SqlDelightJavaTypeName2 !>","title":"Get java type name2 list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-parameterized-java-type/get-java-type-name2-list/#getjavatypename2list","text":"@NotNull abstract fun getJavaTypeName2List(): MutableList < SqlDelightJavaTypeName2 !>","title":"getJavaTypeName2List"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-clojure/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightStmtClojure SqlDelightStmtClojure interface SqlDelightStmtClojure : SqlCompositeElement Functions Name Summary getStmtClojureStmtList abstract fun getStmtClojureStmtList(): SqlDelightStmtClojureStmtList ? getStmtIdentifierClojure abstract fun getStmtIdentifierClojure(): SqlDelightStmtIdentifierClojure Inheritors Name Summary SqlDelightStmtClojureImpl open class SqlDelightStmtClojureImpl : SqlCompositeElementImpl, SqlDelightStmtClojure","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-clojure/#sqldelightstmtclojure","text":"interface SqlDelightStmtClojure : SqlCompositeElement","title":"SqlDelightStmtClojure"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-clojure/#functions","text":"Name Summary getStmtClojureStmtList abstract fun getStmtClojureStmtList(): SqlDelightStmtClojureStmtList ? getStmtIdentifierClojure abstract fun getStmtIdentifierClojure(): SqlDelightStmtIdentifierClojure","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-clojure/#inheritors","text":"Name Summary SqlDelightStmtClojureImpl open class SqlDelightStmtClojureImpl : SqlCompositeElementImpl, SqlDelightStmtClojure","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-clojure/get-stmt-clojure-stmt-list/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightStmtClojure / getStmtClojureStmtList getStmtClojureStmtList @Nullable abstract fun getStmtClojureStmtList(): SqlDelightStmtClojureStmtList ?","title":"Get stmt clojure stmt list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-clojure/get-stmt-clojure-stmt-list/#getstmtclojurestmtlist","text":"@Nullable abstract fun getStmtClojureStmtList(): SqlDelightStmtClojureStmtList ?","title":"getStmtClojureStmtList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-clojure/get-stmt-identifier-clojure/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightStmtClojure / getStmtIdentifierClojure getStmtIdentifierClojure @NotNull abstract fun getStmtIdentifierClojure(): SqlDelightStmtIdentifierClojure","title":"Get stmt identifier clojure"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-clojure/get-stmt-identifier-clojure/#getstmtidentifierclojure","text":"@NotNull abstract fun getStmtIdentifierClojure(): SqlDelightStmtIdentifierClojure","title":"getStmtIdentifierClojure"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-list/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightStmtList SqlDelightStmtList interface SqlDelightStmtList : SqlStmtList Functions Name Summary getImportStmtList abstract fun getImportStmtList(): SqlDelightImportStmtList getStmtClojureList abstract fun getStmtClojureList(): MutableList < SqlDelightStmtClojure !> getStmtIdentifierList abstract fun getStmtIdentifierList(): MutableList < SqlDelightStmtIdentifier !> Inheritors Name Summary SqlDelightStmtListImpl open class SqlDelightStmtListImpl : SqlStmtListImpl, SqlDelightStmtList","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-list/#sqldelightstmtlist","text":"interface SqlDelightStmtList : SqlStmtList","title":"SqlDelightStmtList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-list/#functions","text":"Name Summary getImportStmtList abstract fun getImportStmtList(): SqlDelightImportStmtList getStmtClojureList abstract fun getStmtClojureList(): MutableList < SqlDelightStmtClojure !> getStmtIdentifierList abstract fun getStmtIdentifierList(): MutableList < SqlDelightStmtIdentifier !>","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-list/#inheritors","text":"Name Summary SqlDelightStmtListImpl open class SqlDelightStmtListImpl : SqlStmtListImpl, SqlDelightStmtList","title":"Inheritors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-list/get-import-stmt-list/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightStmtList / getImportStmtList getImportStmtList @NotNull abstract fun getImportStmtList(): SqlDelightImportStmtList","title":"Get import stmt list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-list/get-import-stmt-list/#getimportstmtlist","text":"@NotNull abstract fun getImportStmtList(): SqlDelightImportStmtList","title":"getImportStmtList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-list/get-stmt-clojure-list/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightStmtList / getStmtClojureList getStmtClojureList @NotNull abstract fun getStmtClojureList(): MutableList < SqlDelightStmtClojure !>","title":"Get stmt clojure list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-list/get-stmt-clojure-list/#getstmtclojurelist","text":"@NotNull abstract fun getStmtClojureList(): MutableList < SqlDelightStmtClojure !>","title":"getStmtClojureList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-list/get-stmt-identifier-list/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightStmtList / getStmtIdentifierList getStmtIdentifierList @NotNull abstract fun getStmtIdentifierList(): MutableList < SqlDelightStmtIdentifier !>","title":"Get stmt identifier list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-stmt-list/get-stmt-identifier-list/#getstmtidentifierlist","text":"@NotNull abstract fun getStmtIdentifierList(): MutableList < SqlDelightStmtIdentifier !>","title":"getStmtIdentifierList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor SqlDelightVisitor open class SqlDelightVisitor : PsiElementVisitor Constructors Name Summary <init> SqlDelightVisitor() Functions Name Summary visitAnnotation open fun visitAnnotation(o: SqlDelightAnnotation ): Unit visitAnnotationValue open fun visitAnnotationValue(o: SqlDelightAnnotationValue ): Unit visitColumnDef open fun visitColumnDef(o: SqlDelightColumnDef ): Unit visitImportStmt open fun visitImportStmt(o: SqlDelightImportStmt ): Unit visitImportStmtList open fun visitImportStmtList(o: SqlDelightImportStmtList ): Unit visitInsertStmtValues open fun visitInsertStmtValues(o: SqlDelightInsertStmtValues ): Unit visitInsertStmtValuesReal open fun visitInsertStmtValuesReal(o: SqlDelightInsertStmtValuesReal ): Unit visitJavaType open fun visitJavaType(o: SqlDelightJavaType ): Unit visitJavaTypeName open fun visitJavaTypeName(o: SqlDelightJavaTypeName ): Unit visitJavaTypeName2 open fun visitJavaTypeName2(o: SqlDelightJavaTypeName2 ): Unit visitOverrides open fun visitOverrides(o: SqlDelightOverrides ): Unit visitParameterizedJavaType open fun visitParameterizedJavaType(o: SqlDelightParameterizedJavaType ): Unit visitPsiElement open fun visitPsiElement(o: PsiElement): Unit visitSqlColumnDef open fun visitSqlColumnDef(o: SqlColumnDef): Unit visitSqlCompositeElement open fun visitSqlCompositeElement(o: SqlCompositeElement): Unit visitSqlInsertStmtValues open fun visitSqlInsertStmtValues(o: SqlInsertStmtValues): Unit visitSqlStmtList open fun visitSqlStmtList(o: SqlStmtList): Unit visitStmtClojure open fun visitStmtClojure(o: SqlDelightStmtClojure ): Unit visitStmtClojureStmtList open fun visitStmtClojureStmtList(o: SqlDelightStmtClojureStmtList ): Unit visitStmtIdentifier open fun visitStmtIdentifier(o: SqlDelightStmtIdentifier ): Unit visitStmtIdentifierClojure open fun visitStmtIdentifierClojure(o: SqlDelightStmtIdentifierClojure ): Unit visitStmtList open fun visitStmtList(o: SqlDelightStmtList ): Unit","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/#sqldelightvisitor","text":"open class SqlDelightVisitor : PsiElementVisitor","title":"SqlDelightVisitor"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/#constructors","text":"Name Summary <init> SqlDelightVisitor()","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/#functions","text":"Name Summary visitAnnotation open fun visitAnnotation(o: SqlDelightAnnotation ): Unit visitAnnotationValue open fun visitAnnotationValue(o: SqlDelightAnnotationValue ): Unit visitColumnDef open fun visitColumnDef(o: SqlDelightColumnDef ): Unit visitImportStmt open fun visitImportStmt(o: SqlDelightImportStmt ): Unit visitImportStmtList open fun visitImportStmtList(o: SqlDelightImportStmtList ): Unit visitInsertStmtValues open fun visitInsertStmtValues(o: SqlDelightInsertStmtValues ): Unit visitInsertStmtValuesReal open fun visitInsertStmtValuesReal(o: SqlDelightInsertStmtValuesReal ): Unit visitJavaType open fun visitJavaType(o: SqlDelightJavaType ): Unit visitJavaTypeName open fun visitJavaTypeName(o: SqlDelightJavaTypeName ): Unit visitJavaTypeName2 open fun visitJavaTypeName2(o: SqlDelightJavaTypeName2 ): Unit visitOverrides open fun visitOverrides(o: SqlDelightOverrides ): Unit visitParameterizedJavaType open fun visitParameterizedJavaType(o: SqlDelightParameterizedJavaType ): Unit visitPsiElement open fun visitPsiElement(o: PsiElement): Unit visitSqlColumnDef open fun visitSqlColumnDef(o: SqlColumnDef): Unit visitSqlCompositeElement open fun visitSqlCompositeElement(o: SqlCompositeElement): Unit visitSqlInsertStmtValues open fun visitSqlInsertStmtValues(o: SqlInsertStmtValues): Unit visitSqlStmtList open fun visitSqlStmtList(o: SqlStmtList): Unit visitStmtClojure open fun visitStmtClojure(o: SqlDelightStmtClojure ): Unit visitStmtClojureStmtList open fun visitStmtClojureStmtList(o: SqlDelightStmtClojureStmtList ): Unit visitStmtIdentifier open fun visitStmtIdentifier(o: SqlDelightStmtIdentifier ): Unit visitStmtIdentifierClojure open fun visitStmtIdentifierClojure(o: SqlDelightStmtIdentifierClojure ): Unit visitStmtList open fun visitStmtList(o: SqlDelightStmtList ): Unit","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / <init> <init> SqlDelightVisitor()","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/-init-/#init","text":"SqlDelightVisitor()","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-annotation-value/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitAnnotationValue visitAnnotationValue open fun visitAnnotationValue(@NotNull o: SqlDelightAnnotationValue ): Unit","title":"Visit annotation value"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-annotation-value/#visitannotationvalue","text":"open fun visitAnnotationValue(@NotNull o: SqlDelightAnnotationValue ): Unit","title":"visitAnnotationValue"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-annotation/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitAnnotation visitAnnotation open fun visitAnnotation(@NotNull o: SqlDelightAnnotation ): Unit","title":"Visit annotation"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-annotation/#visitannotation","text":"open fun visitAnnotation(@NotNull o: SqlDelightAnnotation ): Unit","title":"visitAnnotation"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-column-def/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitColumnDef visitColumnDef open fun visitColumnDef(@NotNull o: SqlDelightColumnDef ): Unit","title":"Visit column def"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-column-def/#visitcolumndef","text":"open fun visitColumnDef(@NotNull o: SqlDelightColumnDef ): Unit","title":"visitColumnDef"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-import-stmt-list/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitImportStmtList visitImportStmtList open fun visitImportStmtList(@NotNull o: SqlDelightImportStmtList ): Unit","title":"Visit import stmt list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-import-stmt-list/#visitimportstmtlist","text":"open fun visitImportStmtList(@NotNull o: SqlDelightImportStmtList ): Unit","title":"visitImportStmtList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-import-stmt/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitImportStmt visitImportStmt open fun visitImportStmt(@NotNull o: SqlDelightImportStmt ): Unit","title":"Visit import stmt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-import-stmt/#visitimportstmt","text":"open fun visitImportStmt(@NotNull o: SqlDelightImportStmt ): Unit","title":"visitImportStmt"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-insert-stmt-values-real/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitInsertStmtValuesReal visitInsertStmtValuesReal open fun visitInsertStmtValuesReal(@NotNull o: SqlDelightInsertStmtValuesReal ): Unit","title":"Visit insert stmt values real"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-insert-stmt-values-real/#visitinsertstmtvaluesreal","text":"open fun visitInsertStmtValuesReal(@NotNull o: SqlDelightInsertStmtValuesReal ): Unit","title":"visitInsertStmtValuesReal"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-insert-stmt-values/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitInsertStmtValues visitInsertStmtValues open fun visitInsertStmtValues(@NotNull o: SqlDelightInsertStmtValues ): Unit","title":"Visit insert stmt values"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-insert-stmt-values/#visitinsertstmtvalues","text":"open fun visitInsertStmtValues(@NotNull o: SqlDelightInsertStmtValues ): Unit","title":"visitInsertStmtValues"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-java-type-name/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitJavaTypeName visitJavaTypeName open fun visitJavaTypeName(@NotNull o: SqlDelightJavaTypeName ): Unit","title":"Visit java type name"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-java-type-name/#visitjavatypename","text":"open fun visitJavaTypeName(@NotNull o: SqlDelightJavaTypeName ): Unit","title":"visitJavaTypeName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-java-type-name2/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitJavaTypeName2 visitJavaTypeName2 open fun visitJavaTypeName2(@NotNull o: SqlDelightJavaTypeName2 ): Unit","title":"Visit java type name2"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-java-type-name2/#visitjavatypename2","text":"open fun visitJavaTypeName2(@NotNull o: SqlDelightJavaTypeName2 ): Unit","title":"visitJavaTypeName2"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-java-type/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitJavaType visitJavaType open fun visitJavaType(@NotNull o: SqlDelightJavaType ): Unit","title":"Visit java type"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-java-type/#visitjavatype","text":"open fun visitJavaType(@NotNull o: SqlDelightJavaType ): Unit","title":"visitJavaType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-overrides/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitOverrides visitOverrides open fun visitOverrides(@NotNull o: SqlDelightOverrides ): Unit","title":"Visit overrides"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-overrides/#visitoverrides","text":"open fun visitOverrides(@NotNull o: SqlDelightOverrides ): Unit","title":"visitOverrides"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-parameterized-java-type/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitParameterizedJavaType visitParameterizedJavaType open fun visitParameterizedJavaType(@NotNull o: SqlDelightParameterizedJavaType ): Unit","title":"Visit parameterized java type"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-parameterized-java-type/#visitparameterizedjavatype","text":"open fun visitParameterizedJavaType(@NotNull o: SqlDelightParameterizedJavaType ): Unit","title":"visitParameterizedJavaType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-psi-element/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitPsiElement visitPsiElement open fun visitPsiElement(@NotNull o: PsiElement): Unit","title":"Visit psi element"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-psi-element/#visitpsielement","text":"open fun visitPsiElement(@NotNull o: PsiElement): Unit","title":"visitPsiElement"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-sql-column-def/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitSqlColumnDef visitSqlColumnDef open fun visitSqlColumnDef(@NotNull o: SqlColumnDef): Unit","title":"Visit sql column def"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-sql-column-def/#visitsqlcolumndef","text":"open fun visitSqlColumnDef(@NotNull o: SqlColumnDef): Unit","title":"visitSqlColumnDef"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-sql-composite-element/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitSqlCompositeElement visitSqlCompositeElement open fun visitSqlCompositeElement(@NotNull o: SqlCompositeElement): Unit","title":"Visit sql composite element"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-sql-composite-element/#visitsqlcompositeelement","text":"open fun visitSqlCompositeElement(@NotNull o: SqlCompositeElement): Unit","title":"visitSqlCompositeElement"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-sql-insert-stmt-values/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitSqlInsertStmtValues visitSqlInsertStmtValues open fun visitSqlInsertStmtValues(@NotNull o: SqlInsertStmtValues): Unit","title":"Visit sql insert stmt values"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-sql-insert-stmt-values/#visitsqlinsertstmtvalues","text":"open fun visitSqlInsertStmtValues(@NotNull o: SqlInsertStmtValues): Unit","title":"visitSqlInsertStmtValues"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-sql-stmt-list/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitSqlStmtList visitSqlStmtList open fun visitSqlStmtList(@NotNull o: SqlStmtList): Unit","title":"Visit sql stmt list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-sql-stmt-list/#visitsqlstmtlist","text":"open fun visitSqlStmtList(@NotNull o: SqlStmtList): Unit","title":"visitSqlStmtList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-stmt-clojure-stmt-list/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitStmtClojureStmtList visitStmtClojureStmtList open fun visitStmtClojureStmtList(@NotNull o: SqlDelightStmtClojureStmtList ): Unit","title":"Visit stmt clojure stmt list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-stmt-clojure-stmt-list/#visitstmtclojurestmtlist","text":"open fun visitStmtClojureStmtList(@NotNull o: SqlDelightStmtClojureStmtList ): Unit","title":"visitStmtClojureStmtList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-stmt-clojure/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitStmtClojure visitStmtClojure open fun visitStmtClojure(@NotNull o: SqlDelightStmtClojure ): Unit","title":"Visit stmt clojure"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-stmt-clojure/#visitstmtclojure","text":"open fun visitStmtClojure(@NotNull o: SqlDelightStmtClojure ): Unit","title":"visitStmtClojure"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-stmt-identifier-clojure/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitStmtIdentifierClojure visitStmtIdentifierClojure open fun visitStmtIdentifierClojure(@NotNull o: SqlDelightStmtIdentifierClojure ): Unit","title":"Visit stmt identifier clojure"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-stmt-identifier-clojure/#visitstmtidentifierclojure","text":"open fun visitStmtIdentifierClojure(@NotNull o: SqlDelightStmtIdentifierClojure ): Unit","title":"visitStmtIdentifierClojure"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-stmt-identifier/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitStmtIdentifier visitStmtIdentifier open fun visitStmtIdentifier(@NotNull o: SqlDelightStmtIdentifier ): Unit","title":"Visit stmt identifier"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-stmt-identifier/#visitstmtidentifier","text":"open fun visitStmtIdentifier(@NotNull o: SqlDelightStmtIdentifier ): Unit","title":"visitStmtIdentifier"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-stmt-list/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqlDelightVisitor / visitStmtList visitStmtList open fun visitStmtList(@NotNull o: SqlDelightStmtList ): Unit","title":"Visit stmt list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sql-delight-visitor/visit-stmt-list/#visitstmtlist","text":"open fun visitStmtList(@NotNull o: SqlDelightStmtList ): Unit","title":"visitStmtList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes SqldelightTypes interface SqldelightTypes Types Name Summary Factory open class Factory Properties Name Summary ANNOTATION static val ANNOTATION: IElementType! ANNOTATION_VALUE static val ANNOTATION_VALUE: IElementType! COLUMN_DEF static val COLUMN_DEF: IElementType! DEFAULT static val DEFAULT: IElementType! IMPORT_STMT static val IMPORT_STMT: IElementType! IMPORT_STMT_LIST static val IMPORT_STMT_LIST: IElementType! INSERT_STMT_VALUES_REAL static val INSERT_STMT_VALUES_REAL: IElementType! JAVA_TYPE static val JAVA_TYPE: IElementType! JAVA_TYPE_NAME static val JAVA_TYPE_NAME: IElementType! JAVA_TYPE_NAME_2 static val JAVA_TYPE_NAME_2: IElementType! JAVADOC static val JAVADOC: IElementType! OVERRIDES static val OVERRIDES: IElementType! PARAMETERIZED_JAVA_TYPE static val PARAMETERIZED_JAVA_TYPE: IElementType! STMT_CLOJURE static val STMT_CLOJURE: IElementType! STMT_CLOJURE_STMT_LIST static val STMT_CLOJURE_STMT_LIST: IElementType! STMT_IDENTIFIER static val STMT_IDENTIFIER: IElementType! STMT_IDENTIFIER_CLOJURE static val STMT_IDENTIFIER_CLOJURE: IElementType! STMT_LIST static val STMT_LIST: IElementType! VALUES static val VALUES: IElementType!","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/#sqldelighttypes","text":"interface SqldelightTypes","title":"SqldelightTypes"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/#types","text":"Name Summary Factory open class Factory","title":"Types"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/#properties","text":"Name Summary ANNOTATION static val ANNOTATION: IElementType! ANNOTATION_VALUE static val ANNOTATION_VALUE: IElementType! COLUMN_DEF static val COLUMN_DEF: IElementType! DEFAULT static val DEFAULT: IElementType! IMPORT_STMT static val IMPORT_STMT: IElementType! IMPORT_STMT_LIST static val IMPORT_STMT_LIST: IElementType! INSERT_STMT_VALUES_REAL static val INSERT_STMT_VALUES_REAL: IElementType! JAVA_TYPE static val JAVA_TYPE: IElementType! JAVA_TYPE_NAME static val JAVA_TYPE_NAME: IElementType! JAVA_TYPE_NAME_2 static val JAVA_TYPE_NAME_2: IElementType! JAVADOC static val JAVADOC: IElementType! OVERRIDES static val OVERRIDES: IElementType! PARAMETERIZED_JAVA_TYPE static val PARAMETERIZED_JAVA_TYPE: IElementType! STMT_CLOJURE static val STMT_CLOJURE: IElementType! STMT_CLOJURE_STMT_LIST static val STMT_CLOJURE_STMT_LIST: IElementType! STMT_IDENTIFIER static val STMT_IDENTIFIER: IElementType! STMT_IDENTIFIER_CLOJURE static val STMT_IDENTIFIER_CLOJURE: IElementType! STMT_LIST static val STMT_LIST: IElementType! VALUES static val VALUES: IElementType!","title":"Properties"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-a-n-n-o-t-a-t-i-o-n/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / ANNOTATION ANNOTATION static val ANNOTATION: IElementType!","title":" a n n o t a t i o n"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-a-n-n-o-t-a-t-i-o-n/#annotation","text":"static val ANNOTATION: IElementType!","title":"ANNOTATION"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-a-n-n-o-t-a-t-i-o-n_-v-a-l-u-e/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / ANNOTATION_VALUE ANNOTATION_VALUE static val ANNOTATION_VALUE: IElementType!","title":" a n n o t a t i o n  v a l u e"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-a-n-n-o-t-a-t-i-o-n_-v-a-l-u-e/#annotation_value","text":"static val ANNOTATION_VALUE: IElementType!","title":"ANNOTATION_VALUE"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-c-o-l-u-m-n_-d-e-f/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / COLUMN_DEF COLUMN_DEF static val COLUMN_DEF: IElementType!","title":" c o l u m n  d e f"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-c-o-l-u-m-n_-d-e-f/#column_def","text":"static val COLUMN_DEF: IElementType!","title":"COLUMN_DEF"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-d-e-f-a-u-l-t/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / DEFAULT DEFAULT static val DEFAULT: IElementType!","title":" d e f a u l t"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-d-e-f-a-u-l-t/#default","text":"static val DEFAULT: IElementType!","title":"DEFAULT"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-i-m-p-o-r-t_-s-t-m-t/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / IMPORT_STMT IMPORT_STMT static val IMPORT_STMT: IElementType!","title":" i m p o r t  s t m t"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-i-m-p-o-r-t_-s-t-m-t/#import_stmt","text":"static val IMPORT_STMT: IElementType!","title":"IMPORT_STMT"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-i-m-p-o-r-t_-s-t-m-t_-l-i-s-t/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / IMPORT_STMT_LIST IMPORT_STMT_LIST static val IMPORT_STMT_LIST: IElementType!","title":" i m p o r t  s t m t  l i s t"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-i-m-p-o-r-t_-s-t-m-t_-l-i-s-t/#import_stmt_list","text":"static val IMPORT_STMT_LIST: IElementType!","title":"IMPORT_STMT_LIST"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-i-n-s-e-r-t_-s-t-m-t_-v-a-l-u-e-s_-r-e-a-l/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / INSERT_STMT_VALUES_REAL INSERT_STMT_VALUES_REAL static val INSERT_STMT_VALUES_REAL: IElementType!","title":" i n s e r t  s t m t  v a l u e s  r e a l"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-i-n-s-e-r-t_-s-t-m-t_-v-a-l-u-e-s_-r-e-a-l/#insert_stmt_values_real","text":"static val INSERT_STMT_VALUES_REAL: IElementType!","title":"INSERT_STMT_VALUES_REAL"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-j-a-v-a-d-o-c/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / JAVADOC JAVADOC static val JAVADOC: IElementType!","title":" j a v a d o c"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-j-a-v-a-d-o-c/#javadoc","text":"static val JAVADOC: IElementType!","title":"JAVADOC"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-j-a-v-a_-t-y-p-e/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / JAVA_TYPE JAVA_TYPE static val JAVA_TYPE: IElementType!","title":" j a v a  t y p e"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-j-a-v-a_-t-y-p-e/#java_type","text":"static val JAVA_TYPE: IElementType!","title":"JAVA_TYPE"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-j-a-v-a_-t-y-p-e_-n-a-m-e/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / JAVA_TYPE_NAME JAVA_TYPE_NAME static val JAVA_TYPE_NAME: IElementType!","title":" j a v a  t y p e  n a m e"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-j-a-v-a_-t-y-p-e_-n-a-m-e/#java_type_name","text":"static val JAVA_TYPE_NAME: IElementType!","title":"JAVA_TYPE_NAME"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-j-a-v-a_-t-y-p-e_-n-a-m-e_2/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / JAVA_TYPE_NAME_2 JAVA_TYPE_NAME_2 static val JAVA_TYPE_NAME_2: IElementType!","title":" j a v a  t y p e  n a m e 2"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-j-a-v-a_-t-y-p-e_-n-a-m-e_2/#java_type_name_2","text":"static val JAVA_TYPE_NAME_2: IElementType!","title":"JAVA_TYPE_NAME_2"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-o-v-e-r-r-i-d-e-s/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / OVERRIDES OVERRIDES static val OVERRIDES: IElementType!","title":" o v e r r i d e s"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-o-v-e-r-r-i-d-e-s/#overrides","text":"static val OVERRIDES: IElementType!","title":"OVERRIDES"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-p-a-r-a-m-e-t-e-r-i-z-e-d_-j-a-v-a_-t-y-p-e/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / PARAMETERIZED_JAVA_TYPE PARAMETERIZED_JAVA_TYPE static val PARAMETERIZED_JAVA_TYPE: IElementType!","title":" p a r a m e t e r i z e d  j a v a  t y p e"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-p-a-r-a-m-e-t-e-r-i-z-e-d_-j-a-v-a_-t-y-p-e/#parameterized_java_type","text":"static val PARAMETERIZED_JAVA_TYPE: IElementType!","title":"PARAMETERIZED_JAVA_TYPE"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-s-t-m-t_-c-l-o-j-u-r-e/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / STMT_CLOJURE STMT_CLOJURE static val STMT_CLOJURE: IElementType!","title":" s t m t  c l o j u r e"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-s-t-m-t_-c-l-o-j-u-r-e/#stmt_clojure","text":"static val STMT_CLOJURE: IElementType!","title":"STMT_CLOJURE"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-s-t-m-t_-c-l-o-j-u-r-e_-s-t-m-t_-l-i-s-t/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / STMT_CLOJURE_STMT_LIST STMT_CLOJURE_STMT_LIST static val STMT_CLOJURE_STMT_LIST: IElementType!","title":" s t m t  c l o j u r e  s t m t  l i s t"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-s-t-m-t_-c-l-o-j-u-r-e_-s-t-m-t_-l-i-s-t/#stmt_clojure_stmt_list","text":"static val STMT_CLOJURE_STMT_LIST: IElementType!","title":"STMT_CLOJURE_STMT_LIST"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-s-t-m-t_-i-d-e-n-t-i-f-i-e-r/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / STMT_IDENTIFIER STMT_IDENTIFIER static val STMT_IDENTIFIER: IElementType!","title":" s t m t  i d e n t i f i e r"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-s-t-m-t_-i-d-e-n-t-i-f-i-e-r/#stmt_identifier","text":"static val STMT_IDENTIFIER: IElementType!","title":"STMT_IDENTIFIER"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-s-t-m-t_-i-d-e-n-t-i-f-i-e-r_-c-l-o-j-u-r-e/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / STMT_IDENTIFIER_CLOJURE STMT_IDENTIFIER_CLOJURE static val STMT_IDENTIFIER_CLOJURE: IElementType!","title":" s t m t  i d e n t i f i e r  c l o j u r e"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-s-t-m-t_-i-d-e-n-t-i-f-i-e-r_-c-l-o-j-u-r-e/#stmt_identifier_clojure","text":"static val STMT_IDENTIFIER_CLOJURE: IElementType!","title":"STMT_IDENTIFIER_CLOJURE"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-s-t-m-t_-l-i-s-t/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / STMT_LIST STMT_LIST static val STMT_LIST: IElementType!","title":" s t m t  l i s t"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-s-t-m-t_-l-i-s-t/#stmt_list","text":"static val STMT_LIST: IElementType!","title":"STMT_LIST"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-v-a-l-u-e-s/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / VALUES VALUES static val VALUES: IElementType!","title":" v a l u e s"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-v-a-l-u-e-s/#values","text":"static val VALUES: IElementType!","title":"VALUES"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-factory/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / Factory Factory open class Factory Constructors Name Summary <init> Factory() Functions Name Summary createElement open static fun createElement(node: ASTNode!): PsiElement!","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-factory/#factory","text":"open class Factory","title":"Factory"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-factory/#constructors","text":"Name Summary <init> Factory()","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-factory/#functions","text":"Name Summary createElement open static fun createElement(node: ASTNode!): PsiElement!","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-factory/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / Factory / <init> <init> Factory()","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-factory/-init-/#init","text":"Factory()","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-factory/create-element/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi / SqldelightTypes / Factory / createElement createElement open static fun createElement(node: ASTNode!): PsiElement!","title":"Create element"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi/-sqldelight-types/-factory/create-element/#createelement","text":"open static fun createElement(node: ASTNode!): PsiElement!","title":"createElement"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl Package com.squareup.sqldelight.core.psi.impl Types Name Summary SqlDelightAnnotationImpl open class SqlDelightAnnotationImpl : ASTWrapperPsiElement, SqlDelightAnnotation SqlDelightAnnotationValueImpl open class SqlDelightAnnotationValueImpl : ASTWrapperPsiElement, SqlDelightAnnotationValue SqlDelightColumnDefImpl open class SqlDelightColumnDefImpl : ColumnDefMixin, SqlDelightColumnDef SqlDelightImportStmtImpl open class SqlDelightImportStmtImpl : ImportStmtMixin , SqlDelightImportStmt SqlDelightImportStmtListImpl open class SqlDelightImportStmtListImpl : ASTWrapperPsiElement, SqlDelightImportStmtList SqlDelightInsertStmtValuesImpl open class SqlDelightInsertStmtValuesImpl : InsertStmtValuesMixin , SqlDelightInsertStmtValues SqlDelightInsertStmtValuesRealImpl open class SqlDelightInsertStmtValuesRealImpl : InsertStmtValuesMixin , SqlDelightInsertStmtValuesReal SqlDelightJavaTypeImpl open class SqlDelightJavaTypeImpl : JavaTypeMixin , SqlDelightJavaType SqlDelightJavaTypeName2Impl open class SqlDelightJavaTypeName2Impl : ASTWrapperPsiElement, SqlDelightJavaTypeName2 SqlDelightJavaTypeNameImpl open class SqlDelightJavaTypeNameImpl : ASTWrapperPsiElement, SqlDelightJavaTypeName SqlDelightOverridesImpl open class SqlDelightOverridesImpl : ASTWrapperPsiElement, SqlDelightOverrides SqlDelightParameterizedJavaTypeImpl open class SqlDelightParameterizedJavaTypeImpl : ASTWrapperPsiElement, SqlDelightParameterizedJavaType SqlDelightStmtClojureImpl open class SqlDelightStmtClojureImpl : SqlCompositeElementImpl, SqlDelightStmtClojure SqlDelightStmtClojureStmtListImpl open class SqlDelightStmtClojureStmtListImpl : ClojureStmtListMixin , SqlDelightStmtClojureStmtList SqlDelightStmtIdentifierClojureImpl open class SqlDelightStmtIdentifierClojureImpl : StmtIdentifierMixin , SqlDelightStmtIdentifierClojure SqlDelightStmtIdentifierImpl open class SqlDelightStmtIdentifierImpl : StmtIdentifierMixin , SqlDelightStmtIdentifier SqlDelightStmtListImpl open class SqlDelightStmtListImpl : SqlStmtListImpl, SqlDelightStmtList","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/#package-comsquareupsqldelightcorepsiimpl","text":"","title":"Package com.squareup.sqldelight.core.psi.impl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/#types","text":"Name Summary SqlDelightAnnotationImpl open class SqlDelightAnnotationImpl : ASTWrapperPsiElement, SqlDelightAnnotation SqlDelightAnnotationValueImpl open class SqlDelightAnnotationValueImpl : ASTWrapperPsiElement, SqlDelightAnnotationValue SqlDelightColumnDefImpl open class SqlDelightColumnDefImpl : ColumnDefMixin, SqlDelightColumnDef SqlDelightImportStmtImpl open class SqlDelightImportStmtImpl : ImportStmtMixin , SqlDelightImportStmt SqlDelightImportStmtListImpl open class SqlDelightImportStmtListImpl : ASTWrapperPsiElement, SqlDelightImportStmtList SqlDelightInsertStmtValuesImpl open class SqlDelightInsertStmtValuesImpl : InsertStmtValuesMixin , SqlDelightInsertStmtValues SqlDelightInsertStmtValuesRealImpl open class SqlDelightInsertStmtValuesRealImpl : InsertStmtValuesMixin , SqlDelightInsertStmtValuesReal SqlDelightJavaTypeImpl open class SqlDelightJavaTypeImpl : JavaTypeMixin , SqlDelightJavaType SqlDelightJavaTypeName2Impl open class SqlDelightJavaTypeName2Impl : ASTWrapperPsiElement, SqlDelightJavaTypeName2 SqlDelightJavaTypeNameImpl open class SqlDelightJavaTypeNameImpl : ASTWrapperPsiElement, SqlDelightJavaTypeName SqlDelightOverridesImpl open class SqlDelightOverridesImpl : ASTWrapperPsiElement, SqlDelightOverrides SqlDelightParameterizedJavaTypeImpl open class SqlDelightParameterizedJavaTypeImpl : ASTWrapperPsiElement, SqlDelightParameterizedJavaType SqlDelightStmtClojureImpl open class SqlDelightStmtClojureImpl : SqlCompositeElementImpl, SqlDelightStmtClojure SqlDelightStmtClojureStmtListImpl open class SqlDelightStmtClojureStmtListImpl : ClojureStmtListMixin , SqlDelightStmtClojureStmtList SqlDelightStmtIdentifierClojureImpl open class SqlDelightStmtIdentifierClojureImpl : StmtIdentifierMixin , SqlDelightStmtIdentifierClojure SqlDelightStmtIdentifierImpl open class SqlDelightStmtIdentifierImpl : StmtIdentifierMixin , SqlDelightStmtIdentifier SqlDelightStmtListImpl open class SqlDelightStmtListImpl : SqlStmtListImpl, SqlDelightStmtList","title":"Types"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-impl/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightAnnotationImpl SqlDelightAnnotationImpl open class SqlDelightAnnotationImpl : ASTWrapperPsiElement, SqlDelightAnnotation Constructors Name Summary <init> SqlDelightAnnotationImpl(node: ASTNode) Functions Name Summary accept open fun accept(visitor: SqlDelightVisitor ): Unit open fun accept(visitor: PsiElementVisitor): Unit getAnnotationValueList open fun getAnnotationValueList(): MutableList < SqlDelightAnnotationValue !> getJavaType open fun getJavaType(): SqlDelightJavaType","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-impl/#sqldelightannotationimpl","text":"open class SqlDelightAnnotationImpl : ASTWrapperPsiElement, SqlDelightAnnotation","title":"SqlDelightAnnotationImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-impl/#constructors","text":"Name Summary <init> SqlDelightAnnotationImpl(node: ASTNode)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-impl/#functions","text":"Name Summary accept open fun accept(visitor: SqlDelightVisitor ): Unit open fun accept(visitor: PsiElementVisitor): Unit getAnnotationValueList open fun getAnnotationValueList(): MutableList < SqlDelightAnnotationValue !> getJavaType open fun getJavaType(): SqlDelightJavaType","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-impl/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightAnnotationImpl / <init> <init> SqlDelightAnnotationImpl(@NotNull node: ASTNode)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-impl/-init-/#init","text":"SqlDelightAnnotationImpl(@NotNull node: ASTNode)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-impl/accept/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightAnnotationImpl / accept accept open fun accept(@NotNull visitor: SqlDelightVisitor ): Unit open fun accept(@NotNull visitor: PsiElementVisitor): Unit","title":"Accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-impl/accept/#accept","text":"open fun accept(@NotNull visitor: SqlDelightVisitor ): Unit open fun accept(@NotNull visitor: PsiElementVisitor): Unit","title":"accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-impl/get-annotation-value-list/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightAnnotationImpl / getAnnotationValueList getAnnotationValueList @NotNull open fun getAnnotationValueList(): MutableList < SqlDelightAnnotationValue !> Overrides SqlDelightAnnotation.getAnnotationValueList","title":"Get annotation value list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-impl/get-annotation-value-list/#getannotationvaluelist","text":"@NotNull open fun getAnnotationValueList(): MutableList < SqlDelightAnnotationValue !> Overrides SqlDelightAnnotation.getAnnotationValueList","title":"getAnnotationValueList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-impl/get-java-type/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightAnnotationImpl / getJavaType getJavaType @NotNull open fun getJavaType(): SqlDelightJavaType Overrides SqlDelightAnnotation.getJavaType","title":"Get java type"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-impl/get-java-type/#getjavatype","text":"@NotNull open fun getJavaType(): SqlDelightJavaType Overrides SqlDelightAnnotation.getJavaType","title":"getJavaType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-value-impl/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightAnnotationValueImpl SqlDelightAnnotationValueImpl open class SqlDelightAnnotationValueImpl : ASTWrapperPsiElement, SqlDelightAnnotationValue Constructors Name Summary <init> SqlDelightAnnotationValueImpl(node: ASTNode) Functions Name Summary accept open fun accept(visitor: SqlDelightVisitor ): Unit open fun accept(visitor: PsiElementVisitor): Unit getAnnotation open fun getAnnotation(): SqlDelightAnnotation ? getAnnotationValueList open fun getAnnotationValueList(): MutableList < SqlDelightAnnotationValue !> getJavaTypeName open fun getJavaTypeName(): SqlDelightJavaTypeName ?","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-value-impl/#sqldelightannotationvalueimpl","text":"open class SqlDelightAnnotationValueImpl : ASTWrapperPsiElement, SqlDelightAnnotationValue","title":"SqlDelightAnnotationValueImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-value-impl/#constructors","text":"Name Summary <init> SqlDelightAnnotationValueImpl(node: ASTNode)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-value-impl/#functions","text":"Name Summary accept open fun accept(visitor: SqlDelightVisitor ): Unit open fun accept(visitor: PsiElementVisitor): Unit getAnnotation open fun getAnnotation(): SqlDelightAnnotation ? getAnnotationValueList open fun getAnnotationValueList(): MutableList < SqlDelightAnnotationValue !> getJavaTypeName open fun getJavaTypeName(): SqlDelightJavaTypeName ?","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-value-impl/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightAnnotationValueImpl / <init> <init> SqlDelightAnnotationValueImpl(@NotNull node: ASTNode)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-value-impl/-init-/#init","text":"SqlDelightAnnotationValueImpl(@NotNull node: ASTNode)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-value-impl/accept/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightAnnotationValueImpl / accept accept open fun accept(@NotNull visitor: SqlDelightVisitor ): Unit open fun accept(@NotNull visitor: PsiElementVisitor): Unit","title":"Accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-value-impl/accept/#accept","text":"open fun accept(@NotNull visitor: SqlDelightVisitor ): Unit open fun accept(@NotNull visitor: PsiElementVisitor): Unit","title":"accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-value-impl/get-annotation-value-list/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightAnnotationValueImpl / getAnnotationValueList getAnnotationValueList @NotNull open fun getAnnotationValueList(): MutableList < SqlDelightAnnotationValue !> Overrides SqlDelightAnnotationValue.getAnnotationValueList","title":"Get annotation value list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-value-impl/get-annotation-value-list/#getannotationvaluelist","text":"@NotNull open fun getAnnotationValueList(): MutableList < SqlDelightAnnotationValue !> Overrides SqlDelightAnnotationValue.getAnnotationValueList","title":"getAnnotationValueList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-value-impl/get-annotation/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightAnnotationValueImpl / getAnnotation getAnnotation @Nullable open fun getAnnotation(): SqlDelightAnnotation ? Overrides SqlDelightAnnotationValue.getAnnotation","title":"Get annotation"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-value-impl/get-annotation/#getannotation","text":"@Nullable open fun getAnnotation(): SqlDelightAnnotation ? Overrides SqlDelightAnnotationValue.getAnnotation","title":"getAnnotation"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-value-impl/get-java-type-name/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightAnnotationValueImpl / getJavaTypeName getJavaTypeName @Nullable open fun getJavaTypeName(): SqlDelightJavaTypeName ? Overrides SqlDelightAnnotationValue.getJavaTypeName","title":"Get java type name"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-annotation-value-impl/get-java-type-name/#getjavatypename","text":"@Nullable open fun getJavaTypeName(): SqlDelightJavaTypeName ? Overrides SqlDelightAnnotationValue.getJavaTypeName","title":"getJavaTypeName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-column-def-impl/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightColumnDefImpl SqlDelightColumnDefImpl open class SqlDelightColumnDefImpl : ColumnDefMixin, SqlDelightColumnDef Constructors Name Summary <init> SqlDelightColumnDefImpl(node: ASTNode!) Functions Name Summary accept open fun accept(visitor: SqlDelightVisitor ): Unit open fun accept(visitor: PsiElementVisitor): Unit getAnnotationList open fun getAnnotationList(): MutableList < SqlDelightAnnotation !> getJavaTypeName open fun getJavaTypeName(): SqlDelightJavaTypeName ?","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-column-def-impl/#sqldelightcolumndefimpl","text":"open class SqlDelightColumnDefImpl : ColumnDefMixin, SqlDelightColumnDef","title":"SqlDelightColumnDefImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-column-def-impl/#constructors","text":"Name Summary <init> SqlDelightColumnDefImpl(node: ASTNode!)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-column-def-impl/#functions","text":"Name Summary accept open fun accept(visitor: SqlDelightVisitor ): Unit open fun accept(visitor: PsiElementVisitor): Unit getAnnotationList open fun getAnnotationList(): MutableList < SqlDelightAnnotation !> getJavaTypeName open fun getJavaTypeName(): SqlDelightJavaTypeName ?","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-column-def-impl/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightColumnDefImpl / <init> <init> SqlDelightColumnDefImpl(node: ASTNode!)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-column-def-impl/-init-/#init","text":"SqlDelightColumnDefImpl(node: ASTNode!)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-column-def-impl/accept/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightColumnDefImpl / accept accept open fun accept(@NotNull visitor: SqlDelightVisitor ): Unit open fun accept(@NotNull visitor: PsiElementVisitor): Unit","title":"Accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-column-def-impl/accept/#accept","text":"open fun accept(@NotNull visitor: SqlDelightVisitor ): Unit open fun accept(@NotNull visitor: PsiElementVisitor): Unit","title":"accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-column-def-impl/get-annotation-list/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightColumnDefImpl / getAnnotationList getAnnotationList @NotNull open fun getAnnotationList(): MutableList < SqlDelightAnnotation !> Overrides SqlDelightColumnDef.getAnnotationList","title":"Get annotation list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-column-def-impl/get-annotation-list/#getannotationlist","text":"@NotNull open fun getAnnotationList(): MutableList < SqlDelightAnnotation !> Overrides SqlDelightColumnDef.getAnnotationList","title":"getAnnotationList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-column-def-impl/get-java-type-name/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightColumnDefImpl / getJavaTypeName getJavaTypeName @Nullable open fun getJavaTypeName(): SqlDelightJavaTypeName ? Overrides SqlDelightColumnDef.getJavaTypeName","title":"Get java type name"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-column-def-impl/get-java-type-name/#getjavatypename","text":"@Nullable open fun getJavaTypeName(): SqlDelightJavaTypeName ? Overrides SqlDelightColumnDef.getJavaTypeName","title":"getJavaTypeName"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-impl/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightImportStmtImpl SqlDelightImportStmtImpl open class SqlDelightImportStmtImpl : ImportStmtMixin , SqlDelightImportStmt Constructors Name Summary <init> SqlDelightImportStmtImpl(node: ASTNode!) Functions Name Summary accept open fun accept(visitor: SqlDelightVisitor ): Unit open fun accept(visitor: PsiElementVisitor): Unit getJavaType open fun getJavaType(): SqlDelightJavaType Inherited Functions Name Summary annotate open fun annotate(annotationHolder: SqlAnnotationHolder): Unit","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-impl/#sqldelightimportstmtimpl","text":"open class SqlDelightImportStmtImpl : ImportStmtMixin , SqlDelightImportStmt","title":"SqlDelightImportStmtImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-impl/#constructors","text":"Name Summary <init> SqlDelightImportStmtImpl(node: ASTNode!)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-impl/#functions","text":"Name Summary accept open fun accept(visitor: SqlDelightVisitor ): Unit open fun accept(visitor: PsiElementVisitor): Unit getJavaType open fun getJavaType(): SqlDelightJavaType","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-impl/#inherited-functions","text":"Name Summary annotate open fun annotate(annotationHolder: SqlAnnotationHolder): Unit","title":"Inherited Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-impl/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightImportStmtImpl / <init> <init> SqlDelightImportStmtImpl(node: ASTNode!)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-impl/-init-/#init","text":"SqlDelightImportStmtImpl(node: ASTNode!)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-impl/accept/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightImportStmtImpl / accept accept open fun accept(@NotNull visitor: SqlDelightVisitor ): Unit open fun accept(@NotNull visitor: PsiElementVisitor): Unit","title":"Accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-impl/accept/#accept","text":"open fun accept(@NotNull visitor: SqlDelightVisitor ): Unit open fun accept(@NotNull visitor: PsiElementVisitor): Unit","title":"accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-impl/get-java-type/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightImportStmtImpl / getJavaType getJavaType @NotNull open fun getJavaType(): SqlDelightJavaType Overrides SqlDelightImportStmt.getJavaType","title":"Get java type"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-impl/get-java-type/#getjavatype","text":"@NotNull open fun getJavaType(): SqlDelightJavaType Overrides SqlDelightImportStmt.getJavaType","title":"getJavaType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-list-impl/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightImportStmtListImpl SqlDelightImportStmtListImpl open class SqlDelightImportStmtListImpl : ASTWrapperPsiElement, SqlDelightImportStmtList Constructors Name Summary <init> SqlDelightImportStmtListImpl(node: ASTNode) Functions Name Summary accept open fun accept(visitor: SqlDelightVisitor ): Unit open fun accept(visitor: PsiElementVisitor): Unit getImportStmtList open fun getImportStmtList(): MutableList < SqlDelightImportStmt !>","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-list-impl/#sqldelightimportstmtlistimpl","text":"open class SqlDelightImportStmtListImpl : ASTWrapperPsiElement, SqlDelightImportStmtList","title":"SqlDelightImportStmtListImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-list-impl/#constructors","text":"Name Summary <init> SqlDelightImportStmtListImpl(node: ASTNode)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-list-impl/#functions","text":"Name Summary accept open fun accept(visitor: SqlDelightVisitor ): Unit open fun accept(visitor: PsiElementVisitor): Unit getImportStmtList open fun getImportStmtList(): MutableList < SqlDelightImportStmt !>","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-list-impl/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightImportStmtListImpl / <init> <init> SqlDelightImportStmtListImpl(@NotNull node: ASTNode)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-list-impl/-init-/#init","text":"SqlDelightImportStmtListImpl(@NotNull node: ASTNode)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-list-impl/accept/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightImportStmtListImpl / accept accept open fun accept(@NotNull visitor: SqlDelightVisitor ): Unit open fun accept(@NotNull visitor: PsiElementVisitor): Unit","title":"Accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-list-impl/accept/#accept","text":"open fun accept(@NotNull visitor: SqlDelightVisitor ): Unit open fun accept(@NotNull visitor: PsiElementVisitor): Unit","title":"accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-list-impl/get-import-stmt-list/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightImportStmtListImpl / getImportStmtList getImportStmtList @NotNull open fun getImportStmtList(): MutableList < SqlDelightImportStmt !> Overrides SqlDelightImportStmtList.getImportStmtList","title":"Get import stmt list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-import-stmt-list-impl/get-import-stmt-list/#getimportstmtlist","text":"@NotNull open fun getImportStmtList(): MutableList < SqlDelightImportStmt !> Overrides SqlDelightImportStmtList.getImportStmtList","title":"getImportStmtList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-insert-stmt-values-impl/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightInsertStmtValuesImpl SqlDelightInsertStmtValuesImpl open class SqlDelightInsertStmtValuesImpl : InsertStmtValuesMixin , SqlDelightInsertStmtValues Constructors Name Summary <init> SqlDelightInsertStmtValuesImpl(node: ASTNode!) Functions Name Summary accept open fun accept(visitor: SqlDelightVisitor ): Unit open fun accept(visitor: PsiElementVisitor): Unit Inherited Functions Name Summary annotate open fun annotate(annotationHolder: SqlAnnotationHolder): Unit","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-insert-stmt-values-impl/#sqldelightinsertstmtvaluesimpl","text":"open class SqlDelightInsertStmtValuesImpl : InsertStmtValuesMixin , SqlDelightInsertStmtValues","title":"SqlDelightInsertStmtValuesImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-insert-stmt-values-impl/#constructors","text":"Name Summary <init> SqlDelightInsertStmtValuesImpl(node: ASTNode!)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-insert-stmt-values-impl/#functions","text":"Name Summary accept open fun accept(visitor: SqlDelightVisitor ): Unit open fun accept(visitor: PsiElementVisitor): Unit","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-insert-stmt-values-impl/#inherited-functions","text":"Name Summary annotate open fun annotate(annotationHolder: SqlAnnotationHolder): Unit","title":"Inherited Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-insert-stmt-values-impl/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightInsertStmtValuesImpl / <init> <init> SqlDelightInsertStmtValuesImpl(node: ASTNode!)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-insert-stmt-values-impl/-init-/#init","text":"SqlDelightInsertStmtValuesImpl(node: ASTNode!)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-insert-stmt-values-impl/accept/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightInsertStmtValuesImpl / accept accept open fun accept(@NotNull visitor: SqlDelightVisitor ): Unit open fun accept(@NotNull visitor: PsiElementVisitor): Unit","title":"Accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-insert-stmt-values-impl/accept/#accept","text":"open fun accept(@NotNull visitor: SqlDelightVisitor ): Unit open fun accept(@NotNull visitor: PsiElementVisitor): Unit","title":"accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-insert-stmt-values-real-impl/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightInsertStmtValuesRealImpl SqlDelightInsertStmtValuesRealImpl open class SqlDelightInsertStmtValuesRealImpl : InsertStmtValuesMixin , SqlDelightInsertStmtValuesReal Constructors Name Summary <init> SqlDelightInsertStmtValuesRealImpl(node: ASTNode!) Functions Name Summary accept open fun accept(visitor: SqlDelightVisitor ): Unit open fun accept(visitor: PsiElementVisitor): Unit Inherited Functions Name Summary annotate open fun annotate(annotationHolder: SqlAnnotationHolder): Unit","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-insert-stmt-values-real-impl/#sqldelightinsertstmtvaluesrealimpl","text":"open class SqlDelightInsertStmtValuesRealImpl : InsertStmtValuesMixin , SqlDelightInsertStmtValuesReal","title":"SqlDelightInsertStmtValuesRealImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-insert-stmt-values-real-impl/#constructors","text":"Name Summary <init> SqlDelightInsertStmtValuesRealImpl(node: ASTNode!)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-insert-stmt-values-real-impl/#functions","text":"Name Summary accept open fun accept(visitor: SqlDelightVisitor ): Unit open fun accept(visitor: PsiElementVisitor): Unit","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-insert-stmt-values-real-impl/#inherited-functions","text":"Name Summary annotate open fun annotate(annotationHolder: SqlAnnotationHolder): Unit","title":"Inherited Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-insert-stmt-values-real-impl/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightInsertStmtValuesRealImpl / <init> <init> SqlDelightInsertStmtValuesRealImpl(node: ASTNode!)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-insert-stmt-values-real-impl/-init-/#init","text":"SqlDelightInsertStmtValuesRealImpl(node: ASTNode!)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-insert-stmt-values-real-impl/accept/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightInsertStmtValuesRealImpl / accept accept open fun accept(@NotNull visitor: SqlDelightVisitor ): Unit open fun accept(@NotNull visitor: PsiElementVisitor): Unit","title":"Accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-insert-stmt-values-real-impl/accept/#accept","text":"open fun accept(@NotNull visitor: SqlDelightVisitor ): Unit open fun accept(@NotNull visitor: PsiElementVisitor): Unit","title":"accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-impl/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightJavaTypeImpl SqlDelightJavaTypeImpl open class SqlDelightJavaTypeImpl : JavaTypeMixin , SqlDelightJavaType Constructors Name Summary <init> SqlDelightJavaTypeImpl(node: ASTNode!) Functions Name Summary accept open fun accept(visitor: SqlDelightVisitor ): Unit open fun accept(visitor: PsiElementVisitor): Unit Inherited Functions Name Summary getReference open fun getReference(): PsiReference","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-impl/#sqldelightjavatypeimpl","text":"open class SqlDelightJavaTypeImpl : JavaTypeMixin , SqlDelightJavaType","title":"SqlDelightJavaTypeImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-impl/#constructors","text":"Name Summary <init> SqlDelightJavaTypeImpl(node: ASTNode!)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-impl/#functions","text":"Name Summary accept open fun accept(visitor: SqlDelightVisitor ): Unit open fun accept(visitor: PsiElementVisitor): Unit","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-impl/#inherited-functions","text":"Name Summary getReference open fun getReference(): PsiReference","title":"Inherited Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-impl/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightJavaTypeImpl / <init> <init> SqlDelightJavaTypeImpl(node: ASTNode!)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-impl/-init-/#init","text":"SqlDelightJavaTypeImpl(node: ASTNode!)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-impl/accept/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightJavaTypeImpl / accept accept open fun accept(@NotNull visitor: SqlDelightVisitor ): Unit open fun accept(@NotNull visitor: PsiElementVisitor): Unit","title":"Accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-impl/accept/#accept","text":"open fun accept(@NotNull visitor: SqlDelightVisitor ): Unit open fun accept(@NotNull visitor: PsiElementVisitor): Unit","title":"accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name-impl/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightJavaTypeNameImpl SqlDelightJavaTypeNameImpl open class SqlDelightJavaTypeNameImpl : ASTWrapperPsiElement, SqlDelightJavaTypeName Constructors Name Summary <init> SqlDelightJavaTypeNameImpl(node: ASTNode) Functions Name Summary accept open fun accept(visitor: SqlDelightVisitor ): Unit open fun accept(visitor: PsiElementVisitor): Unit getParameterizedJavaType open fun getParameterizedJavaType(): SqlDelightParameterizedJavaType ?","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name-impl/#sqldelightjavatypenameimpl","text":"open class SqlDelightJavaTypeNameImpl : ASTWrapperPsiElement, SqlDelightJavaTypeName","title":"SqlDelightJavaTypeNameImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name-impl/#constructors","text":"Name Summary <init> SqlDelightJavaTypeNameImpl(node: ASTNode)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name-impl/#functions","text":"Name Summary accept open fun accept(visitor: SqlDelightVisitor ): Unit open fun accept(visitor: PsiElementVisitor): Unit getParameterizedJavaType open fun getParameterizedJavaType(): SqlDelightParameterizedJavaType ?","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name-impl/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightJavaTypeNameImpl / <init> <init> SqlDelightJavaTypeNameImpl(@NotNull node: ASTNode)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name-impl/-init-/#init","text":"SqlDelightJavaTypeNameImpl(@NotNull node: ASTNode)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name-impl/accept/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightJavaTypeNameImpl / accept accept open fun accept(@NotNull visitor: SqlDelightVisitor ): Unit open fun accept(@NotNull visitor: PsiElementVisitor): Unit","title":"Accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name-impl/accept/#accept","text":"open fun accept(@NotNull visitor: SqlDelightVisitor ): Unit open fun accept(@NotNull visitor: PsiElementVisitor): Unit","title":"accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name-impl/get-parameterized-java-type/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightJavaTypeNameImpl / getParameterizedJavaType getParameterizedJavaType @Nullable open fun getParameterizedJavaType(): SqlDelightParameterizedJavaType ? Overrides SqlDelightJavaTypeName.getParameterizedJavaType","title":"Get parameterized java type"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name-impl/get-parameterized-java-type/#getparameterizedjavatype","text":"@Nullable open fun getParameterizedJavaType(): SqlDelightParameterizedJavaType ? Overrides SqlDelightJavaTypeName.getParameterizedJavaType","title":"getParameterizedJavaType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name2-impl/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightJavaTypeName2Impl SqlDelightJavaTypeName2Impl open class SqlDelightJavaTypeName2Impl : ASTWrapperPsiElement, SqlDelightJavaTypeName2 Constructors Name Summary <init> SqlDelightJavaTypeName2Impl(node: ASTNode) Functions Name Summary accept open fun accept(visitor: SqlDelightVisitor ): Unit open fun accept(visitor: PsiElementVisitor): Unit getJavaType open fun getJavaType(): SqlDelightJavaType","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name2-impl/#sqldelightjavatypename2impl","text":"open class SqlDelightJavaTypeName2Impl : ASTWrapperPsiElement, SqlDelightJavaTypeName2","title":"SqlDelightJavaTypeName2Impl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name2-impl/#constructors","text":"Name Summary <init> SqlDelightJavaTypeName2Impl(node: ASTNode)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name2-impl/#functions","text":"Name Summary accept open fun accept(visitor: SqlDelightVisitor ): Unit open fun accept(visitor: PsiElementVisitor): Unit getJavaType open fun getJavaType(): SqlDelightJavaType","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name2-impl/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightJavaTypeName2Impl / <init> <init> SqlDelightJavaTypeName2Impl(@NotNull node: ASTNode)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name2-impl/-init-/#init","text":"SqlDelightJavaTypeName2Impl(@NotNull node: ASTNode)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name2-impl/accept/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightJavaTypeName2Impl / accept accept open fun accept(@NotNull visitor: SqlDelightVisitor ): Unit open fun accept(@NotNull visitor: PsiElementVisitor): Unit","title":"Accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name2-impl/accept/#accept","text":"open fun accept(@NotNull visitor: SqlDelightVisitor ): Unit open fun accept(@NotNull visitor: PsiElementVisitor): Unit","title":"accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name2-impl/get-java-type/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightJavaTypeName2Impl / getJavaType getJavaType @NotNull open fun getJavaType(): SqlDelightJavaType Overrides SqlDelightJavaTypeName2.getJavaType","title":"Get java type"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-java-type-name2-impl/get-java-type/#getjavatype","text":"@NotNull open fun getJavaType(): SqlDelightJavaType Overrides SqlDelightJavaTypeName2.getJavaType","title":"getJavaType"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-overrides-impl/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightOverridesImpl SqlDelightOverridesImpl open class SqlDelightOverridesImpl : ASTWrapperPsiElement, SqlDelightOverrides Constructors Name Summary <init> SqlDelightOverridesImpl(node: ASTNode) Functions Name Summary accept open fun accept(visitor: SqlDelightVisitor ): Unit open fun accept(visitor: PsiElementVisitor): Unit getColumnDef open fun getColumnDef(): SqlDelightColumnDef ? getInsertStmtValues open fun getInsertStmtValues(): SqlDelightInsertStmtValues ? getStmtList open fun getStmtList(): SqlDelightStmtList ?","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-overrides-impl/#sqldelightoverridesimpl","text":"open class SqlDelightOverridesImpl : ASTWrapperPsiElement, SqlDelightOverrides","title":"SqlDelightOverridesImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-overrides-impl/#constructors","text":"Name Summary <init> SqlDelightOverridesImpl(node: ASTNode)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-overrides-impl/#functions","text":"Name Summary accept open fun accept(visitor: SqlDelightVisitor ): Unit open fun accept(visitor: PsiElementVisitor): Unit getColumnDef open fun getColumnDef(): SqlDelightColumnDef ? getInsertStmtValues open fun getInsertStmtValues(): SqlDelightInsertStmtValues ? getStmtList open fun getStmtList(): SqlDelightStmtList ?","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-overrides-impl/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightOverridesImpl / <init> <init> SqlDelightOverridesImpl(@NotNull node: ASTNode)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-overrides-impl/-init-/#init","text":"SqlDelightOverridesImpl(@NotNull node: ASTNode)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-overrides-impl/accept/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightOverridesImpl / accept accept open fun accept(@NotNull visitor: SqlDelightVisitor ): Unit open fun accept(@NotNull visitor: PsiElementVisitor): Unit","title":"Accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-overrides-impl/accept/#accept","text":"open fun accept(@NotNull visitor: SqlDelightVisitor ): Unit open fun accept(@NotNull visitor: PsiElementVisitor): Unit","title":"accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-overrides-impl/get-column-def/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightOverridesImpl / getColumnDef getColumnDef @Nullable open fun getColumnDef(): SqlDelightColumnDef ? Overrides SqlDelightOverrides.getColumnDef","title":"Get column def"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-overrides-impl/get-column-def/#getcolumndef","text":"@Nullable open fun getColumnDef(): SqlDelightColumnDef ? Overrides SqlDelightOverrides.getColumnDef","title":"getColumnDef"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-overrides-impl/get-insert-stmt-values/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightOverridesImpl / getInsertStmtValues getInsertStmtValues @Nullable open fun getInsertStmtValues(): SqlDelightInsertStmtValues ? Overrides SqlDelightOverrides.getInsertStmtValues","title":"Get insert stmt values"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-overrides-impl/get-insert-stmt-values/#getinsertstmtvalues","text":"@Nullable open fun getInsertStmtValues(): SqlDelightInsertStmtValues ? Overrides SqlDelightOverrides.getInsertStmtValues","title":"getInsertStmtValues"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-overrides-impl/get-stmt-list/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightOverridesImpl / getStmtList getStmtList @Nullable open fun getStmtList(): SqlDelightStmtList ? Overrides SqlDelightOverrides.getStmtList","title":"Get stmt list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-overrides-impl/get-stmt-list/#getstmtlist","text":"@Nullable open fun getStmtList(): SqlDelightStmtList ? Overrides SqlDelightOverrides.getStmtList","title":"getStmtList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-parameterized-java-type-impl/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightParameterizedJavaTypeImpl SqlDelightParameterizedJavaTypeImpl open class SqlDelightParameterizedJavaTypeImpl : ASTWrapperPsiElement, SqlDelightParameterizedJavaType Constructors Name Summary <init> SqlDelightParameterizedJavaTypeImpl(node: ASTNode) Functions Name Summary accept open fun accept(visitor: SqlDelightVisitor ): Unit open fun accept(visitor: PsiElementVisitor): Unit getJavaTypeList open fun getJavaTypeList(): MutableList < SqlDelightJavaType !> getJavaTypeName2List open fun getJavaTypeName2List(): MutableList < SqlDelightJavaTypeName2 !> getJavaTypeNameList open fun getJavaTypeNameList(): MutableList < SqlDelightJavaTypeName !>","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-parameterized-java-type-impl/#sqldelightparameterizedjavatypeimpl","text":"open class SqlDelightParameterizedJavaTypeImpl : ASTWrapperPsiElement, SqlDelightParameterizedJavaType","title":"SqlDelightParameterizedJavaTypeImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-parameterized-java-type-impl/#constructors","text":"Name Summary <init> SqlDelightParameterizedJavaTypeImpl(node: ASTNode)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-parameterized-java-type-impl/#functions","text":"Name Summary accept open fun accept(visitor: SqlDelightVisitor ): Unit open fun accept(visitor: PsiElementVisitor): Unit getJavaTypeList open fun getJavaTypeList(): MutableList < SqlDelightJavaType !> getJavaTypeName2List open fun getJavaTypeName2List(): MutableList < SqlDelightJavaTypeName2 !> getJavaTypeNameList open fun getJavaTypeNameList(): MutableList < SqlDelightJavaTypeName !>","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-parameterized-java-type-impl/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightParameterizedJavaTypeImpl / <init> <init> SqlDelightParameterizedJavaTypeImpl(@NotNull node: ASTNode)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-parameterized-java-type-impl/-init-/#init","text":"SqlDelightParameterizedJavaTypeImpl(@NotNull node: ASTNode)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-parameterized-java-type-impl/accept/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightParameterizedJavaTypeImpl / accept accept open fun accept(@NotNull visitor: SqlDelightVisitor ): Unit open fun accept(@NotNull visitor: PsiElementVisitor): Unit","title":"Accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-parameterized-java-type-impl/accept/#accept","text":"open fun accept(@NotNull visitor: SqlDelightVisitor ): Unit open fun accept(@NotNull visitor: PsiElementVisitor): Unit","title":"accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-parameterized-java-type-impl/get-java-type-list/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightParameterizedJavaTypeImpl / getJavaTypeList getJavaTypeList @NotNull open fun getJavaTypeList(): MutableList < SqlDelightJavaType !> Overrides SqlDelightParameterizedJavaType.getJavaTypeList","title":"Get java type list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-parameterized-java-type-impl/get-java-type-list/#getjavatypelist","text":"@NotNull open fun getJavaTypeList(): MutableList < SqlDelightJavaType !> Overrides SqlDelightParameterizedJavaType.getJavaTypeList","title":"getJavaTypeList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-parameterized-java-type-impl/get-java-type-name-list/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightParameterizedJavaTypeImpl / getJavaTypeNameList getJavaTypeNameList @NotNull open fun getJavaTypeNameList(): MutableList < SqlDelightJavaTypeName !> Overrides SqlDelightParameterizedJavaType.getJavaTypeNameList","title":"Get java type name list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-parameterized-java-type-impl/get-java-type-name-list/#getjavatypenamelist","text":"@NotNull open fun getJavaTypeNameList(): MutableList < SqlDelightJavaTypeName !> Overrides SqlDelightParameterizedJavaType.getJavaTypeNameList","title":"getJavaTypeNameList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-parameterized-java-type-impl/get-java-type-name2-list/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightParameterizedJavaTypeImpl / getJavaTypeName2List getJavaTypeName2List @NotNull open fun getJavaTypeName2List(): MutableList < SqlDelightJavaTypeName2 !> Overrides SqlDelightParameterizedJavaType.getJavaTypeName2List","title":"Get java type name2 list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-parameterized-java-type-impl/get-java-type-name2-list/#getjavatypename2list","text":"@NotNull open fun getJavaTypeName2List(): MutableList < SqlDelightJavaTypeName2 !> Overrides SqlDelightParameterizedJavaType.getJavaTypeName2List","title":"getJavaTypeName2List"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-impl/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtClojureImpl SqlDelightStmtClojureImpl open class SqlDelightStmtClojureImpl : SqlCompositeElementImpl, SqlDelightStmtClojure Constructors Name Summary <init> SqlDelightStmtClojureImpl(node: ASTNode!) Functions Name Summary accept open fun accept(visitor: SqlDelightVisitor ): Unit open fun accept(visitor: PsiElementVisitor): Unit getStmtClojureStmtList open fun getStmtClojureStmtList(): SqlDelightStmtClojureStmtList ? getStmtIdentifierClojure open fun getStmtIdentifierClojure(): SqlDelightStmtIdentifierClojure","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-impl/#sqldelightstmtclojureimpl","text":"open class SqlDelightStmtClojureImpl : SqlCompositeElementImpl, SqlDelightStmtClojure","title":"SqlDelightStmtClojureImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-impl/#constructors","text":"Name Summary <init> SqlDelightStmtClojureImpl(node: ASTNode!)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-impl/#functions","text":"Name Summary accept open fun accept(visitor: SqlDelightVisitor ): Unit open fun accept(visitor: PsiElementVisitor): Unit getStmtClojureStmtList open fun getStmtClojureStmtList(): SqlDelightStmtClojureStmtList ? getStmtIdentifierClojure open fun getStmtIdentifierClojure(): SqlDelightStmtIdentifierClojure","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-impl/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtClojureImpl / <init> <init> SqlDelightStmtClojureImpl(node: ASTNode!)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-impl/-init-/#init","text":"SqlDelightStmtClojureImpl(node: ASTNode!)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-impl/accept/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtClojureImpl / accept accept open fun accept(@NotNull visitor: SqlDelightVisitor ): Unit open fun accept(@NotNull visitor: PsiElementVisitor): Unit","title":"Accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-impl/accept/#accept","text":"open fun accept(@NotNull visitor: SqlDelightVisitor ): Unit open fun accept(@NotNull visitor: PsiElementVisitor): Unit","title":"accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-impl/get-stmt-clojure-stmt-list/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtClojureImpl / getStmtClojureStmtList getStmtClojureStmtList @Nullable open fun getStmtClojureStmtList(): SqlDelightStmtClojureStmtList ? Overrides SqlDelightStmtClojure.getStmtClojureStmtList","title":"Get stmt clojure stmt list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-impl/get-stmt-clojure-stmt-list/#getstmtclojurestmtlist","text":"@Nullable open fun getStmtClojureStmtList(): SqlDelightStmtClojureStmtList ? Overrides SqlDelightStmtClojure.getStmtClojureStmtList","title":"getStmtClojureStmtList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-impl/get-stmt-identifier-clojure/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtClojureImpl / getStmtIdentifierClojure getStmtIdentifierClojure @NotNull open fun getStmtIdentifierClojure(): SqlDelightStmtIdentifierClojure Overrides SqlDelightStmtClojure.getStmtIdentifierClojure","title":"Get stmt identifier clojure"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-impl/get-stmt-identifier-clojure/#getstmtidentifierclojure","text":"@NotNull open fun getStmtIdentifierClojure(): SqlDelightStmtIdentifierClojure Overrides SqlDelightStmtClojure.getStmtIdentifierClojure","title":"getStmtIdentifierClojure"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-stmt-list-impl/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtClojureStmtListImpl SqlDelightStmtClojureStmtListImpl open class SqlDelightStmtClojureStmtListImpl : ClojureStmtListMixin , SqlDelightStmtClojureStmtList Constructors Name Summary <init> SqlDelightStmtClojureStmtListImpl(node: ASTNode!) Functions Name Summary accept open fun accept(visitor: SqlDelightVisitor ): Unit open fun accept(visitor: PsiElementVisitor): Unit Inherited Functions Name Summary tablesAvailable open fun tablesAvailable(child: PsiElement): Collection <LazyQuery>","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-stmt-list-impl/#sqldelightstmtclojurestmtlistimpl","text":"open class SqlDelightStmtClojureStmtListImpl : ClojureStmtListMixin , SqlDelightStmtClojureStmtList","title":"SqlDelightStmtClojureStmtListImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-stmt-list-impl/#constructors","text":"Name Summary <init> SqlDelightStmtClojureStmtListImpl(node: ASTNode!)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-stmt-list-impl/#functions","text":"Name Summary accept open fun accept(visitor: SqlDelightVisitor ): Unit open fun accept(visitor: PsiElementVisitor): Unit","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-stmt-list-impl/#inherited-functions","text":"Name Summary tablesAvailable open fun tablesAvailable(child: PsiElement): Collection <LazyQuery>","title":"Inherited Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-stmt-list-impl/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtClojureStmtListImpl / <init> <init> SqlDelightStmtClojureStmtListImpl(node: ASTNode!)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-stmt-list-impl/-init-/#init","text":"SqlDelightStmtClojureStmtListImpl(node: ASTNode!)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-stmt-list-impl/accept/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtClojureStmtListImpl / accept accept open fun accept(@NotNull visitor: SqlDelightVisitor ): Unit open fun accept(@NotNull visitor: PsiElementVisitor): Unit","title":"Accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-clojure-stmt-list-impl/accept/#accept","text":"open fun accept(@NotNull visitor: SqlDelightVisitor ): Unit open fun accept(@NotNull visitor: PsiElementVisitor): Unit","title":"accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-identifier-clojure-impl/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtIdentifierClojureImpl SqlDelightStmtIdentifierClojureImpl open class SqlDelightStmtIdentifierClojureImpl : StmtIdentifierMixin , SqlDelightStmtIdentifierClojure Constructors Name Summary <init> SqlDelightStmtIdentifierClojureImpl(node: ASTNode!) Functions Name Summary accept open fun accept(visitor: SqlDelightVisitor ): Unit open fun accept(visitor: PsiElementVisitor): Unit Inherited Functions Name Summary annotate open fun annotate(annotationHolder: SqlAnnotationHolder): Unit getName open fun getName(): String ? identifier open fun identifier(): SqlIdentifier? setName open fun setName(name: String ): PsiElement","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-identifier-clojure-impl/#sqldelightstmtidentifierclojureimpl","text":"open class SqlDelightStmtIdentifierClojureImpl : StmtIdentifierMixin , SqlDelightStmtIdentifierClojure","title":"SqlDelightStmtIdentifierClojureImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-identifier-clojure-impl/#constructors","text":"Name Summary <init> SqlDelightStmtIdentifierClojureImpl(node: ASTNode!)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-identifier-clojure-impl/#functions","text":"Name Summary accept open fun accept(visitor: SqlDelightVisitor ): Unit open fun accept(visitor: PsiElementVisitor): Unit","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-identifier-clojure-impl/#inherited-functions","text":"Name Summary annotate open fun annotate(annotationHolder: SqlAnnotationHolder): Unit getName open fun getName(): String ? identifier open fun identifier(): SqlIdentifier? setName open fun setName(name: String ): PsiElement","title":"Inherited Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-identifier-clojure-impl/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtIdentifierClojureImpl / <init> <init> SqlDelightStmtIdentifierClojureImpl(node: ASTNode!)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-identifier-clojure-impl/-init-/#init","text":"SqlDelightStmtIdentifierClojureImpl(node: ASTNode!)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-identifier-clojure-impl/accept/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtIdentifierClojureImpl / accept accept open fun accept(@NotNull visitor: SqlDelightVisitor ): Unit open fun accept(@NotNull visitor: PsiElementVisitor): Unit","title":"Accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-identifier-clojure-impl/accept/#accept","text":"open fun accept(@NotNull visitor: SqlDelightVisitor ): Unit open fun accept(@NotNull visitor: PsiElementVisitor): Unit","title":"accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-identifier-impl/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtIdentifierImpl SqlDelightStmtIdentifierImpl open class SqlDelightStmtIdentifierImpl : StmtIdentifierMixin , SqlDelightStmtIdentifier Constructors Name Summary <init> SqlDelightStmtIdentifierImpl(node: ASTNode!) Functions Name Summary accept open fun accept(visitor: SqlDelightVisitor ): Unit open fun accept(visitor: PsiElementVisitor): Unit Inherited Functions Name Summary annotate open fun annotate(annotationHolder: SqlAnnotationHolder): Unit getName open fun getName(): String ? identifier open fun identifier(): SqlIdentifier? setName open fun setName(name: String ): PsiElement","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-identifier-impl/#sqldelightstmtidentifierimpl","text":"open class SqlDelightStmtIdentifierImpl : StmtIdentifierMixin , SqlDelightStmtIdentifier","title":"SqlDelightStmtIdentifierImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-identifier-impl/#constructors","text":"Name Summary <init> SqlDelightStmtIdentifierImpl(node: ASTNode!)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-identifier-impl/#functions","text":"Name Summary accept open fun accept(visitor: SqlDelightVisitor ): Unit open fun accept(visitor: PsiElementVisitor): Unit","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-identifier-impl/#inherited-functions","text":"Name Summary annotate open fun annotate(annotationHolder: SqlAnnotationHolder): Unit getName open fun getName(): String ? identifier open fun identifier(): SqlIdentifier? setName open fun setName(name: String ): PsiElement","title":"Inherited Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-identifier-impl/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtIdentifierImpl / <init> <init> SqlDelightStmtIdentifierImpl(node: ASTNode!)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-identifier-impl/-init-/#init","text":"SqlDelightStmtIdentifierImpl(node: ASTNode!)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-identifier-impl/accept/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtIdentifierImpl / accept accept open fun accept(@NotNull visitor: SqlDelightVisitor ): Unit open fun accept(@NotNull visitor: PsiElementVisitor): Unit","title":"Accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-identifier-impl/accept/#accept","text":"open fun accept(@NotNull visitor: SqlDelightVisitor ): Unit open fun accept(@NotNull visitor: PsiElementVisitor): Unit","title":"accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-list-impl/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtListImpl SqlDelightStmtListImpl open class SqlDelightStmtListImpl : SqlStmtListImpl, SqlDelightStmtList Constructors Name Summary <init> SqlDelightStmtListImpl(node: ASTNode!) Functions Name Summary accept open fun accept(visitor: SqlDelightVisitor ): Unit open fun accept(visitor: PsiElementVisitor): Unit getImportStmtList open fun getImportStmtList(): SqlDelightImportStmtList getStmtClojureList open fun getStmtClojureList(): MutableList < SqlDelightStmtClojure !> getStmtIdentifierList open fun getStmtIdentifierList(): MutableList < SqlDelightStmtIdentifier !>","title":"Home"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-list-impl/#sqldelightstmtlistimpl","text":"open class SqlDelightStmtListImpl : SqlStmtListImpl, SqlDelightStmtList","title":"SqlDelightStmtListImpl"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-list-impl/#constructors","text":"Name Summary <init> SqlDelightStmtListImpl(node: ASTNode!)","title":"Constructors"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-list-impl/#functions","text":"Name Summary accept open fun accept(visitor: SqlDelightVisitor ): Unit open fun accept(visitor: PsiElementVisitor): Unit getImportStmtList open fun getImportStmtList(): SqlDelightImportStmtList getStmtClojureList open fun getStmtClojureList(): MutableList < SqlDelightStmtClojure !> getStmtIdentifierList open fun getStmtIdentifierList(): MutableList < SqlDelightStmtIdentifier !>","title":"Functions"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-list-impl/-init-/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtListImpl / <init> <init> SqlDelightStmtListImpl(node: ASTNode!)","title":" init "},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-list-impl/-init-/#init","text":"SqlDelightStmtListImpl(node: ASTNode!)","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-list-impl/accept/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtListImpl / accept accept open fun accept(@NotNull visitor: SqlDelightVisitor ): Unit open fun accept(@NotNull visitor: PsiElementVisitor): Unit","title":"Accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-list-impl/accept/#accept","text":"open fun accept(@NotNull visitor: SqlDelightVisitor ): Unit open fun accept(@NotNull visitor: PsiElementVisitor): Unit","title":"accept"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-list-impl/get-import-stmt-list/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtListImpl / getImportStmtList getImportStmtList @NotNull open fun getImportStmtList(): SqlDelightImportStmtList Overrides SqlDelightStmtList.getImportStmtList","title":"Get import stmt list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-list-impl/get-import-stmt-list/#getimportstmtlist","text":"@NotNull open fun getImportStmtList(): SqlDelightImportStmtList Overrides SqlDelightStmtList.getImportStmtList","title":"getImportStmtList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-list-impl/get-stmt-clojure-list/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtListImpl / getStmtClojureList getStmtClojureList @NotNull open fun getStmtClojureList(): MutableList < SqlDelightStmtClojure !> Overrides SqlDelightStmtList.getStmtClojureList","title":"Get stmt clojure list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-list-impl/get-stmt-clojure-list/#getstmtclojurelist","text":"@NotNull open fun getStmtClojureList(): MutableList < SqlDelightStmtClojure !> Overrides SqlDelightStmtList.getStmtClojureList","title":"getStmtClojureList"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-list-impl/get-stmt-identifier-list/","text":"sqldelight-compiler / com.squareup.sqldelight.core.psi.impl / SqlDelightStmtListImpl / getStmtIdentifierList getStmtIdentifierList @NotNull open fun getStmtIdentifierList(): MutableList < SqlDelightStmtIdentifier !> Overrides SqlDelightStmtList.getStmtIdentifierList","title":"Get stmt identifier list"},{"location":"1.x/sqldelight-compiler/com.squareup.sqldelight.core.psi.impl/-sql-delight-stmt-list-impl/get-stmt-identifier-list/#getstmtidentifierlist","text":"@NotNull open fun getStmtIdentifierList(): MutableList < SqlDelightStmtIdentifier !> Overrides SqlDelightStmtList.getStmtIdentifierList","title":"getStmtIdentifierList"},{"location":"1.x/sqldelight-gradle-plugin/","text":"sqldelight-gradle-plugin Packages Name Summary com.squareup.sqldelight.gradle com.squareup.sqldelight.gradle.kotlin Index All Types","title":"sqldelight-gradle-plugin"},{"location":"1.x/sqldelight-gradle-plugin/#packages","text":"Name Summary com.squareup.sqldelight.gradle com.squareup.sqldelight.gradle.kotlin","title":"Packages"},{"location":"1.x/sqldelight-gradle-plugin/#index","text":"All Types","title":"Index"},{"location":"1.x/sqldelight-gradle-plugin/alltypes/","text":"All Types Name Summary com.squareup.sqldelight.gradle.GenerateMigrationOutputTask com.squareup.sqldelight.gradle.GenerateSchemaTask org.gradle.api.Project (extensions in package com.squareup.sqldelight.gradle.kotlin) com.squareup.sqldelight.gradle.SqlDelightDatabase com.squareup.sqldelight.gradle.SqlDelightExtension com.squareup.sqldelight.gradle.SqlDelightPlugin com.squareup.sqldelight.gradle.SqlDelightTask com.squareup.sqldelight.gradle.VerifyMigrationTask","title":"Home"},{"location":"1.x/sqldelight-gradle-plugin/alltypes/#all-types","text":"Name Summary com.squareup.sqldelight.gradle.GenerateMigrationOutputTask com.squareup.sqldelight.gradle.GenerateSchemaTask org.gradle.api.Project (extensions in package com.squareup.sqldelight.gradle.kotlin) com.squareup.sqldelight.gradle.SqlDelightDatabase com.squareup.sqldelight.gradle.SqlDelightExtension com.squareup.sqldelight.gradle.SqlDelightPlugin com.squareup.sqldelight.gradle.SqlDelightTask com.squareup.sqldelight.gradle.VerifyMigrationTask","title":"All Types"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle Package com.squareup.sqldelight.gradle Types Name Summary GenerateMigrationOutputTask abstract class GenerateMigrationOutputTask : SourceTask GenerateSchemaTask abstract class GenerateSchemaTask : SourceTask SqlDelightDatabase class SqlDelightDatabase SqlDelightExtension open class SqlDelightExtension SqlDelightPlugin open class SqlDelightPlugin : Plugin<Project> SqlDelightTask open class SqlDelightTask : SourceTask VerifyMigrationTask open class VerifyMigrationTask : SourceTask","title":"Home"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/#package-comsquareupsqldelightgradle","text":"","title":"Package com.squareup.sqldelight.gradle"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/#types","text":"Name Summary GenerateMigrationOutputTask abstract class GenerateMigrationOutputTask : SourceTask GenerateSchemaTask abstract class GenerateSchemaTask : SourceTask SqlDelightDatabase class SqlDelightDatabase SqlDelightExtension open class SqlDelightExtension SqlDelightPlugin open class SqlDelightPlugin : Plugin<Project> SqlDelightTask open class SqlDelightTask : SourceTask VerifyMigrationTask open class VerifyMigrationTask : SourceTask","title":"Types"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask GenerateMigrationOutputTask @CacheableTask abstract class GenerateMigrationOutputTask : SourceTask Types Name Summary GenerateSchema abstract class GenerateSchema : WorkAction< GenerateMigrationOutputTask.GenerateSchemaWorkParameters > GenerateSchemaWorkParameters interface GenerateSchemaWorkParameters : WorkParameters Constructors Name Summary <init> GenerateMigrationOutputTask() Properties Name Summary migrationOutputExtension lateinit var migrationOutputExtension: String outputDirectory var outputDirectory: File ? pluginVersion val pluginVersion: String properties lateinit var properties: SqlDelightDatabaseProperties sourceFolders lateinit var sourceFolders: Iterable < File > workerExecutor abstract val workerExecutor: WorkerExecutor Functions Name Summary generateSchemaFile fun generateSchemaFile(): Unit getSource open fun getSource(): FileTree","title":"Home"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/#generatemigrationoutputtask","text":"@CacheableTask abstract class GenerateMigrationOutputTask : SourceTask","title":"GenerateMigrationOutputTask"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/#types","text":"Name Summary GenerateSchema abstract class GenerateSchema : WorkAction< GenerateMigrationOutputTask.GenerateSchemaWorkParameters > GenerateSchemaWorkParameters interface GenerateSchemaWorkParameters : WorkParameters","title":"Types"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/#constructors","text":"Name Summary <init> GenerateMigrationOutputTask()","title":"Constructors"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/#properties","text":"Name Summary migrationOutputExtension lateinit var migrationOutputExtension: String outputDirectory var outputDirectory: File ? pluginVersion val pluginVersion: String properties lateinit var properties: SqlDelightDatabaseProperties sourceFolders lateinit var sourceFolders: Iterable < File > workerExecutor abstract val workerExecutor: WorkerExecutor","title":"Properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/#functions","text":"Name Summary generateSchemaFile fun generateSchemaFile(): Unit getSource open fun getSource(): FileTree","title":"Functions"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-init-/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / <init> <init> GenerateMigrationOutputTask()","title":" init "},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-init-/#init","text":"GenerateMigrationOutputTask()","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/generate-schema-file/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / generateSchemaFile generateSchemaFile fun generateSchemaFile(): Unit","title":"Generate schema file"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/generate-schema-file/#generateschemafile","text":"fun generateSchemaFile(): Unit","title":"generateSchemaFile"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/get-source/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / getSource getSource @InputFiles @SkipWhenEmpty @PathSensitive(PathSensitivity.RELATIVE) open fun getSource(): FileTree","title":"Get source"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/get-source/#getsource","text":"@InputFiles @SkipWhenEmpty @PathSensitive(PathSensitivity.RELATIVE) open fun getSource(): FileTree","title":"getSource"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/migration-output-extension/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / migrationOutputExtension migrationOutputExtension lateinit var migrationOutputExtension: String","title":"Migration output extension"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/migration-output-extension/#migrationoutputextension","text":"lateinit var migrationOutputExtension: String","title":"migrationOutputExtension"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/output-directory/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / outputDirectory outputDirectory var outputDirectory: File ?","title":"Output directory"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/output-directory/#outputdirectory","text":"var outputDirectory: File ?","title":"outputDirectory"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/plugin-version/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / pluginVersion pluginVersion val pluginVersion: String","title":"Plugin version"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/plugin-version/#pluginversion","text":"val pluginVersion: String","title":"pluginVersion"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/properties/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / properties properties lateinit var properties: SqlDelightDatabaseProperties","title":"Properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/properties/#properties","text":"lateinit var properties: SqlDelightDatabaseProperties","title":"properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/source-folders/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / sourceFolders sourceFolders lateinit var sourceFolders: Iterable < File >","title":"Source folders"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/source-folders/#sourcefolders","text":"lateinit var sourceFolders: Iterable < File >","title":"sourceFolders"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/worker-executor/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / workerExecutor workerExecutor abstract val workerExecutor: WorkerExecutor","title":"Worker executor"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/worker-executor/#workerexecutor","text":"abstract val workerExecutor: WorkerExecutor","title":"workerExecutor"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-schema/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / GenerateSchema GenerateSchema abstract class GenerateSchema : WorkAction< GenerateMigrationOutputTask.GenerateSchemaWorkParameters > Constructors Name Summary <init> GenerateSchema() Functions Name Summary execute open fun execute(): Unit","title":"Home"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-schema/#generateschema","text":"abstract class GenerateSchema : WorkAction< GenerateMigrationOutputTask.GenerateSchemaWorkParameters >","title":"GenerateSchema"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-schema/#constructors","text":"Name Summary <init> GenerateSchema()","title":"Constructors"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-schema/#functions","text":"Name Summary execute open fun execute(): Unit","title":"Functions"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-schema/-init-/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / GenerateSchema / <init> <init> GenerateSchema()","title":" init "},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-schema/-init-/#init","text":"GenerateSchema()","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-schema/execute/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / GenerateSchema / execute execute open fun execute(): Unit","title":"Execute"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-schema/execute/#execute","text":"open fun execute(): Unit","title":"execute"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-schema-work-parameters/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / GenerateSchemaWorkParameters GenerateSchemaWorkParameters interface GenerateSchemaWorkParameters : WorkParameters Properties Name Summary migrationExtension abstract val migrationExtension: Property< String > moduleName abstract val moduleName: Property< String > outputDirectory abstract val outputDirectory: DirectoryProperty propertiesJson abstract val propertiesJson: Property< String > sourceFolders abstract val sourceFolders: ListProperty< File >","title":"Home"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-schema-work-parameters/#generateschemaworkparameters","text":"interface GenerateSchemaWorkParameters : WorkParameters","title":"GenerateSchemaWorkParameters"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-schema-work-parameters/#properties","text":"Name Summary migrationExtension abstract val migrationExtension: Property< String > moduleName abstract val moduleName: Property< String > outputDirectory abstract val outputDirectory: DirectoryProperty propertiesJson abstract val propertiesJson: Property< String > sourceFolders abstract val sourceFolders: ListProperty< File >","title":"Properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-schema-work-parameters/migration-extension/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / GenerateSchemaWorkParameters / migrationExtension migrationExtension abstract val migrationExtension: Property< String >","title":"Migration extension"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-schema-work-parameters/migration-extension/#migrationextension","text":"abstract val migrationExtension: Property< String >","title":"migrationExtension"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-schema-work-parameters/module-name/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / GenerateSchemaWorkParameters / moduleName moduleName abstract val moduleName: Property< String >","title":"Module name"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-schema-work-parameters/module-name/#modulename","text":"abstract val moduleName: Property< String >","title":"moduleName"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-schema-work-parameters/output-directory/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / GenerateSchemaWorkParameters / outputDirectory outputDirectory abstract val outputDirectory: DirectoryProperty","title":"Output directory"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-schema-work-parameters/output-directory/#outputdirectory","text":"abstract val outputDirectory: DirectoryProperty","title":"outputDirectory"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-schema-work-parameters/properties-json/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / GenerateSchemaWorkParameters / propertiesJson propertiesJson abstract val propertiesJson: Property< String >","title":"Properties json"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-schema-work-parameters/properties-json/#propertiesjson","text":"abstract val propertiesJson: Property< String >","title":"propertiesJson"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-schema-work-parameters/source-folders/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateMigrationOutputTask / GenerateSchemaWorkParameters / sourceFolders sourceFolders abstract val sourceFolders: ListProperty< File >","title":"Source folders"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-migration-output-task/-generate-schema-work-parameters/source-folders/#sourcefolders","text":"abstract val sourceFolders: ListProperty< File >","title":"sourceFolders"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask GenerateSchemaTask @CacheableTask abstract class GenerateSchemaTask : SourceTask Types Name Summary GenerateSchema abstract class GenerateSchema : WorkAction< GenerateSchemaTask.GenerateSchemaWorkParameters > GenerateSchemaWorkParameters interface GenerateSchemaWorkParameters : WorkParameters Constructors Name Summary <init> GenerateSchemaTask() Properties Name Summary outputDirectory var outputDirectory: File ? pluginVersion val pluginVersion: String properties lateinit var properties: SqlDelightDatabaseProperties sourceFolders lateinit var sourceFolders: Iterable < File > workerExecutor abstract val workerExecutor: WorkerExecutor Functions Name Summary generateSchemaFile fun generateSchemaFile(): Unit getSource open fun getSource(): FileTree","title":"Home"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/#generateschematask","text":"@CacheableTask abstract class GenerateSchemaTask : SourceTask","title":"GenerateSchemaTask"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/#types","text":"Name Summary GenerateSchema abstract class GenerateSchema : WorkAction< GenerateSchemaTask.GenerateSchemaWorkParameters > GenerateSchemaWorkParameters interface GenerateSchemaWorkParameters : WorkParameters","title":"Types"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/#constructors","text":"Name Summary <init> GenerateSchemaTask()","title":"Constructors"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/#properties","text":"Name Summary outputDirectory var outputDirectory: File ? pluginVersion val pluginVersion: String properties lateinit var properties: SqlDelightDatabaseProperties sourceFolders lateinit var sourceFolders: Iterable < File > workerExecutor abstract val workerExecutor: WorkerExecutor","title":"Properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/#functions","text":"Name Summary generateSchemaFile fun generateSchemaFile(): Unit getSource open fun getSource(): FileTree","title":"Functions"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-init-/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask / <init> <init> GenerateSchemaTask()","title":" init "},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-init-/#init","text":"GenerateSchemaTask()","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/generate-schema-file/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask / generateSchemaFile generateSchemaFile fun generateSchemaFile(): Unit","title":"Generate schema file"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/generate-schema-file/#generateschemafile","text":"fun generateSchemaFile(): Unit","title":"generateSchemaFile"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/get-source/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask / getSource getSource @InputFiles @SkipWhenEmpty @PathSensitive(PathSensitivity.RELATIVE) open fun getSource(): FileTree","title":"Get source"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/get-source/#getsource","text":"@InputFiles @SkipWhenEmpty @PathSensitive(PathSensitivity.RELATIVE) open fun getSource(): FileTree","title":"getSource"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/output-directory/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask / outputDirectory outputDirectory var outputDirectory: File ?","title":"Output directory"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/output-directory/#outputdirectory","text":"var outputDirectory: File ?","title":"outputDirectory"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/plugin-version/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask / pluginVersion pluginVersion val pluginVersion: String","title":"Plugin version"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/plugin-version/#pluginversion","text":"val pluginVersion: String","title":"pluginVersion"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/properties/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask / properties properties lateinit var properties: SqlDelightDatabaseProperties","title":"Properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/properties/#properties","text":"lateinit var properties: SqlDelightDatabaseProperties","title":"properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/source-folders/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask / sourceFolders sourceFolders lateinit var sourceFolders: Iterable < File >","title":"Source folders"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/source-folders/#sourcefolders","text":"lateinit var sourceFolders: Iterable < File >","title":"sourceFolders"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/worker-executor/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask / workerExecutor workerExecutor abstract val workerExecutor: WorkerExecutor","title":"Worker executor"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/worker-executor/#workerexecutor","text":"abstract val workerExecutor: WorkerExecutor","title":"workerExecutor"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask / GenerateSchema GenerateSchema abstract class GenerateSchema : WorkAction< GenerateSchemaTask.GenerateSchemaWorkParameters > Constructors Name Summary <init> GenerateSchema() Functions Name Summary execute open fun execute(): Unit","title":"Home"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema/#generateschema","text":"abstract class GenerateSchema : WorkAction< GenerateSchemaTask.GenerateSchemaWorkParameters >","title":"GenerateSchema"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema/#constructors","text":"Name Summary <init> GenerateSchema()","title":"Constructors"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema/#functions","text":"Name Summary execute open fun execute(): Unit","title":"Functions"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema/-init-/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask / GenerateSchema / <init> <init> GenerateSchema()","title":" init "},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema/-init-/#init","text":"GenerateSchema()","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema/execute/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask / GenerateSchema / execute execute open fun execute(): Unit","title":"Execute"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema/execute/#execute","text":"open fun execute(): Unit","title":"execute"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema-work-parameters/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask / GenerateSchemaWorkParameters GenerateSchemaWorkParameters interface GenerateSchemaWorkParameters : WorkParameters Properties Name Summary moduleName abstract val moduleName: Property< String > outputDirectory abstract val outputDirectory: DirectoryProperty propertiesJson abstract val propertiesJson: Property< String > sourceFolders abstract val sourceFolders: ListProperty< File >","title":"Home"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema-work-parameters/#generateschemaworkparameters","text":"interface GenerateSchemaWorkParameters : WorkParameters","title":"GenerateSchemaWorkParameters"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema-work-parameters/#properties","text":"Name Summary moduleName abstract val moduleName: Property< String > outputDirectory abstract val outputDirectory: DirectoryProperty propertiesJson abstract val propertiesJson: Property< String > sourceFolders abstract val sourceFolders: ListProperty< File >","title":"Properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema-work-parameters/module-name/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask / GenerateSchemaWorkParameters / moduleName moduleName abstract val moduleName: Property< String >","title":"Module name"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema-work-parameters/module-name/#modulename","text":"abstract val moduleName: Property< String >","title":"moduleName"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema-work-parameters/output-directory/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask / GenerateSchemaWorkParameters / outputDirectory outputDirectory abstract val outputDirectory: DirectoryProperty","title":"Output directory"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema-work-parameters/output-directory/#outputdirectory","text":"abstract val outputDirectory: DirectoryProperty","title":"outputDirectory"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema-work-parameters/properties-json/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask / GenerateSchemaWorkParameters / propertiesJson propertiesJson abstract val propertiesJson: Property< String >","title":"Properties json"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema-work-parameters/properties-json/#propertiesjson","text":"abstract val propertiesJson: Property< String >","title":"propertiesJson"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema-work-parameters/source-folders/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / GenerateSchemaTask / GenerateSchemaWorkParameters / sourceFolders sourceFolders abstract val sourceFolders: ListProperty< File >","title":"Source folders"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-generate-schema-task/-generate-schema-work-parameters/source-folders/#sourcefolders","text":"abstract val sourceFolders: ListProperty< File >","title":"sourceFolders"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabase SqlDelightDatabase class SqlDelightDatabase Constructors Name Summary <init> SqlDelightDatabase(project: Project, name: String , packageName: String ? = null, schemaOutputDirectory: File ? = null, sourceFolders: Collection < String >? = null, dialect: String = \"sqlite:3.18\", deriveSchemaFromMigrations: Boolean = false, migrationOutputDirectory: File ? = null, migrationOutputFileFormat: String = \".sql\") Properties Name Summary deriveSchemaFromMigrations var deriveSchemaFromMigrations: Boolean dialect var dialect: String migrationOutputDirectory var migrationOutputDirectory: File ? migrationOutputFileFormat var migrationOutputFileFormat: String name var name: String packageName var packageName: String ? project val project: Project schemaOutputDirectory var schemaOutputDirectory: File ? sourceFolders var sourceFolders: Collection < String >? Functions Name Summary dependency fun dependency(dependencyProject: Project): Unit methodMissing fun methodMissing(name: String , args: Any ): Any","title":"Home"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/#sqldelightdatabase","text":"class SqlDelightDatabase","title":"SqlDelightDatabase"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/#constructors","text":"Name Summary <init> SqlDelightDatabase(project: Project, name: String , packageName: String ? = null, schemaOutputDirectory: File ? = null, sourceFolders: Collection < String >? = null, dialect: String = \"sqlite:3.18\", deriveSchemaFromMigrations: Boolean = false, migrationOutputDirectory: File ? = null, migrationOutputFileFormat: String = \".sql\")","title":"Constructors"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/#properties","text":"Name Summary deriveSchemaFromMigrations var deriveSchemaFromMigrations: Boolean dialect var dialect: String migrationOutputDirectory var migrationOutputDirectory: File ? migrationOutputFileFormat var migrationOutputFileFormat: String name var name: String packageName var packageName: String ? project val project: Project schemaOutputDirectory var schemaOutputDirectory: File ? sourceFolders var sourceFolders: Collection < String >?","title":"Properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/#functions","text":"Name Summary dependency fun dependency(dependencyProject: Project): Unit methodMissing fun methodMissing(name: String , args: Any ): Any","title":"Functions"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/-init-/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabase / <init> <init> SqlDelightDatabase(project: Project, name: String , packageName: String ? = null, schemaOutputDirectory: File ? = null, sourceFolders: Collection < String >? = null, dialect: String = \"sqlite:3.18\", deriveSchemaFromMigrations: Boolean = false, migrationOutputDirectory: File ? = null, migrationOutputFileFormat: String = \".sql\")","title":" init "},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/-init-/#init","text":"SqlDelightDatabase(project: Project, name: String , packageName: String ? = null, schemaOutputDirectory: File ? = null, sourceFolders: Collection < String >? = null, dialect: String = \"sqlite:3.18\", deriveSchemaFromMigrations: Boolean = false, migrationOutputDirectory: File ? = null, migrationOutputFileFormat: String = \".sql\")","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/dependency/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabase / dependency dependency fun dependency(dependencyProject: Project): Unit","title":"Dependency"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/dependency/#dependency","text":"fun dependency(dependencyProject: Project): Unit","title":"dependency"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/derive-schema-from-migrations/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabase / deriveSchemaFromMigrations deriveSchemaFromMigrations var deriveSchemaFromMigrations: Boolean","title":"Derive schema from migrations"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/derive-schema-from-migrations/#deriveschemafrommigrations","text":"var deriveSchemaFromMigrations: Boolean","title":"deriveSchemaFromMigrations"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/dialect/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabase / dialect dialect var dialect: String","title":"Dialect"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/dialect/#dialect","text":"var dialect: String","title":"dialect"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/method-missing/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabase / methodMissing methodMissing fun methodMissing(name: String , args: Any ): Any","title":"Method missing"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/method-missing/#methodmissing","text":"fun methodMissing(name: String , args: Any ): Any","title":"methodMissing"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/migration-output-directory/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabase / migrationOutputDirectory migrationOutputDirectory var migrationOutputDirectory: File ?","title":"Migration output directory"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/migration-output-directory/#migrationoutputdirectory","text":"var migrationOutputDirectory: File ?","title":"migrationOutputDirectory"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/migration-output-file-format/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabase / migrationOutputFileFormat migrationOutputFileFormat var migrationOutputFileFormat: String","title":"Migration output file format"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/migration-output-file-format/#migrationoutputfileformat","text":"var migrationOutputFileFormat: String","title":"migrationOutputFileFormat"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/name/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabase / name name var name: String","title":"Name"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/name/#name","text":"var name: String","title":"name"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/package-name/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabase / packageName packageName var packageName: String ?","title":"Package name"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/package-name/#packagename","text":"var packageName: String ?","title":"packageName"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/project/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabase / project project val project: Project","title":"Project"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/project/#project","text":"val project: Project","title":"project"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/schema-output-directory/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabase / schemaOutputDirectory schemaOutputDirectory var schemaOutputDirectory: File ?","title":"Schema output directory"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/schema-output-directory/#schemaoutputdirectory","text":"var schemaOutputDirectory: File ?","title":"schemaOutputDirectory"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/source-folders/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightDatabase / sourceFolders sourceFolders var sourceFolders: Collection < String >?","title":"Source folders"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-database/source-folders/#sourcefolders","text":"var sourceFolders: Collection < String >?","title":"sourceFolders"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-extension/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightExtension SqlDelightExtension open class SqlDelightExtension Constructors Name Summary <init> SqlDelightExtension() Properties Name Summary linkSqlite var linkSqlite: Boolean Functions Name Summary database fun database(name: String , config: SqlDelightDatabase .() -> Unit ): Unit Supports configuration in Kotlin script build files. methodMissing fun methodMissing(name: String , args: Any ): Any","title":"Home"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-extension/#sqldelightextension","text":"open class SqlDelightExtension","title":"SqlDelightExtension"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-extension/#constructors","text":"Name Summary <init> SqlDelightExtension()","title":"Constructors"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-extension/#properties","text":"Name Summary linkSqlite var linkSqlite: Boolean","title":"Properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-extension/#functions","text":"Name Summary database fun database(name: String , config: SqlDelightDatabase .() -> Unit ): Unit Supports configuration in Kotlin script build files. methodMissing fun methodMissing(name: String , args: Any ): Any","title":"Functions"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-extension/-init-/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightExtension / <init> <init> SqlDelightExtension()","title":" init "},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-extension/-init-/#init","text":"SqlDelightExtension()","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-extension/database/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightExtension / database database fun database(name: String , config: SqlDelightDatabase .() -> Unit ): Unit Supports configuration in Kotlin script build files. sqldelight { database(\"MyDatabase\") { packageName = \"com.example\" sourceSet = files(\"src/main/sqldelight\") } }","title":"Database"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-extension/database/#database","text":"fun database(name: String , config: SqlDelightDatabase .() -> Unit ): Unit Supports configuration in Kotlin script build files. sqldelight { database(\"MyDatabase\") { packageName = \"com.example\" sourceSet = files(\"src/main/sqldelight\") } }","title":"database"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-extension/link-sqlite/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightExtension / linkSqlite linkSqlite var linkSqlite: Boolean","title":"Link sqlite"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-extension/link-sqlite/#linksqlite","text":"var linkSqlite: Boolean","title":"linkSqlite"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-extension/method-missing/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightExtension / methodMissing methodMissing fun methodMissing(name: String , args: Any ): Any","title":"Method missing"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-extension/method-missing/#methodmissing","text":"fun methodMissing(name: String , args: Any ): Any","title":"methodMissing"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-plugin/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightPlugin SqlDelightPlugin open class SqlDelightPlugin : Plugin<Project> Constructors Name Summary <init> SqlDelightPlugin() Functions Name Summary apply open fun apply(project: Project): Unit","title":"Home"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-plugin/#sqldelightplugin","text":"open class SqlDelightPlugin : Plugin<Project>","title":"SqlDelightPlugin"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-plugin/#constructors","text":"Name Summary <init> SqlDelightPlugin()","title":"Constructors"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-plugin/#functions","text":"Name Summary apply open fun apply(project: Project): Unit","title":"Functions"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-plugin/-init-/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightPlugin / <init> <init> SqlDelightPlugin()","title":" init "},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-plugin/-init-/#init","text":"SqlDelightPlugin()","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-plugin/apply/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightPlugin / apply apply open fun apply(project: Project): Unit","title":"Apply"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-plugin/apply/#apply","text":"open fun apply(project: Project): Unit","title":"apply"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightTask SqlDelightTask @CacheableTask open class SqlDelightTask : SourceTask Constructors Name Summary <init> SqlDelightTask() Properties Name Summary dependencySourceFolders lateinit var dependencySourceFolders: Iterable < File > outputDirectory var outputDirectory: File ? pluginVersion val pluginVersion: String properties lateinit var properties: SqlDelightDatabaseProperties sourceFolders lateinit var sourceFolders: Iterable < File > Functions Name Summary generateSqlDelightFiles fun generateSqlDelightFiles(): Unit getSource open fun getSource(): FileTree","title":"Home"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/#sqldelighttask","text":"@CacheableTask open class SqlDelightTask : SourceTask","title":"SqlDelightTask"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/#constructors","text":"Name Summary <init> SqlDelightTask()","title":"Constructors"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/#properties","text":"Name Summary dependencySourceFolders lateinit var dependencySourceFolders: Iterable < File > outputDirectory var outputDirectory: File ? pluginVersion val pluginVersion: String properties lateinit var properties: SqlDelightDatabaseProperties sourceFolders lateinit var sourceFolders: Iterable < File >","title":"Properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/#functions","text":"Name Summary generateSqlDelightFiles fun generateSqlDelightFiles(): Unit getSource open fun getSource(): FileTree","title":"Functions"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/-init-/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightTask / <init> <init> SqlDelightTask()","title":" init "},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/-init-/#init","text":"SqlDelightTask()","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/dependency-source-folders/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightTask / dependencySourceFolders dependencySourceFolders lateinit var dependencySourceFolders: Iterable < File >","title":"Dependency source folders"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/dependency-source-folders/#dependencysourcefolders","text":"lateinit var dependencySourceFolders: Iterable < File >","title":"dependencySourceFolders"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/generate-sql-delight-files/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightTask / generateSqlDelightFiles generateSqlDelightFiles fun generateSqlDelightFiles(): Unit","title":"Generate sql delight files"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/generate-sql-delight-files/#generatesqldelightfiles","text":"fun generateSqlDelightFiles(): Unit","title":"generateSqlDelightFiles"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/get-source/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightTask / getSource getSource @InputFiles @SkipWhenEmpty @PathSensitive(PathSensitivity.RELATIVE) open fun getSource(): FileTree","title":"Get source"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/get-source/#getsource","text":"@InputFiles @SkipWhenEmpty @PathSensitive(PathSensitivity.RELATIVE) open fun getSource(): FileTree","title":"getSource"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/output-directory/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightTask / outputDirectory outputDirectory var outputDirectory: File ?","title":"Output directory"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/output-directory/#outputdirectory","text":"var outputDirectory: File ?","title":"outputDirectory"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/plugin-version/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightTask / pluginVersion pluginVersion val pluginVersion: String","title":"Plugin version"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/plugin-version/#pluginversion","text":"val pluginVersion: String","title":"pluginVersion"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/properties/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightTask / properties properties lateinit var properties: SqlDelightDatabaseProperties","title":"Properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/properties/#properties","text":"lateinit var properties: SqlDelightDatabaseProperties","title":"properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/source-folders/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / SqlDelightTask / sourceFolders sourceFolders lateinit var sourceFolders: Iterable < File >","title":"Source folders"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-sql-delight-task/source-folders/#sourcefolders","text":"lateinit var sourceFolders: Iterable < File >","title":"sourceFolders"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / VerifyMigrationTask VerifyMigrationTask open class VerifyMigrationTask : SourceTask Constructors Name Summary <init> VerifyMigrationTask() Properties Name Summary pluginVersion val pluginVersion: String properties lateinit var properties: SqlDelightDatabaseProperties sourceFolders lateinit var sourceFolders: Iterable < File > workingDirectory lateinit var workingDirectory: File Directory where the database files are copied for the migration scripts to run against. Functions Name Summary getSource open fun getSource(): FileTree verifyMigrations fun verifyMigrations(): Unit","title":"Home"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/#verifymigrationtask","text":"open class VerifyMigrationTask : SourceTask","title":"VerifyMigrationTask"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/#constructors","text":"Name Summary <init> VerifyMigrationTask()","title":"Constructors"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/#properties","text":"Name Summary pluginVersion val pluginVersion: String properties lateinit var properties: SqlDelightDatabaseProperties sourceFolders lateinit var sourceFolders: Iterable < File > workingDirectory lateinit var workingDirectory: File Directory where the database files are copied for the migration scripts to run against.","title":"Properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/#functions","text":"Name Summary getSource open fun getSource(): FileTree verifyMigrations fun verifyMigrations(): Unit","title":"Functions"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/-init-/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / VerifyMigrationTask / <init> <init> VerifyMigrationTask()","title":" init "},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/-init-/#init","text":"VerifyMigrationTask()","title":"&lt;init&gt;"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/get-source/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / VerifyMigrationTask / getSource getSource @InputFiles @SkipWhenEmpty @PathSensitive(PathSensitivity.RELATIVE) open fun getSource(): FileTree","title":"Get source"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/get-source/#getsource","text":"@InputFiles @SkipWhenEmpty @PathSensitive(PathSensitivity.RELATIVE) open fun getSource(): FileTree","title":"getSource"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/plugin-version/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / VerifyMigrationTask / pluginVersion pluginVersion val pluginVersion: String","title":"Plugin version"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/plugin-version/#pluginversion","text":"val pluginVersion: String","title":"pluginVersion"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/properties/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / VerifyMigrationTask / properties properties lateinit var properties: SqlDelightDatabaseProperties","title":"Properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/properties/#properties","text":"lateinit var properties: SqlDelightDatabaseProperties","title":"properties"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/source-folders/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / VerifyMigrationTask / sourceFolders sourceFolders lateinit var sourceFolders: Iterable < File >","title":"Source folders"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/source-folders/#sourcefolders","text":"lateinit var sourceFolders: Iterable < File >","title":"sourceFolders"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/verify-migrations/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / VerifyMigrationTask / verifyMigrations verifyMigrations fun verifyMigrations(): Unit","title":"Verify migrations"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/verify-migrations/#verifymigrations","text":"fun verifyMigrations(): Unit","title":"verifyMigrations"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/working-directory/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle / VerifyMigrationTask / workingDirectory workingDirectory lateinit var workingDirectory: File Directory where the database files are copied for the migration scripts to run against.","title":"Working directory"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle/-verify-migration-task/working-directory/#workingdirectory","text":"lateinit var workingDirectory: File Directory where the database files are copied for the migration scripts to run against.","title":"workingDirectory"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle.kotlin/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle.kotlin Package com.squareup.sqldelight.gradle.kotlin Extensions for External Classes Name Summary org.gradle.api.Project","title":"Home"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle.kotlin/#package-comsquareupsqldelightgradlekotlin","text":"","title":"Package com.squareup.sqldelight.gradle.kotlin"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle.kotlin/#extensions-for-external-classes","text":"Name Summary org.gradle.api.Project","title":"Extensions for External Classes"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle.kotlin/org.gradle.api.-project/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle.kotlin / org.gradle.api.Project Extensions for org.gradle.api.Project Name Summary linkSqlite fun Project.linkSqlite(): Unit","title":"Home"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle.kotlin/org.gradle.api.-project/#extensions-for-orggradleapiproject","text":"Name Summary linkSqlite fun Project.linkSqlite(): Unit","title":"Extensions for org.gradle.api.Project"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle.kotlin/org.gradle.api.-project/link-sqlite/","text":"sqldelight-gradle-plugin / com.squareup.sqldelight.gradle.kotlin / org.gradle.api.Project / linkSqlite linkSqlite fun Project.linkSqlite(): Unit","title":"Link sqlite"},{"location":"1.x/sqldelight-gradle-plugin/com.squareup.sqldelight.gradle.kotlin/org.gradle.api.-project/link-sqlite/#linksqlite","text":"fun Project.linkSqlite(): Unit","title":"linkSqlite"},{"location":"1.x/sqlite-driver/","text":"sqlite-driver Packages Name Summary com.squareup.sqldelight.sqlite.driver Index All Types","title":"sqlite-driver"},{"location":"1.x/sqlite-driver/#packages","text":"Name Summary com.squareup.sqldelight.sqlite.driver","title":"Packages"},{"location":"1.x/sqlite-driver/#index","text":"All Types","title":"Index"},{"location":"1.x/sqlite-driver/alltypes/","text":"All Types Name Summary com.squareup.sqldelight.sqlite.driver.JdbcSqliteDriver","title":"Home"},{"location":"1.x/sqlite-driver/alltypes/#all-types","text":"Name Summary com.squareup.sqldelight.sqlite.driver.JdbcSqliteDriver","title":"All Types"},{"location":"1.x/sqlite-driver/com.squareup.sqldelight.sqlite.driver/","text":"sqlite-driver / com.squareup.sqldelight.sqlite.driver Package com.squareup.sqldelight.sqlite.driver Types Name Summary JdbcSqliteDriver class JdbcSqliteDriver : JdbcDriver","title":"Home"},{"location":"1.x/sqlite-driver/com.squareup.sqldelight.sqlite.driver/#package-comsquareupsqldelightsqlitedriver","text":"","title":"Package com.squareup.sqldelight.sqlite.driver"},{"location":"1.x/sqlite-driver/com.squareup.sqldelight.sqlite.driver/#types","text":"Name Summary JdbcSqliteDriver class JdbcSqliteDriver : JdbcDriver","title":"Types"},{"location":"1.x/sqlite-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-sqlite-driver/","text":"sqlite-driver / com.squareup.sqldelight.sqlite.driver / JdbcSqliteDriver JdbcSqliteDriver class JdbcSqliteDriver : JdbcDriver Constructors Name Summary <init> JdbcSqliteDriver(properties: Properties = Properties()) JdbcSqliteDriver(url: String , properties: Properties = Properties()) Functions Name Summary close fun close(): Unit closeConnection fun closeConnection(connection: Connection ): Unit getConnection fun getConnection(): Connection ! Companion Object Properties Name Summary IN_MEMORY const val IN_MEMORY: String","title":"Home"},{"location":"1.x/sqlite-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-sqlite-driver/#jdbcsqlitedriver","text":"class JdbcSqliteDriver : JdbcDriver","title":"JdbcSqliteDriver"},{"location":"1.x/sqlite-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-sqlite-driver/#constructors","text":"Name Summary <init> JdbcSqliteDriver(properties: Properties = Properties()) JdbcSqliteDriver(url: String , properties: Properties = Properties())","title":"Constructors"},{"location":"1.x/sqlite-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-sqlite-driver/#functions","text":"Name Summary close fun close(): Unit closeConnection fun closeConnection(connection: Connection ): Unit getConnection fun getConnection(): Connection !","title":"Functions"},{"location":"1.x/sqlite-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-sqlite-driver/#companion-object-properties","text":"Name Summary IN_MEMORY const val IN_MEMORY: String","title":"Companion Object Properties"},{"location":"1.x/sqlite-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-sqlite-driver/-i-n_-m-e-m-o-r-y/","text":"sqlite-driver / com.squareup.sqldelight.sqlite.driver / JdbcSqliteDriver / IN_MEMORY IN_MEMORY const val IN_MEMORY: String","title":" i n  m e m o r y"},{"location":"1.x/sqlite-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-sqlite-driver/-i-n_-m-e-m-o-r-y/#in_memory","text":"const val IN_MEMORY: String","title":"IN_MEMORY"},{"location":"1.x/sqlite-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-sqlite-driver/-init-/","text":"sqlite-driver / com.squareup.sqldelight.sqlite.driver / JdbcSqliteDriver / <init> <init> JdbcSqliteDriver(properties: Properties = Properties()) JdbcSqliteDriver(url: String , properties: Properties = Properties())","title":" init "},{"location":"1.x/sqlite-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-sqlite-driver/-init-/#init","text":"JdbcSqliteDriver(properties: Properties = Properties()) JdbcSqliteDriver(url: String , properties: Properties = Properties())","title":"&lt;init&gt;"},{"location":"1.x/sqlite-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-sqlite-driver/close-connection/","text":"sqlite-driver / com.squareup.sqldelight.sqlite.driver / JdbcSqliteDriver / closeConnection closeConnection fun closeConnection(connection: Connection ): Unit","title":"Close connection"},{"location":"1.x/sqlite-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-sqlite-driver/close-connection/#closeconnection","text":"fun closeConnection(connection: Connection ): Unit","title":"closeConnection"},{"location":"1.x/sqlite-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-sqlite-driver/close/","text":"sqlite-driver / com.squareup.sqldelight.sqlite.driver / JdbcSqliteDriver / close close fun close(): Unit","title":"Close"},{"location":"1.x/sqlite-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-sqlite-driver/close/#close","text":"fun close(): Unit","title":"close"},{"location":"1.x/sqlite-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-sqlite-driver/get-connection/","text":"sqlite-driver / com.squareup.sqldelight.sqlite.driver / JdbcSqliteDriver / getConnection getConnection fun getConnection(): Connection !","title":"Get connection"},{"location":"1.x/sqlite-driver/com.squareup.sqldelight.sqlite.driver/-jdbc-sqlite-driver/get-connection/#getconnection","text":"fun getConnection(): Connection !","title":"getConnection"},{"location":"1.x/sqlite-migrations/","text":"sqlite-migrations Packages Name Summary com.squareup.sqlite.migrations Index All Types","title":"sqlite-migrations"},{"location":"1.x/sqlite-migrations/#packages","text":"Name Summary com.squareup.sqlite.migrations","title":"Packages"},{"location":"1.x/sqlite-migrations/#index","text":"All Types","title":"Index"},{"location":"1.x/sqlite-migrations/alltypes/","text":"All Types Name Summary com.squareup.sqlite.migrations.CatalogDatabase com.squareup.sqlite.migrations.Database com.squareup.sqlite.migrations.DatabaseComparator com.squareup.sqlite.migrations.DatabaseDiff com.squareup.sqlite.migrations.DatabaseFilesCollector com.squareup.sqlite.migrations.ObjectDifferDatabaseComparator com.squareup.sqlite.migrations.ObjectDifferDatabaseDiff","title":"Home"},{"location":"1.x/sqlite-migrations/alltypes/#all-types","text":"Name Summary com.squareup.sqlite.migrations.CatalogDatabase com.squareup.sqlite.migrations.Database com.squareup.sqlite.migrations.DatabaseComparator com.squareup.sqlite.migrations.DatabaseDiff com.squareup.sqlite.migrations.DatabaseFilesCollector com.squareup.sqlite.migrations.ObjectDifferDatabaseComparator com.squareup.sqlite.migrations.ObjectDifferDatabaseDiff","title":"All Types"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/","text":"sqlite-migrations / com.squareup.sqlite.migrations Package com.squareup.sqlite.migrations Types Name Summary CatalogDatabase class CatalogDatabase : Database Database abstract class Database DatabaseComparator interface DatabaseComparator<T : Database > DatabaseDiff interface DatabaseDiff DatabaseFilesCollector object DatabaseFilesCollector ObjectDifferDatabaseComparator class ObjectDifferDatabaseComparator : DatabaseComparator < CatalogDatabase > ObjectDifferDatabaseDiff class ObjectDifferDatabaseDiff : DatabaseDiff","title":"Home"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/#package-comsquareupsqlitemigrations","text":"","title":"Package com.squareup.sqlite.migrations"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/#types","text":"Name Summary CatalogDatabase class CatalogDatabase : Database Database abstract class Database DatabaseComparator interface DatabaseComparator<T : Database > DatabaseDiff interface DatabaseDiff DatabaseFilesCollector object DatabaseFilesCollector ObjectDifferDatabaseComparator class ObjectDifferDatabaseComparator : DatabaseComparator < CatalogDatabase > ObjectDifferDatabaseDiff class ObjectDifferDatabaseDiff : DatabaseDiff","title":"Types"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-catalog-database/","text":"sqlite-migrations / com.squareup.sqlite.migrations / CatalogDatabase CatalogDatabase class CatalogDatabase : Database Companion Object Functions Name Summary fromFile fun fromFile(path: String , initStatements: List < String >): CatalogDatabase withInitStatements fun withInitStatements(initStatements: List < String >): CatalogDatabase","title":"Home"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-catalog-database/#catalogdatabase","text":"class CatalogDatabase : Database","title":"CatalogDatabase"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-catalog-database/#companion-object-functions","text":"Name Summary fromFile fun fromFile(path: String , initStatements: List < String >): CatalogDatabase withInitStatements fun withInitStatements(initStatements: List < String >): CatalogDatabase","title":"Companion Object Functions"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-catalog-database/from-file/","text":"sqlite-migrations / com.squareup.sqlite.migrations / CatalogDatabase / fromFile fromFile fun fromFile(path: String , initStatements: List < String >): CatalogDatabase","title":"From file"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-catalog-database/from-file/#fromfile","text":"fun fromFile(path: String , initStatements: List < String >): CatalogDatabase","title":"fromFile"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-catalog-database/with-init-statements/","text":"sqlite-migrations / com.squareup.sqlite.migrations / CatalogDatabase / withInitStatements withInitStatements fun withInitStatements(initStatements: List < String >): CatalogDatabase","title":"With init statements"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-catalog-database/with-init-statements/#withinitstatements","text":"fun withInitStatements(initStatements: List < String >): CatalogDatabase","title":"withInitStatements"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database/","text":"sqlite-migrations / com.squareup.sqlite.migrations / Database Database abstract class Database Constructors Name Summary <init> Database() Inheritors Name Summary CatalogDatabase class CatalogDatabase : Database","title":"Home"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database/#database","text":"abstract class Database","title":"Database"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database/#constructors","text":"Name Summary <init> Database()","title":"Constructors"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database/#inheritors","text":"Name Summary CatalogDatabase class CatalogDatabase : Database","title":"Inheritors"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database/-init-/","text":"sqlite-migrations / com.squareup.sqlite.migrations / Database / <init> <init> Database()","title":" init "},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database/-init-/#init","text":"Database()","title":"&lt;init&gt;"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database-comparator/","text":"sqlite-migrations / com.squareup.sqlite.migrations / DatabaseComparator DatabaseComparator interface DatabaseComparator<T : Database > Functions Name Summary compare abstract fun compare(db1: T , db2: T ): DatabaseDiff Inheritors Name Summary ObjectDifferDatabaseComparator class ObjectDifferDatabaseComparator : DatabaseComparator < CatalogDatabase >","title":"Home"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database-comparator/#databasecomparator","text":"interface DatabaseComparator<T : Database >","title":"DatabaseComparator"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database-comparator/#functions","text":"Name Summary compare abstract fun compare(db1: T , db2: T ): DatabaseDiff","title":"Functions"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database-comparator/#inheritors","text":"Name Summary ObjectDifferDatabaseComparator class ObjectDifferDatabaseComparator : DatabaseComparator < CatalogDatabase >","title":"Inheritors"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database-comparator/compare/","text":"sqlite-migrations / com.squareup.sqlite.migrations / DatabaseComparator / compare compare abstract fun compare(db1: T , db2: T ): DatabaseDiff","title":"Compare"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database-comparator/compare/#compare","text":"abstract fun compare(db1: T , db2: T ): DatabaseDiff","title":"compare"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database-diff/","text":"sqlite-migrations / com.squareup.sqlite.migrations / DatabaseDiff DatabaseDiff interface DatabaseDiff Functions Name Summary printTo abstract fun printTo(out: Appendable ): Unit Inheritors Name Summary ObjectDifferDatabaseDiff class ObjectDifferDatabaseDiff : DatabaseDiff","title":"Home"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database-diff/#databasediff","text":"interface DatabaseDiff","title":"DatabaseDiff"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database-diff/#functions","text":"Name Summary printTo abstract fun printTo(out: Appendable ): Unit","title":"Functions"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database-diff/#inheritors","text":"Name Summary ObjectDifferDatabaseDiff class ObjectDifferDatabaseDiff : DatabaseDiff","title":"Inheritors"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database-diff/print-to/","text":"sqlite-migrations / com.squareup.sqlite.migrations / DatabaseDiff / printTo printTo abstract fun printTo(out: Appendable ): Unit","title":"Print to"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database-diff/print-to/#printto","text":"abstract fun printTo(out: Appendable ): Unit","title":"printTo"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database-files-collector/","text":"sqlite-migrations / com.squareup.sqlite.migrations / DatabaseFilesCollector DatabaseFilesCollector object DatabaseFilesCollector Functions Name Summary forDatabaseFiles fun forDatabaseFiles(sourceFolders: Iterable < File >, block: ( File ) -> Unit ): Unit","title":"Home"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database-files-collector/#databasefilescollector","text":"object DatabaseFilesCollector","title":"DatabaseFilesCollector"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database-files-collector/#functions","text":"Name Summary forDatabaseFiles fun forDatabaseFiles(sourceFolders: Iterable < File >, block: ( File ) -> Unit ): Unit","title":"Functions"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database-files-collector/for-database-files/","text":"sqlite-migrations / com.squareup.sqlite.migrations / DatabaseFilesCollector / forDatabaseFiles forDatabaseFiles inline fun forDatabaseFiles(sourceFolders: Iterable < File >, block: ( File ) -> Unit ): Unit","title":"For database files"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-database-files-collector/for-database-files/#fordatabasefiles","text":"inline fun forDatabaseFiles(sourceFolders: Iterable < File >, block: ( File ) -> Unit ): Unit","title":"forDatabaseFiles"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-object-differ-database-comparator/","text":"sqlite-migrations / com.squareup.sqlite.migrations / ObjectDifferDatabaseComparator ObjectDifferDatabaseComparator class ObjectDifferDatabaseComparator : DatabaseComparator < CatalogDatabase > Constructors Name Summary <init> ObjectDifferDatabaseComparator(circularReferenceExceptionLogger: (( String ) -> Unit )? = null) Functions Name Summary compare fun compare(db1: CatalogDatabase , db2: CatalogDatabase ): DatabaseDiff","title":"Home"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-object-differ-database-comparator/#objectdifferdatabasecomparator","text":"class ObjectDifferDatabaseComparator : DatabaseComparator < CatalogDatabase >","title":"ObjectDifferDatabaseComparator"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-object-differ-database-comparator/#constructors","text":"Name Summary <init> ObjectDifferDatabaseComparator(circularReferenceExceptionLogger: (( String ) -> Unit )? = null)","title":"Constructors"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-object-differ-database-comparator/#functions","text":"Name Summary compare fun compare(db1: CatalogDatabase , db2: CatalogDatabase ): DatabaseDiff","title":"Functions"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-object-differ-database-comparator/-init-/","text":"sqlite-migrations / com.squareup.sqlite.migrations / ObjectDifferDatabaseComparator / <init> <init> ObjectDifferDatabaseComparator(circularReferenceExceptionLogger: (( String ) -> Unit )? = null)","title":" init "},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-object-differ-database-comparator/-init-/#init","text":"ObjectDifferDatabaseComparator(circularReferenceExceptionLogger: (( String ) -> Unit )? = null)","title":"&lt;init&gt;"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-object-differ-database-comparator/compare/","text":"sqlite-migrations / com.squareup.sqlite.migrations / ObjectDifferDatabaseComparator / compare compare fun compare(db1: CatalogDatabase , db2: CatalogDatabase ): DatabaseDiff Overrides DatabaseComparator.compare","title":"Compare"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-object-differ-database-comparator/compare/#compare","text":"fun compare(db1: CatalogDatabase , db2: CatalogDatabase ): DatabaseDiff Overrides DatabaseComparator.compare","title":"compare"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-object-differ-database-diff/","text":"sqlite-migrations / com.squareup.sqlite.migrations / ObjectDifferDatabaseDiff ObjectDifferDatabaseDiff class ObjectDifferDatabaseDiff : DatabaseDiff Constructors Name Summary <init> ObjectDifferDatabaseDiff(diff: DiffNode) Functions Name Summary printTo fun printTo(out: Appendable ): Unit toString fun toString(): String","title":"Home"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-object-differ-database-diff/#objectdifferdatabasediff","text":"class ObjectDifferDatabaseDiff : DatabaseDiff","title":"ObjectDifferDatabaseDiff"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-object-differ-database-diff/#constructors","text":"Name Summary <init> ObjectDifferDatabaseDiff(diff: DiffNode)","title":"Constructors"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-object-differ-database-diff/#functions","text":"Name Summary printTo fun printTo(out: Appendable ): Unit toString fun toString(): String","title":"Functions"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-object-differ-database-diff/-init-/","text":"sqlite-migrations / com.squareup.sqlite.migrations / ObjectDifferDatabaseDiff / <init> <init> ObjectDifferDatabaseDiff(diff: DiffNode)","title":" init "},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-object-differ-database-diff/-init-/#init","text":"ObjectDifferDatabaseDiff(diff: DiffNode)","title":"&lt;init&gt;"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-object-differ-database-diff/print-to/","text":"sqlite-migrations / com.squareup.sqlite.migrations / ObjectDifferDatabaseDiff / printTo printTo fun printTo(out: Appendable ): Unit Overrides DatabaseDiff.printTo","title":"Print to"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-object-differ-database-diff/print-to/#printto","text":"fun printTo(out: Appendable ): Unit Overrides DatabaseDiff.printTo","title":"printTo"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-object-differ-database-diff/to-string/","text":"sqlite-migrations / com.squareup.sqlite.migrations / ObjectDifferDatabaseDiff / toString toString fun toString(): String","title":"To string"},{"location":"1.x/sqlite-migrations/com.squareup.sqlite.migrations/-object-differ-database-diff/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"android_sqlite/","text":"Getting Started on Android First apply the gradle plugin in your project. buildscript { repositories { google () mavenCentral () } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.4.0' } } apply plugin: 'com.squareup.sqldelight' Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); From this SQLDelight will generate a Database Kotlin class with an associated Schema object that can be used to create your database and run your statements on it. Doing this also requires a driver, which SQLDelight provides implementations of: dependencies { implementation \"com.squareup.sqldelight:android-driver:1.4.0\" } val driver : SqlDriver = AndroidSqliteDriver ( Database . Schema , context , \"test.db\" ) It's recommended to switch Android Studio to use the \"Project\" view instead of the \"Android\" view of your files, in order to find and edit SQLDelight files. SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality.","title":"Getting Started"},{"location":"android_sqlite/#getting-started-on-android","text":"First apply the gradle plugin in your project. buildscript { repositories { google () mavenCentral () } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.4.0' } } apply plugin: 'com.squareup.sqldelight' Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); From this SQLDelight will generate a Database Kotlin class with an associated Schema object that can be used to create your database and run your statements on it. Doing this also requires a driver, which SQLDelight provides implementations of: dependencies { implementation \"com.squareup.sqldelight:android-driver:1.4.0\" } val driver : SqlDriver = AndroidSqliteDriver ( Database . Schema , context , \"test.db\" ) It's recommended to switch Android Studio to use the \"Project\" view instead of the \"Android\" view of your files, in order to find and edit SQLDelight files. SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality.","title":"Getting Started on Android"},{"location":"android_sqlite/android_paging/","text":"Android Paging To use SQLDelight with Android's Paging Library add a dependency on the paging extension artifact. dependencies { implementation \"com.squareup.sqldelight:android-paging-extensions:1.2.1\" } To create a DataSource write a query to get the number of rows and a query that takes an offset and a limit. countPlayers : SELECT count ( * ) FROM hockeyPlayer ; players : SELECT * FROM hockeyPlayer LIMIT : limit OFFSET : offset ; val dataSource = QueryDataSourceFactory ( queryProvider = playerQueries :: players , countQuery = playerQueries . countPlayers (), transacter = playerQueries ). create ()","title":"Android Paging"},{"location":"android_sqlite/android_paging/#android-paging","text":"To use SQLDelight with Android's Paging Library add a dependency on the paging extension artifact. dependencies { implementation \"com.squareup.sqldelight:android-paging-extensions:1.2.1\" } To create a DataSource write a query to get the number of rows and a query that takes an offset and a limit. countPlayers : SELECT count ( * ) FROM hockeyPlayer ; players : SELECT * FROM hockeyPlayer LIMIT : limit OFFSET : offset ; val dataSource = QueryDataSourceFactory ( queryProvider = playerQueries :: players , countQuery = playerQueries . countPlayers (), transacter = playerQueries ). create ()","title":"Android Paging"},{"location":"android_sqlite/coroutines/","text":"Flow To consume a query as a Flow, depend on the Coroutines extensions artifact and use the extension method it provides: dependencies { implementation \"com.squareup.sqldelight:coroutines-extensions-jvm:1.4.0\" } val players : Flow < List < HockeyPlayer >> = playerQueries . selectAll () . asFlow () . mapToList () This flow emits the query result, and emits a new result every time the database changes for that query.","title":"Coroutines"},{"location":"android_sqlite/coroutines/#flow","text":"To consume a query as a Flow, depend on the Coroutines extensions artifact and use the extension method it provides: dependencies { implementation \"com.squareup.sqldelight:coroutines-extensions-jvm:1.4.0\" } val players : Flow < List < HockeyPlayer >> = playerQueries . selectAll () . asFlow () . mapToList () This flow emits the query result, and emits a new result every time the database changes for that query.","title":"Flow"},{"location":"android_sqlite/custom_projections/","text":"Projections By default queries will return a data class with your projection, but you can override the behavior with a typesafe mapper. val selectAllNames = playerQueries . selectAll ( mapper = { player_number , full_name -> full_name . toUppercase () } ) println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"] In general you should be leveraging SQL to do custom projections whenever possible. selectNames : SELECT upper ( full_name ) FROM hockeyPlayer ; val selectAllNames = playerQueries . selectNames () println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]","title":"Projections"},{"location":"android_sqlite/custom_projections/#projections","text":"By default queries will return a data class with your projection, but you can override the behavior with a typesafe mapper. val selectAllNames = playerQueries . selectAll ( mapper = { player_number , full_name -> full_name . toUppercase () } ) println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"] In general you should be leveraging SQL to do custom projections whenever possible. selectNames : SELECT upper ( full_name ) FROM hockeyPlayer ; val selectAllNames = playerQueries . selectNames () println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]","title":"Projections"},{"location":"android_sqlite/gradle/","text":"Gradle For greater customization, you can declare databases explicitly using the Gradle DSL. build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db'. // Defaults to [\"sqldelight\"] (src/main/sqldelight) sourceFolders = [ \"db\" ] // The directory where to store '.db' schema files relative to the root // of the project. These files are used to verify that migrations yield // a database with the latest schema. Defaults to null so the verification // tasks will not be created. schemaOutputDirectory = file ( \"src/main/sqldelight/databases\" ) // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // The dialect version you would like to target // Defaults to \"sqlite:3.18\" dialect = \"sqlite:3.24\" } } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = listOf ( \"db\" ) schemaOutputDirectory = file ( \"build/dbs\" ) dependency ( project ( \":OtherProject\" )) dialect = \"sqlite:3.24\" } } Dependencies You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Gradle"},{"location":"android_sqlite/gradle/#gradle","text":"For greater customization, you can declare databases explicitly using the Gradle DSL. build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db'. // Defaults to [\"sqldelight\"] (src/main/sqldelight) sourceFolders = [ \"db\" ] // The directory where to store '.db' schema files relative to the root // of the project. These files are used to verify that migrations yield // a database with the latest schema. Defaults to null so the verification // tasks will not be created. schemaOutputDirectory = file ( \"src/main/sqldelight/databases\" ) // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // The dialect version you would like to target // Defaults to \"sqlite:3.18\" dialect = \"sqlite:3.24\" } } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = listOf ( \"db\" ) schemaOutputDirectory = file ( \"build/dbs\" ) dependency ( project ( \":OtherProject\" )) dialect = \"sqlite:3.24\" } }","title":"Gradle"},{"location":"android_sqlite/gradle/#dependencies","text":"You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Dependencies"},{"location":"android_sqlite/grouping_statements/","text":"You can group multiple SQL statements together to be executed at once: upsert { UPDATE myTable SET column1 = : column1 , column2 = : column2 WHERE id = : id ; INSERT OR IGNORE INTO myTable ( id , column1 , column2 ) VALUES (: column1 , : column2 , : column3 ); }","title":"Grouping Statements"},{"location":"android_sqlite/intellij_plugin/","text":"IntelliJ Plugin The IntelliJ plugin provides language-level features for .sq files, including: Syntax highlighting Refactoring/Find usages Code autocompletion Generate Queries files after edits Right click to copy as valid SQLite Compiler errors in IDE click through to file It can be installed from your IDE by navigating Preferences -> Plugins -> Marketplace -> Search for SQLDelight","title":"IntelliJ Plugin"},{"location":"android_sqlite/intellij_plugin/#intellij-plugin","text":"The IntelliJ plugin provides language-level features for .sq files, including: Syntax highlighting Refactoring/Find usages Code autocompletion Generate Queries files after edits Right click to copy as valid SQLite Compiler errors in IDE click through to file It can be installed from your IDE by navigating Preferences -> Plugins -> Marketplace -> Search for SQLDelight","title":"IntelliJ Plugin"},{"location":"android_sqlite/migrations/","text":"Migrations The .sq file always describes how to create the latest schema in an empty database. If your database is currently on an earlier version, migration files bring those databases up-to-date. Versioning The first version of the schema is 1. Migration files are named <version to upgrade from>.sqm . To migrate to version 2, put migration statements in 1.sqm : ALTER TABLE hockeyPlayer ADD COLUMN draft_year INTEGER ; ALTER TABLE hockeyPlayer ADD COLUMN draft_order INTEGER ; These SQL statements are run by Database.Schema.migrate() . Migration files go in the same source set as your .sq files. Verifying Migrations You can also place a .db file in the src/main/sqldelight folder of the same <version number>.db format. If there is a .db file present, a new verifySqlDelightMigration task will be added to the gradle project, and it will run as part of the test task, meaning your migrations will be verified against that .db file. It confirms that the migrations yield a database with the latest schema. To generate a .db file from your latest schema, run the generateSqlDelightSchema task, which is available once you specify a schemaOutputDirectory , as described in the gradle.md . You should probably do this before you create your first migration.","title":"Migrations"},{"location":"android_sqlite/migrations/#migrations","text":"The .sq file always describes how to create the latest schema in an empty database. If your database is currently on an earlier version, migration files bring those databases up-to-date.","title":"Migrations"},{"location":"android_sqlite/migrations/#versioning","text":"The first version of the schema is 1. Migration files are named <version to upgrade from>.sqm . To migrate to version 2, put migration statements in 1.sqm : ALTER TABLE hockeyPlayer ADD COLUMN draft_year INTEGER ; ALTER TABLE hockeyPlayer ADD COLUMN draft_order INTEGER ; These SQL statements are run by Database.Schema.migrate() . Migration files go in the same source set as your .sq files.","title":"Versioning"},{"location":"android_sqlite/migrations/#verifying-migrations","text":"You can also place a .db file in the src/main/sqldelight folder of the same <version number>.db format. If there is a .db file present, a new verifySqlDelightMigration task will be added to the gradle project, and it will run as part of the test task, meaning your migrations will be verified against that .db file. It confirms that the migrations yield a database with the latest schema. To generate a .db file from your latest schema, run the generateSqlDelightSchema task, which is available once you specify a schemaOutputDirectory , as described in the gradle.md . You should probably do this before you create your first migration.","title":"Verifying Migrations"},{"location":"android_sqlite/query_arguments/","text":"Bind Args .sq files use the exact same syntax as SQLite, including SQLite Bind Args . If a statement contains bind args, the associated method will require corresponding arguments. Type Inference SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\" Named Arguments Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" ) Variable Arguments Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" )) Inserts INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Arguments"},{"location":"android_sqlite/query_arguments/#bind-args","text":".sq files use the exact same syntax as SQLite, including SQLite Bind Args . If a statement contains bind args, the associated method will require corresponding arguments.","title":"Bind Args"},{"location":"android_sqlite/query_arguments/#type-inference","text":"SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\"","title":"Type Inference"},{"location":"android_sqlite/query_arguments/#named-arguments","text":"Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" )","title":"Named Arguments"},{"location":"android_sqlite/query_arguments/#variable-arguments","text":"Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" ))","title":"Variable Arguments"},{"location":"android_sqlite/query_arguments/#inserts","text":"INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Inserts"},{"location":"android_sqlite/resources/","text":"Other Resources Guides SQLDelight 1.x Quickstart Guide for Android","title":"Resources"},{"location":"android_sqlite/resources/#other-resources","text":"","title":"Other Resources"},{"location":"android_sqlite/resources/#guides","text":"SQLDelight 1.x Quickstart Guide for Android","title":"Guides"},{"location":"android_sqlite/rxjava/","text":"RxJava To observe a query, depend on the RxJava extensions artifact and use the extension method it provides: dependencies { implementation \"com.squareup.sqldelight:rxjava3-extensions:1.4.0\" } val players : Observable < List < HockeyPlayer >> = playerQueries . selectAll () . asObservable () . mapToList () Note: For RxJava 2, use rxjava2-extensions as the artifact name.","title":"RxJava"},{"location":"android_sqlite/rxjava/#rxjava","text":"To observe a query, depend on the RxJava extensions artifact and use the extension method it provides: dependencies { implementation \"com.squareup.sqldelight:rxjava3-extensions:1.4.0\" } val players : Observable < List < HockeyPlayer >> = playerQueries . selectAll () . asObservable () . mapToList () Note: For RxJava 2, use rxjava2-extensions as the artifact name.","title":"RxJava"},{"location":"android_sqlite/testing/","text":"In some tests (like verification of migrations) you might wish to swap out the Android driver with the JVM driver , enabling you to test code involving the database without needing an Android emulator or physical device. To do that use the jvm SQLite driver: dependencies { testImplementation 'com.squareup.sqldelight:sqlite-driver:1.2.2' } // When your test needs a driver @Before fun before () { driver = JdbcSqliteDriver ( JdbcSqliteDriver . IN_MEMORY ) Database . Schema . create ( driver ) } If you are using the SQLite that comes bundled with Android (rather than shipping your own ), you can override the version of sqlite-jdbc to one that matches your Android minSdkVersion , for example for API 23 use SQLite 3.8.10.2: dependencies { testImplementation ( 'org.xerial:sqlite-jdbc:3.8.10.2' ) { // Override the version of sqlite used by sqlite-driver to match Android API 23 force = true } }","title":"Testing"},{"location":"android_sqlite/transactions/","text":"API If you want to execute multiple statements under one transaction, use transaction function. val players = listOf < Player >() database . playerQueries . transaction { players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } To return a value from a transaction, use the transactionWithReturn function. val players = database . playerQueries . transactionWithReturn { database . playerQueries . selectAll (). executeAsList () } Rollback Transactions will roll back if an exception occurs anywhere in them. You can manually roll back a transaction anywhere inside of one, but if your transaction returns a value you will need to specify a value for the transaction to return. database . playerQueries . transaction { players . forEach { player -> if ( player . number == 0 ) rollback () database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } val numberInserted = database . playerQueries . transactionWithReturn { players . forEach { player -> if ( player . number == 0 ) rollback ( 0 ) database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } players . size } Callbacks You can register callbacks to occur after a transaction has completed or rolled back: database . playerQueries . transaction { afterRollback { log ( \"No players were inserted.\" ) } afterCommit { log ( \"${players.size} players were inserted.\" ) } players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } }","title":"Transactions"},{"location":"android_sqlite/transactions/#api","text":"If you want to execute multiple statements under one transaction, use transaction function. val players = listOf < Player >() database . playerQueries . transaction { players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } To return a value from a transaction, use the transactionWithReturn function. val players = database . playerQueries . transactionWithReturn { database . playerQueries . selectAll (). executeAsList () }","title":"API"},{"location":"android_sqlite/transactions/#rollback","text":"Transactions will roll back if an exception occurs anywhere in them. You can manually roll back a transaction anywhere inside of one, but if your transaction returns a value you will need to specify a value for the transaction to return. database . playerQueries . transaction { players . forEach { player -> if ( player . number == 0 ) rollback () database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } val numberInserted = database . playerQueries . transactionWithReturn { players . forEach { player -> if ( player . number == 0 ) rollback ( 0 ) database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } players . size }","title":"Rollback"},{"location":"android_sqlite/transactions/#callbacks","text":"You can register callbacks to occur after a transaction has completed or rolled back: database . playerQueries . transaction { afterRollback { log ( \"No players were inserted.\" ) } afterCommit { log ( \"${players.size} players were inserted.\" ) } players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } }","title":"Callbacks"},{"location":"android_sqlite/types/","text":"SQLite Types SQLDelight column definitions are identical to regular SQLite column definitions but support an extra column constraint which specifies the Kotlin type of the column in the generated interface. SQLDelight natively supports Long, Double, String, ByteArray, Int, Short, Float, and Booleans. CREATE TABLE some_types ( some_long INTEGER , -- Stored as INTEGER in db, retrieved as Long some_double REAL , -- Stored as REAL in db, retrieved as Double some_string TEXT , -- Stored as TEXT in db, retrieved as String some_blob BLOB , -- Stored as BLOB in db, retrieved as ByteArray some_int INTEGER AS Int , -- Stored as INTEGER in db, retrieved as Int some_short INTEGER AS Short , -- Stored as INTEGER in db, retrieved as Short some_float REAL AS Float -- Stored as REAL in db, retrieved as Float ); Boolean columns are stored in the db as INTEGER , and so they can be given INTEGER column constraints. Use DEFAULT 0 to default to false, for example. CREATE TABLE hockey_player ( injured INTEGER AS Boolean DEFAULT 0 ) Custom Column Types If you'd like to retrieve columns as custom types you can specify a Kotlin type: import kotlin . collections . List ; CREATE TABLE hockeyPlayer ( cup_wins TEXT AS List < String > NOT NULL ); However, creating the Database will require you to provide a ColumnAdapter which knows how to map between the database type and your custom type: val listOfStringsAdapter = object : ColumnAdapter < List < String >, String > { override fun decode ( databaseValue : String ) = databaseValue . split ( \",\" ) override fun encode ( value : List < String >) = value . joinToString ( separator = \",\" ) } val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = hockeyPlayer . Adapter ( cup_winsAdapter = listOfStringsAdapter ) ) Enums As a convenience the SQLDelight runtime includes a ColumnAdapter for storing an enum as String data. import com . example . hockey . HockeyPlayer ; CREATE TABLE hockeyPlayer ( position TEXT AS HockeyPlayer . Position ) val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = HockeyPlayer . Adapter ( positionAdapter = EnumColumnAdapter () ) )","title":"Types"},{"location":"android_sqlite/types/#sqlite-types","text":"SQLDelight column definitions are identical to regular SQLite column definitions but support an extra column constraint which specifies the Kotlin type of the column in the generated interface. SQLDelight natively supports Long, Double, String, ByteArray, Int, Short, Float, and Booleans. CREATE TABLE some_types ( some_long INTEGER , -- Stored as INTEGER in db, retrieved as Long some_double REAL , -- Stored as REAL in db, retrieved as Double some_string TEXT , -- Stored as TEXT in db, retrieved as String some_blob BLOB , -- Stored as BLOB in db, retrieved as ByteArray some_int INTEGER AS Int , -- Stored as INTEGER in db, retrieved as Int some_short INTEGER AS Short , -- Stored as INTEGER in db, retrieved as Short some_float REAL AS Float -- Stored as REAL in db, retrieved as Float ); Boolean columns are stored in the db as INTEGER , and so they can be given INTEGER column constraints. Use DEFAULT 0 to default to false, for example. CREATE TABLE hockey_player ( injured INTEGER AS Boolean DEFAULT 0 )","title":"SQLite Types"},{"location":"android_sqlite/types/#custom-column-types","text":"If you'd like to retrieve columns as custom types you can specify a Kotlin type: import kotlin . collections . List ; CREATE TABLE hockeyPlayer ( cup_wins TEXT AS List < String > NOT NULL ); However, creating the Database will require you to provide a ColumnAdapter which knows how to map between the database type and your custom type: val listOfStringsAdapter = object : ColumnAdapter < List < String >, String > { override fun decode ( databaseValue : String ) = databaseValue . split ( \",\" ) override fun encode ( value : List < String >) = value . joinToString ( separator = \",\" ) } val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = hockeyPlayer . Adapter ( cup_winsAdapter = listOfStringsAdapter ) )","title":"Custom Column Types"},{"location":"android_sqlite/types/#enums","text":"As a convenience the SQLDelight runtime includes a ColumnAdapter for storing an enum as String data. import com . example . hockey . HockeyPlayer ; CREATE TABLE hockeyPlayer ( position TEXT AS HockeyPlayer . Position ) val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = HockeyPlayer . Adapter ( positionAdapter = EnumColumnAdapter () ) )","title":"Enums"},{"location":"android_sqlite/upgrading/","text":"Upgrading from Versions before 1.0 If you're still on SQLDelight 0.6 doing the upgrade to 0.7 first so you stay on the SupportSQLite artifact will likely be easiest Upgrade the gradle plugin from 0.7 to 0.7.1. This will upgrade the arch.persistence.db dependency to 1.1.1, but should have no effect on your usage of sqldelight. Upgrade the gradle plugin from 0.7.1 to 0.7.2. This changes the runtime package from com.squareup.sqldelight to com.squareup.sqldelight.prerelease , so you will need to change references in your own code. Upgrade the gradle plugin from 0.7.2 to 0.9.0. This upgrades the transitive dependencies and generated code to instead use AndroidX, which is a requirement of SQLDelight. This should be done at the same time as you upgrading your own project to AndroidX, and cannot be done separately since SQLDelight generates code which references android support/AndroidX. ALTERNATIVELY Upgrade the gradle plugin from 0.7 to 0.8.0 before then upgrading to 0.9.0. This upgrades to AndroidX without changing the sqldelight package name to com.squareup.sqldelight.prerelease Suppose on SQLDelight 0.9 you have this User.sq file: CREATE TABLE user ( id INTEGER NOT NULL PRIMARY KEY , name TEXT NOT NULL ); insertDefaultData : INSERT INTO user VALUES ( 1 , 'Alec' ); users : SELECT * FROM user ; names : SELECT name FROM user ; insertUser : INSERT INTO user VALUES ( ? , ? ); This will generate the UserModel class with methods for your queries. Copy and paste all *Model.java files out of the build directory and into your src/main/java folder. Upgrade the gradle plugin from 0.9 to 1.0.0-rc4. Note your build will fail at this point because of the model code having undefined references to the old SQL Delight runtime (like SqlDelightStatement ). To add these back in add an implementation dependency on com.squareup.sqldelight:runtime:0.9.0 . At this point your build should still be working, but changes to .sq files will not be reflected in your *Model.java files. If things aren't working at this point, please file an issue! Begin by modifying your SupportSQLiteOpenHelper.Callback to call into the now generated Database which holds generated code for SQL Delight 1.0: //Before @Override void onCreate ( SupportSQLiteDatabase db ) { db . execSql ( UserModel . CREATE_TABLE ); db . execSql ( UserModel . INSERTDEFAULTDATA ); // Other create table/initialization } In SQL Delight 1.0 all unlabeled statements in .sq files (including CREATE statements) will be run during onCreate , so we can remove the insertDefaultData identifier from above: User.sq ... --insertDefaultData: INSERT INTO user VALUES ( 1 , 'Alec' ); ... and now your SupportSQLiteOpenHelper.Callback should call into the Database for create @Override void onCreate ( SupportSQLiteDatabase db ) { SqlDriver driver = AndroidSqliteDriver ( db ) Database . Schema . create ( driver ) } You can do the same for your migrations if you place them in .sqm files, but thats not necessary part of the upgrade. At this point things should still work normally. Next add in the code to create your Database as part of an object graph/singleton pattern/whevs: @Provides @Singleton static SupportSQLiteOpenHelper provideDatabaseHelper ( @App Context context ) { SupportSQLiteOpenHelper . Configuration config = SupportSQLiteOpenHelper . Configuration . builder ( context ) . name ( DATABASE_NAME ) . callback ( new MyDatabaseCallback ()) . build (); return new FrameworkSQLiteOpenHelperFactory (). create ( config ); } @Provides @Singleton static Database provideDatabase ( SupportSQLiteOpenHelper helper ) { return new Database ( new AndroidSqliteDriver ( helper )); } If you're also using SQL Brite make sure you create a BriteDatabase with the same SupportSQLiteOpenHelper that's being used to create the Database . Things should still be working. The following assume you're using SQL Brite to get reactive callbacks from the database, but upgrades using only SQL Delight will be similar. Mutating queries can be converted individually by using the Database : before: private val insertUser : UserModel . InsertUser by lazy { UserModel . InsertUser ( datbaseOpenHelper . writableDatabase ) } insertUser . bind ( 2 , \"Jake\" ) insertUser . executeInsert () after: database . userQueries . insertUser ( 2 , \"Jake\" ) You no longer need a \"Factory\" type to perform queries, the query wrapper is all that is needed. before: val query = User . FACTORY . users () val usersObservable = briteDatabase . createQuery ( query . tables , query . statement , query . args ) . mapToList ( User . FACTORY . usersMapper () :: map ) after: val usersObservable = database . userQueries . users () . asObservable ( Schedulers . io ()) // The scheduler to run the query on. . mapToList () If you still want to use a custom type, pass it as a parameter to the query. val myUsersObservable = database . userQueries . users ( :: MyUser ) . asObservable ( Schedulers . io ()) . mapToList () Once you no longer have references to UserModel.java , delete the whole class. Repeat for each of your *Model.java files until upgrading is complete!","title":"Upgrading Pre-1.0"},{"location":"android_sqlite/upgrading/#upgrading-from-versions-before-10","text":"If you're still on SQLDelight 0.6 doing the upgrade to 0.7 first so you stay on the SupportSQLite artifact will likely be easiest Upgrade the gradle plugin from 0.7 to 0.7.1. This will upgrade the arch.persistence.db dependency to 1.1.1, but should have no effect on your usage of sqldelight. Upgrade the gradle plugin from 0.7.1 to 0.7.2. This changes the runtime package from com.squareup.sqldelight to com.squareup.sqldelight.prerelease , so you will need to change references in your own code. Upgrade the gradle plugin from 0.7.2 to 0.9.0. This upgrades the transitive dependencies and generated code to instead use AndroidX, which is a requirement of SQLDelight. This should be done at the same time as you upgrading your own project to AndroidX, and cannot be done separately since SQLDelight generates code which references android support/AndroidX. ALTERNATIVELY Upgrade the gradle plugin from 0.7 to 0.8.0 before then upgrading to 0.9.0. This upgrades to AndroidX without changing the sqldelight package name to com.squareup.sqldelight.prerelease Suppose on SQLDelight 0.9 you have this User.sq file: CREATE TABLE user ( id INTEGER NOT NULL PRIMARY KEY , name TEXT NOT NULL ); insertDefaultData : INSERT INTO user VALUES ( 1 , 'Alec' ); users : SELECT * FROM user ; names : SELECT name FROM user ; insertUser : INSERT INTO user VALUES ( ? , ? ); This will generate the UserModel class with methods for your queries. Copy and paste all *Model.java files out of the build directory and into your src/main/java folder. Upgrade the gradle plugin from 0.9 to 1.0.0-rc4. Note your build will fail at this point because of the model code having undefined references to the old SQL Delight runtime (like SqlDelightStatement ). To add these back in add an implementation dependency on com.squareup.sqldelight:runtime:0.9.0 . At this point your build should still be working, but changes to .sq files will not be reflected in your *Model.java files. If things aren't working at this point, please file an issue! Begin by modifying your SupportSQLiteOpenHelper.Callback to call into the now generated Database which holds generated code for SQL Delight 1.0: //Before @Override void onCreate ( SupportSQLiteDatabase db ) { db . execSql ( UserModel . CREATE_TABLE ); db . execSql ( UserModel . INSERTDEFAULTDATA ); // Other create table/initialization } In SQL Delight 1.0 all unlabeled statements in .sq files (including CREATE statements) will be run during onCreate , so we can remove the insertDefaultData identifier from above: User.sq ... --insertDefaultData: INSERT INTO user VALUES ( 1 , 'Alec' ); ... and now your SupportSQLiteOpenHelper.Callback should call into the Database for create @Override void onCreate ( SupportSQLiteDatabase db ) { SqlDriver driver = AndroidSqliteDriver ( db ) Database . Schema . create ( driver ) } You can do the same for your migrations if you place them in .sqm files, but thats not necessary part of the upgrade. At this point things should still work normally. Next add in the code to create your Database as part of an object graph/singleton pattern/whevs: @Provides @Singleton static SupportSQLiteOpenHelper provideDatabaseHelper ( @App Context context ) { SupportSQLiteOpenHelper . Configuration config = SupportSQLiteOpenHelper . Configuration . builder ( context ) . name ( DATABASE_NAME ) . callback ( new MyDatabaseCallback ()) . build (); return new FrameworkSQLiteOpenHelperFactory (). create ( config ); } @Provides @Singleton static Database provideDatabase ( SupportSQLiteOpenHelper helper ) { return new Database ( new AndroidSqliteDriver ( helper )); } If you're also using SQL Brite make sure you create a BriteDatabase with the same SupportSQLiteOpenHelper that's being used to create the Database . Things should still be working. The following assume you're using SQL Brite to get reactive callbacks from the database, but upgrades using only SQL Delight will be similar. Mutating queries can be converted individually by using the Database : before: private val insertUser : UserModel . InsertUser by lazy { UserModel . InsertUser ( datbaseOpenHelper . writableDatabase ) } insertUser . bind ( 2 , \"Jake\" ) insertUser . executeInsert () after: database . userQueries . insertUser ( 2 , \"Jake\" ) You no longer need a \"Factory\" type to perform queries, the query wrapper is all that is needed. before: val query = User . FACTORY . users () val usersObservable = briteDatabase . createQuery ( query . tables , query . statement , query . args ) . mapToList ( User . FACTORY . usersMapper () :: map ) after: val usersObservable = database . userQueries . users () . asObservable ( Schedulers . io ()) // The scheduler to run the query on. . mapToList () If you still want to use a custom type, pass it as a parameter to the query. val myUsersObservable = database . userQueries . users ( :: MyUser ) . asObservable ( Schedulers . io ()) . mapToList () Once you no longer have references to UserModel.java , delete the whole class. Repeat for each of your *Model.java files until upgrading is complete!","title":"Upgrading from Versions before 1.0"},{"location":"common/coroutines-multiplatform/","text":"Flow To consume a query as a Flow, depend on the Coroutines extensions artifact and use the extension method it provides: kotlin { sourceSets . commonMain . dependencies { implementation \"com.squareup.sqldelight:coroutines-extensions:1.4.0\" } } val players : Flow < List < HockeyPlayer >> = playerQueries . selectAll () . asFlow () . mapToList () This flow emits the query result, and emits a new result every time the database changes for that query.","title":"Coroutines multiplatform"},{"location":"common/coroutines-multiplatform/#flow","text":"To consume a query as a Flow, depend on the Coroutines extensions artifact and use the extension method it provides: kotlin { sourceSets . commonMain . dependencies { implementation \"com.squareup.sqldelight:coroutines-extensions:1.4.0\" } } val players : Flow < List < HockeyPlayer >> = playerQueries . selectAll () . asFlow () . mapToList () This flow emits the query result, and emits a new result every time the database changes for that query.","title":"Flow"},{"location":"common/coroutines-usage/","text":"val players : Flow < List < HockeyPlayer >> = playerQueries . selectAll () . asFlow () . mapToList () This flow emits the query result, and emits a new result every time the database changes for that query.","title":"Coroutines usage"},{"location":"common/coroutines/","text":"Flow To consume a query as a Flow, depend on the Coroutines extensions artifact and use the extension method it provides: dependencies { implementation \"com.squareup.sqldelight:coroutines-extensions-jvm:1.4.0\" } val players : Flow < List < HockeyPlayer >> = playerQueries . selectAll () . asFlow () . mapToList () This flow emits the query result, and emits a new result every time the database changes for that query.","title":"Coroutines"},{"location":"common/coroutines/#flow","text":"To consume a query as a Flow, depend on the Coroutines extensions artifact and use the extension method it provides: dependencies { implementation \"com.squareup.sqldelight:coroutines-extensions-jvm:1.4.0\" } val players : Flow < List < HockeyPlayer >> = playerQueries . selectAll () . asFlow () . mapToList () This flow emits the query result, and emits a new result every time the database changes for that query.","title":"Flow"},{"location":"common/custom_column_types/","text":"Custom Column Types If you'd like to retrieve columns as custom types you can specify a Kotlin type: import kotlin . collections . List ; CREATE TABLE hockeyPlayer ( cup_wins TEXT AS List < String > NOT NULL ); However, creating the Database will require you to provide a ColumnAdapter which knows how to map between the database type and your custom type: val listOfStringsAdapter = object : ColumnAdapter < List < String >, String > { override fun decode ( databaseValue : String ) = databaseValue . split ( \",\" ) override fun encode ( value : List < String >) = value . joinToString ( separator = \",\" ) } val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = hockeyPlayer . Adapter ( cup_winsAdapter = listOfStringsAdapter ) ) Enums As a convenience the SQLDelight runtime includes a ColumnAdapter for storing an enum as String data. import com . example . hockey . HockeyPlayer ; CREATE TABLE hockeyPlayer ( position TEXT AS HockeyPlayer . Position ) val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = HockeyPlayer . Adapter ( positionAdapter = EnumColumnAdapter () ) )","title":"Custom column types"},{"location":"common/custom_column_types/#custom-column-types","text":"If you'd like to retrieve columns as custom types you can specify a Kotlin type: import kotlin . collections . List ; CREATE TABLE hockeyPlayer ( cup_wins TEXT AS List < String > NOT NULL ); However, creating the Database will require you to provide a ColumnAdapter which knows how to map between the database type and your custom type: val listOfStringsAdapter = object : ColumnAdapter < List < String >, String > { override fun decode ( databaseValue : String ) = databaseValue . split ( \",\" ) override fun encode ( value : List < String >) = value . joinToString ( separator = \",\" ) } val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = hockeyPlayer . Adapter ( cup_winsAdapter = listOfStringsAdapter ) )","title":"Custom Column Types"},{"location":"common/custom_column_types/#enums","text":"As a convenience the SQLDelight runtime includes a ColumnAdapter for storing an enum as String data. import com . example . hockey . HockeyPlayer ; CREATE TABLE hockeyPlayer ( position TEXT AS HockeyPlayer . Position ) val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = HockeyPlayer . Adapter ( positionAdapter = EnumColumnAdapter () ) )","title":"Enums"},{"location":"common/custom_projections/","text":"Projections By default queries will return a data class with your projection, but you can override the behavior with a typesafe mapper. val selectAllNames = playerQueries . selectAll ( mapper = { player_number , full_name -> full_name . toUppercase () } ) println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"] In general you should be leveraging SQL to do custom projections whenever possible. selectNames : SELECT upper ( full_name ) FROM hockeyPlayer ; val selectAllNames = playerQueries . selectNames () println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]","title":"Projections"},{"location":"common/custom_projections/#projections","text":"By default queries will return a data class with your projection, but you can override the behavior with a typesafe mapper. val selectAllNames = playerQueries . selectAll ( mapper = { player_number , full_name -> full_name . toUppercase () } ) println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"] In general you should be leveraging SQL to do custom projections whenever possible. selectNames : SELECT upper ( full_name ) FROM hockeyPlayer ; val selectAllNames = playerQueries . selectNames () println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]","title":"Projections"},{"location":"common/gradle-common-groovy-properties/","text":"// Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db'. // Defaults to [\"sqldelight\"] (src/main/sqldelight) sourceFolders = [\"db\"] // The directory where to store '.db' schema files relative to the root // of the project. These files are used to verify that migrations yield // a database with the latest schema. Defaults to null so the verification // tasks will not be created. schemaOutputDirectory = file(\"src/main/sqldelight/databases\") // Optionally specify schema dependencies on other gradle projects dependency project(':OtherProject') // The dialect version you would like to target // Defaults to \"sqlite:3.18\" dialect = \"sqlite:3.24\"","title":"Gradle common groovy properties"},{"location":"common/gradle-common-kotlin-properties/","text":"packageName = \"com.example.db\" sourceFolders = listOf(\"db\") schemaOutputDirectory = file(\"build/dbs\") dependency(project(\":OtherProject\")) dialect = \"sqlite:3.24\"","title":"Gradle common kotlin properties"},{"location":"common/gradle-dependencies/","text":"Dependencies You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Gradle dependencies"},{"location":"common/gradle-dependencies/#dependencies","text":"You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Dependencies"},{"location":"common/gradle-multiplatform/","text":"Gradle For greater customization, you can declare databases explicitly using the Gradle DSL. build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db'. // Defaults to [\"sqldelight\"] (src/main/sqldelight) sourceFolders = [ \"db\" ] // The directory where to store '.db' schema files relative to the root // of the project. These files are used to verify that migrations yield // a database with the latest schema. Defaults to null so the verification // tasks will not be created. schemaOutputDirectory = file ( \"src/main/sqldelight/databases\" ) // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // The dialect version you would like to target // Defaults to \"sqlite:3.18\" dialect = \"sqlite:3.24\" } // For native targets, whether sqlite should be automatically linked. // Defaults to true. linkSqlite = false } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = listOf ( \"db\" ) schemaOutputDirectory = file ( \"build/dbs\" ) dependency ( project ( \":OtherProject\" )) dialect = \"sqlite:3.24\" } linkSqlite = false } Dependencies You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Gradle"},{"location":"common/gradle-multiplatform/#gradle","text":"For greater customization, you can declare databases explicitly using the Gradle DSL. build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db'. // Defaults to [\"sqldelight\"] (src/main/sqldelight) sourceFolders = [ \"db\" ] // The directory where to store '.db' schema files relative to the root // of the project. These files are used to verify that migrations yield // a database with the latest schema. Defaults to null so the verification // tasks will not be created. schemaOutputDirectory = file ( \"src/main/sqldelight/databases\" ) // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // The dialect version you would like to target // Defaults to \"sqlite:3.18\" dialect = \"sqlite:3.24\" } // For native targets, whether sqlite should be automatically linked. // Defaults to true. linkSqlite = false } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = listOf ( \"db\" ) schemaOutputDirectory = file ( \"build/dbs\" ) dependency ( project ( \":OtherProject\" )) dialect = \"sqlite:3.24\" } linkSqlite = false }","title":"Gradle"},{"location":"common/gradle-multiplatform/#dependencies","text":"You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Dependencies"},{"location":"common/gradle/","text":"Gradle For greater customization, you can declare databases explicitly using the Gradle DSL. build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db'. // Defaults to [\"sqldelight\"] (src/main/sqldelight) sourceFolders = [ \"db\" ] // The directory where to store '.db' schema files relative to the root // of the project. These files are used to verify that migrations yield // a database with the latest schema. Defaults to null so the verification // tasks will not be created. schemaOutputDirectory = file ( \"src/main/sqldelight/databases\" ) // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // The dialect version you would like to target // Defaults to \"sqlite:3.18\" dialect = \"sqlite:3.24\" } } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = listOf ( \"db\" ) schemaOutputDirectory = file ( \"build/dbs\" ) dependency ( project ( \":OtherProject\" )) dialect = \"sqlite:3.24\" } } Dependencies You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Gradle"},{"location":"common/gradle/#gradle","text":"For greater customization, you can declare databases explicitly using the Gradle DSL. build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db'. // Defaults to [\"sqldelight\"] (src/main/sqldelight) sourceFolders = [ \"db\" ] // The directory where to store '.db' schema files relative to the root // of the project. These files are used to verify that migrations yield // a database with the latest schema. Defaults to null so the verification // tasks will not be created. schemaOutputDirectory = file ( \"src/main/sqldelight/databases\" ) // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // The dialect version you would like to target // Defaults to \"sqlite:3.18\" dialect = \"sqlite:3.24\" } } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = listOf ( \"db\" ) schemaOutputDirectory = file ( \"build/dbs\" ) dependency ( project ( \":OtherProject\" )) dialect = \"sqlite:3.24\" } }","title":"Gradle"},{"location":"common/gradle/#dependencies","text":"You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Dependencies"},{"location":"common/gradle_server/","text":"Gradle build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db'. // Defaults to [\"sqldelight\"] (src/main/sqldelight) sourceFolders = [ \"sqldelight\" , \"resources\" ] // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // Wether or not to use .sqm files as the source of truth for the schema. // Defaults to false deriveSchemaFromMigrations = true // If set, configures a task to output the .sqm migration files as valid SQL // Defaults to null migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) // The extension format to use for generated valid SQL migrations. // Defaults to \".sql\" migrationOutputFileFormat = \".sql\" } } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = [ \"sqldelight\" , \"resources\" ] dependency project ( ' : OtherProject ' ) deriveSchemaFromMigrations = true migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) migrationOutputFileFormat = \".sql\" } } Dependencies You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Gradle"},{"location":"common/gradle_server/#gradle","text":"build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db'. // Defaults to [\"sqldelight\"] (src/main/sqldelight) sourceFolders = [ \"sqldelight\" , \"resources\" ] // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // Wether or not to use .sqm files as the source of truth for the schema. // Defaults to false deriveSchemaFromMigrations = true // If set, configures a task to output the .sqm migration files as valid SQL // Defaults to null migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) // The extension format to use for generated valid SQL migrations. // Defaults to \".sql\" migrationOutputFileFormat = \".sql\" } } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = [ \"sqldelight\" , \"resources\" ] dependency project ( ' : OtherProject ' ) deriveSchemaFromMigrations = true migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) migrationOutputFileFormat = \".sql\" } }","title":"Gradle"},{"location":"common/gradle_server/#dependencies","text":"You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Dependencies"},{"location":"common/grouping_statements/","text":"You can group multiple SQL statements together to be executed at once: upsert { UPDATE myTable SET column1 = : column1 , column2 = : column2 WHERE id = : id ; INSERT OR IGNORE INTO myTable ( id , column1 , column2 ) VALUES (: column1 , : column2 , : column3 ); }","title":"Grouping statements"},{"location":"common/index_gradle_database/","text":"First apply the gradle plugin in your project. buildscript { repositories { google () mavenCentral () } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.4.0' } } apply plugin: 'com.squareup.sqldelight' sqldelight { Database { // This will be the name of the generated database class. packageName = \"com.example\" } }","title":"Index gradle database"},{"location":"common/index_gradle_database_post_dialect/","text":"} } ```","title":"Index gradle database post dialect"},{"location":"common/index_gradle_database_pre_dialect/","text":"First apply the gradle plugin in your project. ```groovy buildscript { repositories { google() mavenCentral() } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.4.0' } } apply plugin: 'com.squareup.sqldelight' sqldelight { Database { // This will be the name of the generated database class. packageName = \"com.example\"","title":"Index gradle database pre dialect"},{"location":"common/index_queries/","text":"SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality.","title":"Index queries"},{"location":"common/index_schema/","text":"Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); From this SQLDelight will generate a Database Kotlin class with an associated Schema object that can be used to create your database and run your statements on it. Doing this also requires a driver, which SQLDelight provides implementations of:","title":"Index schema"},{"location":"common/index_schema_sq/","text":"Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' );","title":"Index schema sq"},{"location":"common/index_server/","text":"SQLDelight needs to know the schema of your database. If you always create your schema fresh with create table statements, you'll want to put those statements in .sq files, as shown here . If you apply migration files to an already running database, you'll want to rename your migration files to .sqm files, as shown here Fresh Schema Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); In the same .sq files you can start placing your sql statements to be executed at runtime . Migration Schema First, configure gradle to use migrations to assemble the schema: sqldelight { Database { ... sourceFolders = [ \"sqldelight\" ] deriveSchemaFromMigrations = true } } Migration files have the extension .sqm , and must have a number in their file name indicating what order the migration file runs in. For example, given this hierarchy: src --main ----sqldelight ------v1__backend.sqm ------v2__backend.sqm SQLDelight will create the schema by applying v1__backend.sqm and then v2__backend.sqm . Place your normal SQL CREATE / ALTER statements in these files. If another service reads from your migrations files (like flyway), make sure to read the info on migrations and how to output valid SQL. Typesafe SQL Before you're able to execute SQL statements at runtime, you need to create a SqlDriver to connect to your database. The easiest way is off of a DataSource that you would get from hikari or other connection managers. dependencies { implementation \"com.squareup.sqldelight:jdbc-driver:\" } val driver : SqlDriver = dataSource . asJdbcDriver () Regardless of if you specify the schema as fresh create table statements or through migrations, runtime SQL goes in .sq files. SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality.","title":"Index server"},{"location":"common/index_server/#fresh-schema","text":"Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); In the same .sq files you can start placing your sql statements to be executed at runtime .","title":"Fresh Schema"},{"location":"common/index_server/#migration-schema","text":"First, configure gradle to use migrations to assemble the schema: sqldelight { Database { ... sourceFolders = [ \"sqldelight\" ] deriveSchemaFromMigrations = true } } Migration files have the extension .sqm , and must have a number in their file name indicating what order the migration file runs in. For example, given this hierarchy: src --main ----sqldelight ------v1__backend.sqm ------v2__backend.sqm SQLDelight will create the schema by applying v1__backend.sqm and then v2__backend.sqm . Place your normal SQL CREATE / ALTER statements in these files. If another service reads from your migrations files (like flyway), make sure to read the info on migrations and how to output valid SQL.","title":"Migration Schema"},{"location":"common/index_server/#typesafe-sql","text":"Before you're able to execute SQL statements at runtime, you need to create a SqlDriver to connect to your database. The easiest way is off of a DataSource that you would get from hikari or other connection managers. dependencies { implementation \"com.squareup.sqldelight:jdbc-driver:\" } val driver : SqlDriver = dataSource . asJdbcDriver () Regardless of if you specify the schema as fresh create table statements or through migrations, runtime SQL goes in .sq files. SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality.","title":"Typesafe SQL"},{"location":"common/intellij_plugin/","text":"IntelliJ Plugin The IntelliJ plugin provides language-level features for .sq files, including: Syntax highlighting Refactoring/Find usages Code autocompletion Generate Queries files after edits Right click to copy as valid SQLite Compiler errors in IDE click through to file It can be installed from your IDE by navigating Preferences -> Plugins -> Marketplace -> Search for SQLDelight","title":"IntelliJ Plugin"},{"location":"common/intellij_plugin/#intellij-plugin","text":"The IntelliJ plugin provides language-level features for .sq files, including: Syntax highlighting Refactoring/Find usages Code autocompletion Generate Queries files after edits Right click to copy as valid SQLite Compiler errors in IDE click through to file It can be installed from your IDE by navigating Preferences -> Plugins -> Marketplace -> Search for SQLDelight","title":"IntelliJ Plugin"},{"location":"common/migrations/","text":"Migrations The .sq file always describes how to create the latest schema in an empty database. If your database is currently on an earlier version, migration files bring those databases up-to-date. Versioning The first version of the schema is 1. Migration files are named <version to upgrade from>.sqm . To migrate to version 2, put migration statements in 1.sqm : ALTER TABLE hockeyPlayer ADD COLUMN draft_year INTEGER ; ALTER TABLE hockeyPlayer ADD COLUMN draft_order INTEGER ; These SQL statements are run by Database.Schema.migrate() . Migration files go in the same source set as your .sq files. Verifying Migrations You can also place a .db file in the src/main/sqldelight folder of the same <version number>.db format. If there is a .db file present, a new verifySqlDelightMigration task will be added to the gradle project, and it will run as part of the test task, meaning your migrations will be verified against that .db file. It confirms that the migrations yield a database with the latest schema. To generate a .db file from your latest schema, run the generateSqlDelightSchema task, which is available once you specify a schemaOutputDirectory , as described in the gradle.md . You should probably do this before you create your first migration.","title":"Migrations"},{"location":"common/migrations/#migrations","text":"The .sq file always describes how to create the latest schema in an empty database. If your database is currently on an earlier version, migration files bring those databases up-to-date.","title":"Migrations"},{"location":"common/migrations/#versioning","text":"The first version of the schema is 1. Migration files are named <version to upgrade from>.sqm . To migrate to version 2, put migration statements in 1.sqm : ALTER TABLE hockeyPlayer ADD COLUMN draft_year INTEGER ; ALTER TABLE hockeyPlayer ADD COLUMN draft_order INTEGER ; These SQL statements are run by Database.Schema.migrate() . Migration files go in the same source set as your .sq files.","title":"Versioning"},{"location":"common/migrations/#verifying-migrations","text":"You can also place a .db file in the src/main/sqldelight folder of the same <version number>.db format. If there is a .db file present, a new verifySqlDelightMigration task will be added to the gradle project, and it will run as part of the test task, meaning your migrations will be verified against that .db file. It confirms that the migrations yield a database with the latest schema. To generate a .db file from your latest schema, run the generateSqlDelightSchema task, which is available once you specify a schemaOutputDirectory , as described in the gradle.md . You should probably do this before you create your first migration.","title":"Verifying Migrations"},{"location":"common/migrations_server/","text":"Valid SQL migrations Using custom kotlin types in migration files means those files are no longer valid SQL. You can optionally configure a gradle task to output your migration files as valid SQL for other services to read from: sqldelight { Database { migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) migrationOutputFileFormat = \".sql\" // Defaults to .sql } } This creates a new task generateMainDatabaseMigrations which will output your .sqm files as valid SQL in the output directory, with the output format. Create a dependency from your compileKotlin task so that services such as flyway will have the files available on their classpath: compileKotlin . configure { dependsOn \"generateMainDatabaseMigrations\" }","title":"Migrations server"},{"location":"common/migrations_server/#valid-sql-migrations","text":"Using custom kotlin types in migration files means those files are no longer valid SQL. You can optionally configure a gradle task to output your migration files as valid SQL for other services to read from: sqldelight { Database { migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) migrationOutputFileFormat = \".sql\" // Defaults to .sql } } This creates a new task generateMainDatabaseMigrations which will output your .sqm files as valid SQL in the output directory, with the output format. Create a dependency from your compileKotlin task so that services such as flyway will have the files available on their classpath: compileKotlin . configure { dependsOn \"generateMainDatabaseMigrations\" }","title":"Valid SQL migrations"},{"location":"common/multiplatform/","text":"Multiplatform To use SQLDelight in Kotlin multiplatform configure the Gradle plugin with a package to generate code into. apply plugin: \"org.jetbrains.kotlin.multiplatform\" apply plugin: \"com.squareup.sqldelight\" sqldelight { MyDatabase { packageName = \"com.example.hockey\" } } Put .sq files in the src/commonMain/sqldelight directory, and then expect a SqlDriver to be provided by individual platforms when creating the Database . Migration files should also be in the same src/commonMain/sqldelight directory. Multiplatform requires the gradle metadata feature , which you need to enable via the settings.gradle file in the project root: enableFeaturePreview ( 'GRADLE_METADATA' )","title":"Multiplatform"},{"location":"common/multiplatform/#multiplatform","text":"To use SQLDelight in Kotlin multiplatform configure the Gradle plugin with a package to generate code into. apply plugin: \"org.jetbrains.kotlin.multiplatform\" apply plugin: \"com.squareup.sqldelight\" sqldelight { MyDatabase { packageName = \"com.example.hockey\" } } Put .sq files in the src/commonMain/sqldelight directory, and then expect a SqlDriver to be provided by individual platforms when creating the Database . Migration files should also be in the same src/commonMain/sqldelight directory. Multiplatform requires the gradle metadata feature , which you need to enable via the settings.gradle file in the project root: enableFeaturePreview ( 'GRADLE_METADATA' )","title":"Multiplatform"},{"location":"common/query_arguments/","text":"Type Inference SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\" Named Arguments Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" ) Variable Arguments Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" )) Inserts INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Query arguments"},{"location":"common/query_arguments/#type-inference","text":"SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\"","title":"Type Inference"},{"location":"common/query_arguments/#named-arguments","text":"Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" )","title":"Named Arguments"},{"location":"common/query_arguments/#variable-arguments","text":"Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" ))","title":"Variable Arguments"},{"location":"common/query_arguments/#inserts","text":"INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Inserts"},{"location":"common/query_arguments_sqlite/","text":"Bind Args .sq files use the exact same syntax as SQLite, including SQLite Bind Args . If a statement contains bind args, the associated method will require corresponding arguments. Type Inference SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\" Named Arguments Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" ) Variable Arguments Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" )) Inserts INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Query arguments sqlite"},{"location":"common/query_arguments_sqlite/#bind-args","text":".sq files use the exact same syntax as SQLite, including SQLite Bind Args . If a statement contains bind args, the associated method will require corresponding arguments.","title":"Bind Args"},{"location":"common/query_arguments_sqlite/#type-inference","text":"SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\"","title":"Type Inference"},{"location":"common/query_arguments_sqlite/#named-arguments","text":"Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" )","title":"Named Arguments"},{"location":"common/query_arguments_sqlite/#variable-arguments","text":"Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" ))","title":"Variable Arguments"},{"location":"common/query_arguments_sqlite/#inserts","text":"INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Inserts"},{"location":"common/rxjava/","text":"RxJava To observe a query, depend on the RxJava extensions artifact and use the extension method it provides: dependencies { implementation \"com.squareup.sqldelight:rxjava3-extensions:1.4.0\" } val players : Observable < List < HockeyPlayer >> = playerQueries . selectAll () . asObservable () . mapToList () Note: For RxJava 2, use rxjava2-extensions as the artifact name.","title":"RxJava"},{"location":"common/rxjava/#rxjava","text":"To observe a query, depend on the RxJava extensions artifact and use the extension method it provides: dependencies { implementation \"com.squareup.sqldelight:rxjava3-extensions:1.4.0\" } val players : Observable < List < HockeyPlayer >> = playerQueries . selectAll () . asObservable () . mapToList () Note: For RxJava 2, use rxjava2-extensions as the artifact name.","title":"RxJava"},{"location":"common/transactions/","text":"API If you want to execute multiple statements under one transaction, use transaction function. val players = listOf < Player >() database . playerQueries . transaction { players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } To return a value from a transaction, use the transactionWithReturn function. val players = database . playerQueries . transactionWithReturn { database . playerQueries . selectAll (). executeAsList () } Rollback Transactions will roll back if an exception occurs anywhere in them. You can manually roll back a transaction anywhere inside of one, but if your transaction returns a value you will need to specify a value for the transaction to return. database . playerQueries . transaction { players . forEach { player -> if ( player . number == 0 ) rollback () database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } val numberInserted = database . playerQueries . transactionWithReturn { players . forEach { player -> if ( player . number == 0 ) rollback ( 0 ) database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } players . size } Callbacks You can register callbacks to occur after a transaction has completed or rolled back: database . playerQueries . transaction { afterRollback { log ( \"No players were inserted.\" ) } afterCommit { log ( \"${players.size} players were inserted.\" ) } players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } }","title":"Transactions"},{"location":"common/transactions/#api","text":"If you want to execute multiple statements under one transaction, use transaction function. val players = listOf < Player >() database . playerQueries . transaction { players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } To return a value from a transaction, use the transactionWithReturn function. val players = database . playerQueries . transactionWithReturn { database . playerQueries . selectAll (). executeAsList () }","title":"API"},{"location":"common/transactions/#rollback","text":"Transactions will roll back if an exception occurs anywhere in them. You can manually roll back a transaction anywhere inside of one, but if your transaction returns a value you will need to specify a value for the transaction to return. database . playerQueries . transaction { players . forEach { player -> if ( player . number == 0 ) rollback () database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } val numberInserted = database . playerQueries . transactionWithReturn { players . forEach { player -> if ( player . number == 0 ) rollback ( 0 ) database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } players . size }","title":"Rollback"},{"location":"common/transactions/#callbacks","text":"You can register callbacks to occur after a transaction has completed or rolled back: database . playerQueries . transaction { afterRollback { log ( \"No players were inserted.\" ) } afterCommit { log ( \"${players.size} players were inserted.\" ) } players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } }","title":"Callbacks"},{"location":"common/types_server_migrations/","text":"Custom Types in Migrations If migrations are the schema's source of truth, you can also specify the exposed kotlin type when altering a table: import kotlin . collection . List ; ALTER TABLE my_table ADD COLUMN new_column VARCHAR ( 8 ) AS List < String > ;","title":"Types server migrations"},{"location":"common/types_server_migrations/#custom-types-in-migrations","text":"If migrations are the schema's source of truth, you can also specify the exposed kotlin type when altering a table: import kotlin . collection . List ; ALTER TABLE my_table ADD COLUMN new_column VARCHAR ( 8 ) AS List < String > ;","title":"Custom Types in Migrations"},{"location":"common/types_sqlite/","text":"SQLite Types SQLDelight column definitions are identical to regular SQLite column definitions but support an extra column constraint which specifies the Kotlin type of the column in the generated interface. SQLDelight natively supports Long, Double, String, ByteArray, Int, Short, Float, and Booleans. CREATE TABLE some_types ( some_long INTEGER , -- Stored as INTEGER in db, retrieved as Long some_double REAL , -- Stored as REAL in db, retrieved as Double some_string TEXT , -- Stored as TEXT in db, retrieved as String some_blob BLOB , -- Stored as BLOB in db, retrieved as ByteArray some_int INTEGER AS Int , -- Stored as INTEGER in db, retrieved as Int some_short INTEGER AS Short , -- Stored as INTEGER in db, retrieved as Short some_float REAL AS Float -- Stored as REAL in db, retrieved as Float ); Boolean columns are stored in the db as INTEGER , and so they can be given INTEGER column constraints. Use DEFAULT 0 to default to false, for example. CREATE TABLE hockey_player ( injured INTEGER AS Boolean DEFAULT 0 )","title":"Types sqlite"},{"location":"common/types_sqlite/#sqlite-types","text":"SQLDelight column definitions are identical to regular SQLite column definitions but support an extra column constraint which specifies the Kotlin type of the column in the generated interface. SQLDelight natively supports Long, Double, String, ByteArray, Int, Short, Float, and Booleans. CREATE TABLE some_types ( some_long INTEGER , -- Stored as INTEGER in db, retrieved as Long some_double REAL , -- Stored as REAL in db, retrieved as Double some_string TEXT , -- Stored as TEXT in db, retrieved as String some_blob BLOB , -- Stored as BLOB in db, retrieved as ByteArray some_int INTEGER AS Int , -- Stored as INTEGER in db, retrieved as Int some_short INTEGER AS Short , -- Stored as INTEGER in db, retrieved as Short some_float REAL AS Float -- Stored as REAL in db, retrieved as Float ); Boolean columns are stored in the db as INTEGER , and so they can be given INTEGER column constraints. Use DEFAULT 0 to default to false, for example. CREATE TABLE hockey_player ( injured INTEGER AS Boolean DEFAULT 0 )","title":"SQLite Types"},{"location":"jvm_h2/","text":"\ud83d\udc77\u200d\u2640\ufe0f IN DEVELOPMENT H2 is still incubating, and pieces of the dialect are missing. If you are using it and encounter parts of the dialect which are unsupported, please report at sql-psi Getting Started with H2 First apply the gradle plugin in your project. buildscript { repositories { google () mavenCentral () } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.4.0' } } apply plugin: 'com.squareup.sqldelight' sqldelight { Database { // This will be the name of the generated database class. packageName = \"com.example\" dialect = \"hsql\" } } SQLDelight needs to know the schema of your database. If you always create your schema fresh with create table statements, you'll want to put those statements in .sq files, as shown here . If you apply migration files to an already running database, you'll want to rename your migration files to .sqm files, as shown here Fresh Schema Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); In the same .sq files you can start placing your sql statements to be executed at runtime . Migration Schema First, configure gradle to use migrations to assemble the schema: sqldelight { Database { ... sourceFolders = [ \"sqldelight\" ] deriveSchemaFromMigrations = true } } Migration files have the extension .sqm , and must have a number in their file name indicating what order the migration file runs in. For example, given this hierarchy: src --main ----sqldelight ------v1__backend.sqm ------v2__backend.sqm SQLDelight will create the schema by applying v1__backend.sqm and then v2__backend.sqm . Place your normal SQL CREATE / ALTER statements in these files. If another service reads from your migrations files (like flyway), make sure to read the info on migrations and how to output valid SQL. Typesafe SQL Before you're able to execute SQL statements at runtime, you need to create a SqlDriver to connect to your database. The easiest way is off of a DataSource that you would get from hikari or other connection managers. dependencies { implementation \"com.squareup.sqldelight:jdbc-driver:\" } val driver : SqlDriver = dataSource . asJdbcDriver () Regardless of if you specify the schema as fresh create table statements or through migrations, runtime SQL goes in .sq files. SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality.","title":"Getting Started"},{"location":"jvm_h2/#in-development","text":"H2 is still incubating, and pieces of the dialect are missing. If you are using it and encounter parts of the dialect which are unsupported, please report at sql-psi","title":"\ud83d\udc77\u200d\u2640\ufe0f IN DEVELOPMENT"},{"location":"jvm_h2/#getting-started-with-h2","text":"First apply the gradle plugin in your project. buildscript { repositories { google () mavenCentral () } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.4.0' } } apply plugin: 'com.squareup.sqldelight' sqldelight { Database { // This will be the name of the generated database class. packageName = \"com.example\" dialect = \"hsql\" } } SQLDelight needs to know the schema of your database. If you always create your schema fresh with create table statements, you'll want to put those statements in .sq files, as shown here . If you apply migration files to an already running database, you'll want to rename your migration files to .sqm files, as shown here","title":"Getting Started with H2"},{"location":"jvm_h2/#fresh-schema","text":"Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); In the same .sq files you can start placing your sql statements to be executed at runtime .","title":"Fresh Schema"},{"location":"jvm_h2/#migration-schema","text":"First, configure gradle to use migrations to assemble the schema: sqldelight { Database { ... sourceFolders = [ \"sqldelight\" ] deriveSchemaFromMigrations = true } } Migration files have the extension .sqm , and must have a number in their file name indicating what order the migration file runs in. For example, given this hierarchy: src --main ----sqldelight ------v1__backend.sqm ------v2__backend.sqm SQLDelight will create the schema by applying v1__backend.sqm and then v2__backend.sqm . Place your normal SQL CREATE / ALTER statements in these files. If another service reads from your migrations files (like flyway), make sure to read the info on migrations and how to output valid SQL.","title":"Migration Schema"},{"location":"jvm_h2/#typesafe-sql","text":"Before you're able to execute SQL statements at runtime, you need to create a SqlDriver to connect to your database. The easiest way is off of a DataSource that you would get from hikari or other connection managers. dependencies { implementation \"com.squareup.sqldelight:jdbc-driver:\" } val driver : SqlDriver = dataSource . asJdbcDriver () Regardless of if you specify the schema as fresh create table statements or through migrations, runtime SQL goes in .sq files. SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality.","title":"Typesafe SQL"},{"location":"jvm_h2/custom_projections/","text":"Projections By default queries will return a data class with your projection, but you can override the behavior with a typesafe mapper. val selectAllNames = playerQueries . selectAll ( mapper = { player_number , full_name -> full_name . toUppercase () } ) println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"] In general you should be leveraging SQL to do custom projections whenever possible. selectNames : SELECT upper ( full_name ) FROM hockeyPlayer ; val selectAllNames = playerQueries . selectNames () println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]","title":"Projections"},{"location":"jvm_h2/custom_projections/#projections","text":"By default queries will return a data class with your projection, but you can override the behavior with a typesafe mapper. val selectAllNames = playerQueries . selectAll ( mapper = { player_number , full_name -> full_name . toUppercase () } ) println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"] In general you should be leveraging SQL to do custom projections whenever possible. selectNames : SELECT upper ( full_name ) FROM hockeyPlayer ; val selectAllNames = playerQueries . selectNames () println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]","title":"Projections"},{"location":"jvm_h2/gradle/","text":"Gradle build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db'. // Defaults to [\"sqldelight\"] (src/main/sqldelight) sourceFolders = [ \"sqldelight\" , \"resources\" ] // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // Wether or not to use .sqm files as the source of truth for the schema. // Defaults to false deriveSchemaFromMigrations = true // If set, configures a task to output the .sqm migration files as valid SQL // Defaults to null migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) // The extension format to use for generated valid SQL migrations. // Defaults to \".sql\" migrationOutputFileFormat = \".sql\" } } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = [ \"sqldelight\" , \"resources\" ] dependency project ( ' : OtherProject ' ) deriveSchemaFromMigrations = true migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) migrationOutputFileFormat = \".sql\" } } Dependencies You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Gradle"},{"location":"jvm_h2/gradle/#gradle","text":"build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db'. // Defaults to [\"sqldelight\"] (src/main/sqldelight) sourceFolders = [ \"sqldelight\" , \"resources\" ] // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // Wether or not to use .sqm files as the source of truth for the schema. // Defaults to false deriveSchemaFromMigrations = true // If set, configures a task to output the .sqm migration files as valid SQL // Defaults to null migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) // The extension format to use for generated valid SQL migrations. // Defaults to \".sql\" migrationOutputFileFormat = \".sql\" } } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = [ \"sqldelight\" , \"resources\" ] dependency project ( ' : OtherProject ' ) deriveSchemaFromMigrations = true migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) migrationOutputFileFormat = \".sql\" } }","title":"Gradle"},{"location":"jvm_h2/gradle/#dependencies","text":"You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Dependencies"},{"location":"jvm_h2/grouping_statements/","text":"You can group multiple SQL statements together to be executed at once: upsert { UPDATE myTable SET column1 = : column1 , column2 = : column2 WHERE id = : id ; INSERT OR IGNORE INTO myTable ( id , column1 , column2 ) VALUES (: column1 , : column2 , : column3 ); }","title":"Grouping Statements"},{"location":"jvm_h2/intellij_plugin/","text":"IntelliJ Plugin The IntelliJ plugin provides language-level features for .sq files, including: Syntax highlighting Refactoring/Find usages Code autocompletion Generate Queries files after edits Right click to copy as valid SQLite Compiler errors in IDE click through to file It can be installed from your IDE by navigating Preferences -> Plugins -> Marketplace -> Search for SQLDelight","title":"IntelliJ Plugin"},{"location":"jvm_h2/intellij_plugin/#intellij-plugin","text":"The IntelliJ plugin provides language-level features for .sq files, including: Syntax highlighting Refactoring/Find usages Code autocompletion Generate Queries files after edits Right click to copy as valid SQLite Compiler errors in IDE click through to file It can be installed from your IDE by navigating Preferences -> Plugins -> Marketplace -> Search for SQLDelight","title":"IntelliJ Plugin"},{"location":"jvm_h2/migrations/","text":"Valid SQL migrations Using custom kotlin types in migration files means those files are no longer valid SQL. You can optionally configure a gradle task to output your migration files as valid SQL for other services to read from: sqldelight { Database { migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) migrationOutputFileFormat = \".sql\" // Defaults to .sql } } This creates a new task generateMainDatabaseMigrations which will output your .sqm files as valid SQL in the output directory, with the output format. Create a dependency from your compileKotlin task so that services such as flyway will have the files available on their classpath: compileKotlin . configure { dependsOn \"generateMainDatabaseMigrations\" }","title":"Migrations"},{"location":"jvm_h2/migrations/#valid-sql-migrations","text":"Using custom kotlin types in migration files means those files are no longer valid SQL. You can optionally configure a gradle task to output your migration files as valid SQL for other services to read from: sqldelight { Database { migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) migrationOutputFileFormat = \".sql\" // Defaults to .sql } } This creates a new task generateMainDatabaseMigrations which will output your .sqm files as valid SQL in the output directory, with the output format. Create a dependency from your compileKotlin task so that services such as flyway will have the files available on their classpath: compileKotlin . configure { dependsOn \"generateMainDatabaseMigrations\" }","title":"Valid SQL migrations"},{"location":"jvm_h2/query_arguments/","text":"Bind Args .sq files use the exact same syntax as MySQL, including bound arguments. If a statement contains bind args, the associated method will require corresponding arguments. Type Inference SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\" Named Arguments Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" ) Variable Arguments Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" )) Inserts INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Arguments"},{"location":"jvm_h2/query_arguments/#bind-args","text":".sq files use the exact same syntax as MySQL, including bound arguments. If a statement contains bind args, the associated method will require corresponding arguments.","title":"Bind Args"},{"location":"jvm_h2/query_arguments/#type-inference","text":"SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\"","title":"Type Inference"},{"location":"jvm_h2/query_arguments/#named-arguments","text":"Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" )","title":"Named Arguments"},{"location":"jvm_h2/query_arguments/#variable-arguments","text":"Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" ))","title":"Variable Arguments"},{"location":"jvm_h2/query_arguments/#inserts","text":"INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Inserts"},{"location":"jvm_h2/transactions/","text":"API If you want to execute multiple statements under one transaction, use transaction function. val players = listOf < Player >() database . playerQueries . transaction { players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } To return a value from a transaction, use the transactionWithReturn function. val players = database . playerQueries . transactionWithReturn { database . playerQueries . selectAll (). executeAsList () } Rollback Transactions will roll back if an exception occurs anywhere in them. You can manually roll back a transaction anywhere inside of one, but if your transaction returns a value you will need to specify a value for the transaction to return. database . playerQueries . transaction { players . forEach { player -> if ( player . number == 0 ) rollback () database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } val numberInserted = database . playerQueries . transactionWithReturn { players . forEach { player -> if ( player . number == 0 ) rollback ( 0 ) database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } players . size } Callbacks You can register callbacks to occur after a transaction has completed or rolled back: database . playerQueries . transaction { afterRollback { log ( \"No players were inserted.\" ) } afterCommit { log ( \"${players.size} players were inserted.\" ) } players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } }","title":"Transactions"},{"location":"jvm_h2/transactions/#api","text":"If you want to execute multiple statements under one transaction, use transaction function. val players = listOf < Player >() database . playerQueries . transaction { players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } To return a value from a transaction, use the transactionWithReturn function. val players = database . playerQueries . transactionWithReturn { database . playerQueries . selectAll (). executeAsList () }","title":"API"},{"location":"jvm_h2/transactions/#rollback","text":"Transactions will roll back if an exception occurs anywhere in them. You can manually roll back a transaction anywhere inside of one, but if your transaction returns a value you will need to specify a value for the transaction to return. database . playerQueries . transaction { players . forEach { player -> if ( player . number == 0 ) rollback () database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } val numberInserted = database . playerQueries . transactionWithReturn { players . forEach { player -> if ( player . number == 0 ) rollback ( 0 ) database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } players . size }","title":"Rollback"},{"location":"jvm_h2/transactions/#callbacks","text":"You can register callbacks to occur after a transaction has completed or rolled back: database . playerQueries . transaction { afterRollback { log ( \"No players were inserted.\" ) } afterCommit { log ( \"${players.size} players were inserted.\" ) } players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } }","title":"Callbacks"},{"location":"jvm_h2/types/","text":"MySQL Types SQLDelight column definitions are identical to regular H2 column definitions but support an extra column constraint which specifies the Kotlin type of the column in the generated interface. CREATE TABLE some_types ( some_tiny_int TINYINT , -- Retrieved as Int some_small_int SMALLINT , -- Retrieved as Int some_integer INTEGER , -- Retrieved as Int some_int INT , -- Retrieved as Int some_big_int BIGINT , -- Retrieved as Long some_decimal DECIMAL ( 6 , 5 ), -- Retrieved as Int some_dec DEC ( 6 , 5 ), -- Retrieved as Int some_numeric NUMERIC ( 6 , 5 ), -- Retrieved as Int some_float FLOAT ( 6 ), -- Retrieved as Double some_real REAL , -- Retrieved as Double some_double DOUBLE , -- Retrieved as Double some_double_precision DOUBLE PRECISION , -- Retrieved as Double some_boolean BOOLEAN , -- Retrieved as Boolean some_date DATE , -- Retrieved as String some_time TIME , -- Retrieved as String some_timestamp2 TIMESTAMP ( 6 ), -- Retrieved as String some_char CHAR , -- Retrieved as String some_character CHARACTER ( 6 ), -- Retrieved as String some_char_varying CHAR VARYING ( 6 ), -- Retrieved as String some_longvarchar LONGVARCHAR , -- Retrieved as String some_character_varying CHARACTER VARYING ( 6 ), -- Retrieved as String some_varchar VARCHAR ( 16 ), -- Retrieved as String some_clo CHARACTER LARGE OBJECT ( 16 ), -- Retrieved as String some_clob clob ( 16 M CHARACTERS ), -- Retrieved as String some_binary BINARY , -- Retrieved as ByteArray some_binary2 BINARY ( 6 ), -- Retrieved as ByteArray some_longvarbinary LONGVARBINARY , -- Retrieved as ByteArray some_longvarbinary2 LONGVARBINARY ( 6 ), -- Retrieved as ByteArray some_binary_varying BINARY VARYING ( 6 ), -- Retrieved as ByteArray some_varbinary VARBINARY ( 8 ), -- Retrieved as ByteArray some_uuid UUID , -- Retrieved as ByteArray some_blob BLOB , -- Retrieved as ByteArray some_blo BINARY LARGE OBJECT ( 6 ), -- Retrieved as ByteArray some_bit BIT , -- Retrieved as ByteArray some_bit2 BIT ( 6 ), -- Retrieved as ByteArray some_bit_varying BIT VARYING ( 6 ), -- Retrieved as ByteArray some_interval INTERVAL YEAR TO MONTH , -- Retrieved as ByteArray some_interval2 INTERVAL YEAR ( 3 ), -- Retrieved as ByteArray some_interval3 INTERVAL DAY ( 4 ) TO HOUR , -- Retrieved as ByteArray some_interval4 INTERVAL MINUTE ( 4 ) TO SECOND ( 6 ), -- Retrieved as ByteArray some_interval5 INTERVAL SECOND ( 4 , 6 ) -- Retrieved as ByteArray ); Custom Column Types If you'd like to retrieve columns as custom types you can specify a Kotlin type: import kotlin . collections . List ; CREATE TABLE hockeyPlayer ( cup_wins TEXT AS List < String > NOT NULL ); However, creating the Database will require you to provide a ColumnAdapter which knows how to map between the database type and your custom type: val listOfStringsAdapter = object : ColumnAdapter < List < String >, String > { override fun decode ( databaseValue : String ) = databaseValue . split ( \",\" ) override fun encode ( value : List < String >) = value . joinToString ( separator = \",\" ) } val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = hockeyPlayer . Adapter ( cup_winsAdapter = listOfStringsAdapter ) ) Enums As a convenience the SQLDelight runtime includes a ColumnAdapter for storing an enum as String data. import com . example . hockey . HockeyPlayer ; CREATE TABLE hockeyPlayer ( position TEXT AS HockeyPlayer . Position ) val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = HockeyPlayer . Adapter ( positionAdapter = EnumColumnAdapter () ) ) Custom Types in Migrations If migrations are the schema's source of truth, you can also specify the exposed kotlin type when altering a table: import kotlin . collection . List ; ALTER TABLE my_table ADD COLUMN new_column VARCHAR ( 8 ) AS List < String > ;","title":"Types"},{"location":"jvm_h2/types/#mysql-types","text":"SQLDelight column definitions are identical to regular H2 column definitions but support an extra column constraint which specifies the Kotlin type of the column in the generated interface. CREATE TABLE some_types ( some_tiny_int TINYINT , -- Retrieved as Int some_small_int SMALLINT , -- Retrieved as Int some_integer INTEGER , -- Retrieved as Int some_int INT , -- Retrieved as Int some_big_int BIGINT , -- Retrieved as Long some_decimal DECIMAL ( 6 , 5 ), -- Retrieved as Int some_dec DEC ( 6 , 5 ), -- Retrieved as Int some_numeric NUMERIC ( 6 , 5 ), -- Retrieved as Int some_float FLOAT ( 6 ), -- Retrieved as Double some_real REAL , -- Retrieved as Double some_double DOUBLE , -- Retrieved as Double some_double_precision DOUBLE PRECISION , -- Retrieved as Double some_boolean BOOLEAN , -- Retrieved as Boolean some_date DATE , -- Retrieved as String some_time TIME , -- Retrieved as String some_timestamp2 TIMESTAMP ( 6 ), -- Retrieved as String some_char CHAR , -- Retrieved as String some_character CHARACTER ( 6 ), -- Retrieved as String some_char_varying CHAR VARYING ( 6 ), -- Retrieved as String some_longvarchar LONGVARCHAR , -- Retrieved as String some_character_varying CHARACTER VARYING ( 6 ), -- Retrieved as String some_varchar VARCHAR ( 16 ), -- Retrieved as String some_clo CHARACTER LARGE OBJECT ( 16 ), -- Retrieved as String some_clob clob ( 16 M CHARACTERS ), -- Retrieved as String some_binary BINARY , -- Retrieved as ByteArray some_binary2 BINARY ( 6 ), -- Retrieved as ByteArray some_longvarbinary LONGVARBINARY , -- Retrieved as ByteArray some_longvarbinary2 LONGVARBINARY ( 6 ), -- Retrieved as ByteArray some_binary_varying BINARY VARYING ( 6 ), -- Retrieved as ByteArray some_varbinary VARBINARY ( 8 ), -- Retrieved as ByteArray some_uuid UUID , -- Retrieved as ByteArray some_blob BLOB , -- Retrieved as ByteArray some_blo BINARY LARGE OBJECT ( 6 ), -- Retrieved as ByteArray some_bit BIT , -- Retrieved as ByteArray some_bit2 BIT ( 6 ), -- Retrieved as ByteArray some_bit_varying BIT VARYING ( 6 ), -- Retrieved as ByteArray some_interval INTERVAL YEAR TO MONTH , -- Retrieved as ByteArray some_interval2 INTERVAL YEAR ( 3 ), -- Retrieved as ByteArray some_interval3 INTERVAL DAY ( 4 ) TO HOUR , -- Retrieved as ByteArray some_interval4 INTERVAL MINUTE ( 4 ) TO SECOND ( 6 ), -- Retrieved as ByteArray some_interval5 INTERVAL SECOND ( 4 , 6 ) -- Retrieved as ByteArray );","title":"MySQL Types"},{"location":"jvm_h2/types/#custom-column-types","text":"If you'd like to retrieve columns as custom types you can specify a Kotlin type: import kotlin . collections . List ; CREATE TABLE hockeyPlayer ( cup_wins TEXT AS List < String > NOT NULL ); However, creating the Database will require you to provide a ColumnAdapter which knows how to map between the database type and your custom type: val listOfStringsAdapter = object : ColumnAdapter < List < String >, String > { override fun decode ( databaseValue : String ) = databaseValue . split ( \",\" ) override fun encode ( value : List < String >) = value . joinToString ( separator = \",\" ) } val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = hockeyPlayer . Adapter ( cup_winsAdapter = listOfStringsAdapter ) )","title":"Custom Column Types"},{"location":"jvm_h2/types/#enums","text":"As a convenience the SQLDelight runtime includes a ColumnAdapter for storing an enum as String data. import com . example . hockey . HockeyPlayer ; CREATE TABLE hockeyPlayer ( position TEXT AS HockeyPlayer . Position ) val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = HockeyPlayer . Adapter ( positionAdapter = EnumColumnAdapter () ) )","title":"Enums"},{"location":"jvm_h2/types/#custom-types-in-migrations","text":"If migrations are the schema's source of truth, you can also specify the exposed kotlin type when altering a table: import kotlin . collection . List ; ALTER TABLE my_table ADD COLUMN new_column VARCHAR ( 8 ) AS List < String > ;","title":"Custom Types in Migrations"},{"location":"jvm_mysql/","text":"Getting Started with MySQL First apply the gradle plugin in your project. buildscript { repositories { google () mavenCentral () } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.4.0' } } apply plugin: 'com.squareup.sqldelight' sqldelight { Database { // This will be the name of the generated database class. packageName = \"com.example\" dialect = \"mysql\" } } SQLDelight needs to know the schema of your database. If you always create your schema fresh with create table statements, you'll want to put those statements in .sq files, as shown here . If you apply migration files to an already running database, you'll want to rename your migration files to .sqm files, as shown here Fresh Schema Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); In the same .sq files you can start placing your sql statements to be executed at runtime . Migration Schema First, configure gradle to use migrations to assemble the schema: sqldelight { Database { ... sourceFolders = [ \"sqldelight\" ] deriveSchemaFromMigrations = true } } Migration files have the extension .sqm , and must have a number in their file name indicating what order the migration file runs in. For example, given this hierarchy: src --main ----sqldelight ------v1__backend.sqm ------v2__backend.sqm SQLDelight will create the schema by applying v1__backend.sqm and then v2__backend.sqm . Place your normal SQL CREATE / ALTER statements in these files. If another service reads from your migrations files (like flyway), make sure to read the info on migrations and how to output valid SQL. Typesafe SQL Before you're able to execute SQL statements at runtime, you need to create a SqlDriver to connect to your database. The easiest way is off of a DataSource that you would get from hikari or other connection managers. dependencies { implementation \"com.squareup.sqldelight:jdbc-driver:\" } val driver : SqlDriver = dataSource . asJdbcDriver () Regardless of if you specify the schema as fresh create table statements or through migrations, runtime SQL goes in .sq files. SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality.","title":"Getting Started"},{"location":"jvm_mysql/#getting-started-with-mysql","text":"First apply the gradle plugin in your project. buildscript { repositories { google () mavenCentral () } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.4.0' } } apply plugin: 'com.squareup.sqldelight' sqldelight { Database { // This will be the name of the generated database class. packageName = \"com.example\" dialect = \"mysql\" } } SQLDelight needs to know the schema of your database. If you always create your schema fresh with create table statements, you'll want to put those statements in .sq files, as shown here . If you apply migration files to an already running database, you'll want to rename your migration files to .sqm files, as shown here","title":"Getting Started with MySQL"},{"location":"jvm_mysql/#fresh-schema","text":"Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); In the same .sq files you can start placing your sql statements to be executed at runtime .","title":"Fresh Schema"},{"location":"jvm_mysql/#migration-schema","text":"First, configure gradle to use migrations to assemble the schema: sqldelight { Database { ... sourceFolders = [ \"sqldelight\" ] deriveSchemaFromMigrations = true } } Migration files have the extension .sqm , and must have a number in their file name indicating what order the migration file runs in. For example, given this hierarchy: src --main ----sqldelight ------v1__backend.sqm ------v2__backend.sqm SQLDelight will create the schema by applying v1__backend.sqm and then v2__backend.sqm . Place your normal SQL CREATE / ALTER statements in these files. If another service reads from your migrations files (like flyway), make sure to read the info on migrations and how to output valid SQL.","title":"Migration Schema"},{"location":"jvm_mysql/#typesafe-sql","text":"Before you're able to execute SQL statements at runtime, you need to create a SqlDriver to connect to your database. The easiest way is off of a DataSource that you would get from hikari or other connection managers. dependencies { implementation \"com.squareup.sqldelight:jdbc-driver:\" } val driver : SqlDriver = dataSource . asJdbcDriver () Regardless of if you specify the schema as fresh create table statements or through migrations, runtime SQL goes in .sq files. SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality.","title":"Typesafe SQL"},{"location":"jvm_mysql/custom_projections/","text":"Projections By default queries will return a data class with your projection, but you can override the behavior with a typesafe mapper. val selectAllNames = playerQueries . selectAll ( mapper = { player_number , full_name -> full_name . toUppercase () } ) println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"] In general you should be leveraging SQL to do custom projections whenever possible. selectNames : SELECT upper ( full_name ) FROM hockeyPlayer ; val selectAllNames = playerQueries . selectNames () println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]","title":"Projections"},{"location":"jvm_mysql/custom_projections/#projections","text":"By default queries will return a data class with your projection, but you can override the behavior with a typesafe mapper. val selectAllNames = playerQueries . selectAll ( mapper = { player_number , full_name -> full_name . toUppercase () } ) println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"] In general you should be leveraging SQL to do custom projections whenever possible. selectNames : SELECT upper ( full_name ) FROM hockeyPlayer ; val selectAllNames = playerQueries . selectNames () println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]","title":"Projections"},{"location":"jvm_mysql/gradle/","text":"Gradle build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db'. // Defaults to [\"sqldelight\"] (src/main/sqldelight) sourceFolders = [ \"sqldelight\" , \"resources\" ] // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // Wether or not to use .sqm files as the source of truth for the schema. // Defaults to false deriveSchemaFromMigrations = true // If set, configures a task to output the .sqm migration files as valid SQL // Defaults to null migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) // The extension format to use for generated valid SQL migrations. // Defaults to \".sql\" migrationOutputFileFormat = \".sql\" } } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = [ \"sqldelight\" , \"resources\" ] dependency project ( ' : OtherProject ' ) deriveSchemaFromMigrations = true migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) migrationOutputFileFormat = \".sql\" } } Dependencies You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Gradle"},{"location":"jvm_mysql/gradle/#gradle","text":"build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db'. // Defaults to [\"sqldelight\"] (src/main/sqldelight) sourceFolders = [ \"sqldelight\" , \"resources\" ] // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // Wether or not to use .sqm files as the source of truth for the schema. // Defaults to false deriveSchemaFromMigrations = true // If set, configures a task to output the .sqm migration files as valid SQL // Defaults to null migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) // The extension format to use for generated valid SQL migrations. // Defaults to \".sql\" migrationOutputFileFormat = \".sql\" } } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = [ \"sqldelight\" , \"resources\" ] dependency project ( ' : OtherProject ' ) deriveSchemaFromMigrations = true migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) migrationOutputFileFormat = \".sql\" } }","title":"Gradle"},{"location":"jvm_mysql/gradle/#dependencies","text":"You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Dependencies"},{"location":"jvm_mysql/grouping_statements/","text":"You can group multiple SQL statements together to be executed at once: upsert { UPDATE myTable SET column1 = : column1 , column2 = : column2 WHERE id = : id ; INSERT OR IGNORE INTO myTable ( id , column1 , column2 ) VALUES (: column1 , : column2 , : column3 ); }","title":"Grouping Statements"},{"location":"jvm_mysql/intellij_plugin/","text":"IntelliJ Plugin The IntelliJ plugin provides language-level features for .sq files, including: Syntax highlighting Refactoring/Find usages Code autocompletion Generate Queries files after edits Right click to copy as valid SQLite Compiler errors in IDE click through to file It can be installed from your IDE by navigating Preferences -> Plugins -> Marketplace -> Search for SQLDelight","title":"IntelliJ Plugin"},{"location":"jvm_mysql/intellij_plugin/#intellij-plugin","text":"The IntelliJ plugin provides language-level features for .sq files, including: Syntax highlighting Refactoring/Find usages Code autocompletion Generate Queries files after edits Right click to copy as valid SQLite Compiler errors in IDE click through to file It can be installed from your IDE by navigating Preferences -> Plugins -> Marketplace -> Search for SQLDelight","title":"IntelliJ Plugin"},{"location":"jvm_mysql/migrations/","text":"Valid SQL migrations Using custom kotlin types in migration files means those files are no longer valid SQL. You can optionally configure a gradle task to output your migration files as valid SQL for other services to read from: sqldelight { Database { migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) migrationOutputFileFormat = \".sql\" // Defaults to .sql } } This creates a new task generateMainDatabaseMigrations which will output your .sqm files as valid SQL in the output directory, with the output format. Create a dependency from your compileKotlin task so that services such as flyway will have the files available on their classpath: compileKotlin . configure { dependsOn \"generateMainDatabaseMigrations\" }","title":"Migrations"},{"location":"jvm_mysql/migrations/#valid-sql-migrations","text":"Using custom kotlin types in migration files means those files are no longer valid SQL. You can optionally configure a gradle task to output your migration files as valid SQL for other services to read from: sqldelight { Database { migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) migrationOutputFileFormat = \".sql\" // Defaults to .sql } } This creates a new task generateMainDatabaseMigrations which will output your .sqm files as valid SQL in the output directory, with the output format. Create a dependency from your compileKotlin task so that services such as flyway will have the files available on their classpath: compileKotlin . configure { dependsOn \"generateMainDatabaseMigrations\" }","title":"Valid SQL migrations"},{"location":"jvm_mysql/query_arguments/","text":"Bind Args .sq files use the exact same syntax as MySQL, including bound arguments. If a statement contains bind args, the associated method will require corresponding arguments. Type Inference SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\" Named Arguments Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" ) Variable Arguments Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" )) Inserts INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Arguments"},{"location":"jvm_mysql/query_arguments/#bind-args","text":".sq files use the exact same syntax as MySQL, including bound arguments. If a statement contains bind args, the associated method will require corresponding arguments.","title":"Bind Args"},{"location":"jvm_mysql/query_arguments/#type-inference","text":"SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\"","title":"Type Inference"},{"location":"jvm_mysql/query_arguments/#named-arguments","text":"Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" )","title":"Named Arguments"},{"location":"jvm_mysql/query_arguments/#variable-arguments","text":"Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" ))","title":"Variable Arguments"},{"location":"jvm_mysql/query_arguments/#inserts","text":"INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Inserts"},{"location":"jvm_mysql/transactions/","text":"API If you want to execute multiple statements under one transaction, use transaction function. val players = listOf < Player >() database . playerQueries . transaction { players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } To return a value from a transaction, use the transactionWithReturn function. val players = database . playerQueries . transactionWithReturn { database . playerQueries . selectAll (). executeAsList () } Rollback Transactions will roll back if an exception occurs anywhere in them. You can manually roll back a transaction anywhere inside of one, but if your transaction returns a value you will need to specify a value for the transaction to return. database . playerQueries . transaction { players . forEach { player -> if ( player . number == 0 ) rollback () database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } val numberInserted = database . playerQueries . transactionWithReturn { players . forEach { player -> if ( player . number == 0 ) rollback ( 0 ) database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } players . size } Callbacks You can register callbacks to occur after a transaction has completed or rolled back: database . playerQueries . transaction { afterRollback { log ( \"No players were inserted.\" ) } afterCommit { log ( \"${players.size} players were inserted.\" ) } players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } }","title":"Transactions"},{"location":"jvm_mysql/transactions/#api","text":"If you want to execute multiple statements under one transaction, use transaction function. val players = listOf < Player >() database . playerQueries . transaction { players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } To return a value from a transaction, use the transactionWithReturn function. val players = database . playerQueries . transactionWithReturn { database . playerQueries . selectAll (). executeAsList () }","title":"API"},{"location":"jvm_mysql/transactions/#rollback","text":"Transactions will roll back if an exception occurs anywhere in them. You can manually roll back a transaction anywhere inside of one, but if your transaction returns a value you will need to specify a value for the transaction to return. database . playerQueries . transaction { players . forEach { player -> if ( player . number == 0 ) rollback () database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } val numberInserted = database . playerQueries . transactionWithReturn { players . forEach { player -> if ( player . number == 0 ) rollback ( 0 ) database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } players . size }","title":"Rollback"},{"location":"jvm_mysql/transactions/#callbacks","text":"You can register callbacks to occur after a transaction has completed or rolled back: database . playerQueries . transaction { afterRollback { log ( \"No players were inserted.\" ) } afterCommit { log ( \"${players.size} players were inserted.\" ) } players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } }","title":"Callbacks"},{"location":"jvm_mysql/types/","text":"MySQL Types SQLDelight column definitions are identical to regular MySQL column definitions but support an extra column constraint which specifies the Kotlin type of the column in the generated interface. CREATE TABLE some_types ( some_tiny_int TINYINT , -- Retrieved as Int some_small_int SMALLINT , -- Retrieved as Int some_medium_int MEDIUMINT , -- Retrieved as Int some_integer INTEGER , -- Retrieved as Int some_int INT , -- Retrieved as Int some_big_int BIGINT , -- Retrieved as Long some_decimal DECIMAL , -- Retrieved as Double some_dec DEC , -- Retrieved as Double some_fixed FIXED , -- Retrieved as Double some_numeric NUMERIC , -- Retrieved as Double some_float FLOAT , -- Retrieved as Double some_real REAL , -- Retrieved as Double some_double_prec DOUBLE PRECISION , -- Retrieved as Double some_double DOUBLE , -- Retrieved as Double some_date DATE , -- Retrieved as String some_time TIME , -- Retrieved as String some_datetime DATETIME , -- Retrieved as String some_timestamp TIMESTAMP , -- Retrieved as String some_year YEAR , -- Retrieved as String some_char CHAR , -- Retrieved as String some_varchar VARCHAR ( 16 ), -- Retrieved as String some_tiny_text TINYTEXT , -- Retrieved as String some_text TEXT , -- Retrieved as String some_medium_text MEDIUMTEXT , -- Retrieved as String some_long_text LONGTEXT , -- Retrieved as String some_enum ENUM , -- Retrieved as String some_set SET , -- Retrieved as String some_varbinary VARBINARY ( 8 ), -- Retrieved as ByteArray some_blob BLOB ( 8 , 8 ), -- Retrieved as ByteArray some_binary BINARY , -- Retrieved as ByteArray some_json JSON , -- Retrieved as String some_boolean BOOLEAN , -- Retrieved as Boolean ); Custom Column Types If you'd like to retrieve columns as custom types you can specify a Kotlin type: import kotlin . collections . List ; CREATE TABLE hockeyPlayer ( cup_wins TEXT AS List < String > NOT NULL ); However, creating the Database will require you to provide a ColumnAdapter which knows how to map between the database type and your custom type: val listOfStringsAdapter = object : ColumnAdapter < List < String >, String > { override fun decode ( databaseValue : String ) = databaseValue . split ( \",\" ) override fun encode ( value : List < String >) = value . joinToString ( separator = \",\" ) } val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = hockeyPlayer . Adapter ( cup_winsAdapter = listOfStringsAdapter ) ) Enums As a convenience the SQLDelight runtime includes a ColumnAdapter for storing an enum as String data. import com . example . hockey . HockeyPlayer ; CREATE TABLE hockeyPlayer ( position TEXT AS HockeyPlayer . Position ) val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = HockeyPlayer . Adapter ( positionAdapter = EnumColumnAdapter () ) ) Custom Types in Migrations If migrations are the schema's source of truth, you can also specify the exposed kotlin type when altering a table: import kotlin . collection . List ; ALTER TABLE my_table ADD COLUMN new_column VARCHAR ( 8 ) AS List < String > ;","title":"Types"},{"location":"jvm_mysql/types/#mysql-types","text":"SQLDelight column definitions are identical to regular MySQL column definitions but support an extra column constraint which specifies the Kotlin type of the column in the generated interface. CREATE TABLE some_types ( some_tiny_int TINYINT , -- Retrieved as Int some_small_int SMALLINT , -- Retrieved as Int some_medium_int MEDIUMINT , -- Retrieved as Int some_integer INTEGER , -- Retrieved as Int some_int INT , -- Retrieved as Int some_big_int BIGINT , -- Retrieved as Long some_decimal DECIMAL , -- Retrieved as Double some_dec DEC , -- Retrieved as Double some_fixed FIXED , -- Retrieved as Double some_numeric NUMERIC , -- Retrieved as Double some_float FLOAT , -- Retrieved as Double some_real REAL , -- Retrieved as Double some_double_prec DOUBLE PRECISION , -- Retrieved as Double some_double DOUBLE , -- Retrieved as Double some_date DATE , -- Retrieved as String some_time TIME , -- Retrieved as String some_datetime DATETIME , -- Retrieved as String some_timestamp TIMESTAMP , -- Retrieved as String some_year YEAR , -- Retrieved as String some_char CHAR , -- Retrieved as String some_varchar VARCHAR ( 16 ), -- Retrieved as String some_tiny_text TINYTEXT , -- Retrieved as String some_text TEXT , -- Retrieved as String some_medium_text MEDIUMTEXT , -- Retrieved as String some_long_text LONGTEXT , -- Retrieved as String some_enum ENUM , -- Retrieved as String some_set SET , -- Retrieved as String some_varbinary VARBINARY ( 8 ), -- Retrieved as ByteArray some_blob BLOB ( 8 , 8 ), -- Retrieved as ByteArray some_binary BINARY , -- Retrieved as ByteArray some_json JSON , -- Retrieved as String some_boolean BOOLEAN , -- Retrieved as Boolean );","title":"MySQL Types"},{"location":"jvm_mysql/types/#custom-column-types","text":"If you'd like to retrieve columns as custom types you can specify a Kotlin type: import kotlin . collections . List ; CREATE TABLE hockeyPlayer ( cup_wins TEXT AS List < String > NOT NULL ); However, creating the Database will require you to provide a ColumnAdapter which knows how to map between the database type and your custom type: val listOfStringsAdapter = object : ColumnAdapter < List < String >, String > { override fun decode ( databaseValue : String ) = databaseValue . split ( \",\" ) override fun encode ( value : List < String >) = value . joinToString ( separator = \",\" ) } val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = hockeyPlayer . Adapter ( cup_winsAdapter = listOfStringsAdapter ) )","title":"Custom Column Types"},{"location":"jvm_mysql/types/#enums","text":"As a convenience the SQLDelight runtime includes a ColumnAdapter for storing an enum as String data. import com . example . hockey . HockeyPlayer ; CREATE TABLE hockeyPlayer ( position TEXT AS HockeyPlayer . Position ) val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = HockeyPlayer . Adapter ( positionAdapter = EnumColumnAdapter () ) )","title":"Enums"},{"location":"jvm_mysql/types/#custom-types-in-migrations","text":"If migrations are the schema's source of truth, you can also specify the exposed kotlin type when altering a table: import kotlin . collection . List ; ALTER TABLE my_table ADD COLUMN new_column VARCHAR ( 8 ) AS List < String > ;","title":"Custom Types in Migrations"},{"location":"jvm_postgresql/","text":"\ud83d\udc77\u200d\u2640\ufe0f IN DEVELOPMENT PostgreSQL is still incubating, and pieces of the dialect are missing. If you are using it and encounter parts of the dialect which are unsupported, please report at sql-psi Getting Started with PostgreSQL First apply the gradle plugin in your project. buildscript { repositories { google () mavenCentral () } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.4.0' } } apply plugin: 'com.squareup.sqldelight' sqldelight { Database { // This will be the name of the generated database class. packageName = \"com.example\" dialect = \"postgresql\" } } SQLDelight needs to know the schema of your database. If you always create your schema fresh with create table statements, you'll want to put those statements in .sq files, as shown here . If you apply migration files to an already running database, you'll want to rename your migration files to .sqm files, as shown here Fresh Schema Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); In the same .sq files you can start placing your sql statements to be executed at runtime . Migration Schema First, configure gradle to use migrations to assemble the schema: sqldelight { Database { ... sourceFolders = [ \"sqldelight\" ] deriveSchemaFromMigrations = true } } Migration files have the extension .sqm , and must have a number in their file name indicating what order the migration file runs in. For example, given this hierarchy: src --main ----sqldelight ------v1__backend.sqm ------v2__backend.sqm SQLDelight will create the schema by applying v1__backend.sqm and then v2__backend.sqm . Place your normal SQL CREATE / ALTER statements in these files. If another service reads from your migrations files (like flyway), make sure to read the info on migrations and how to output valid SQL. Typesafe SQL Before you're able to execute SQL statements at runtime, you need to create a SqlDriver to connect to your database. The easiest way is off of a DataSource that you would get from hikari or other connection managers. dependencies { implementation \"com.squareup.sqldelight:jdbc-driver:\" } val driver : SqlDriver = dataSource . asJdbcDriver () Regardless of if you specify the schema as fresh create table statements or through migrations, runtime SQL goes in .sq files. SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality.","title":"Getting Started"},{"location":"jvm_postgresql/#in-development","text":"PostgreSQL is still incubating, and pieces of the dialect are missing. If you are using it and encounter parts of the dialect which are unsupported, please report at sql-psi","title":"\ud83d\udc77\u200d\u2640\ufe0f IN DEVELOPMENT"},{"location":"jvm_postgresql/#getting-started-with-postgresql","text":"First apply the gradle plugin in your project. buildscript { repositories { google () mavenCentral () } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.4.0' } } apply plugin: 'com.squareup.sqldelight' sqldelight { Database { // This will be the name of the generated database class. packageName = \"com.example\" dialect = \"postgresql\" } } SQLDelight needs to know the schema of your database. If you always create your schema fresh with create table statements, you'll want to put those statements in .sq files, as shown here . If you apply migration files to an already running database, you'll want to rename your migration files to .sqm files, as shown here","title":"Getting Started with PostgreSQL"},{"location":"jvm_postgresql/#fresh-schema","text":"Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); In the same .sq files you can start placing your sql statements to be executed at runtime .","title":"Fresh Schema"},{"location":"jvm_postgresql/#migration-schema","text":"First, configure gradle to use migrations to assemble the schema: sqldelight { Database { ... sourceFolders = [ \"sqldelight\" ] deriveSchemaFromMigrations = true } } Migration files have the extension .sqm , and must have a number in their file name indicating what order the migration file runs in. For example, given this hierarchy: src --main ----sqldelight ------v1__backend.sqm ------v2__backend.sqm SQLDelight will create the schema by applying v1__backend.sqm and then v2__backend.sqm . Place your normal SQL CREATE / ALTER statements in these files. If another service reads from your migrations files (like flyway), make sure to read the info on migrations and how to output valid SQL.","title":"Migration Schema"},{"location":"jvm_postgresql/#typesafe-sql","text":"Before you're able to execute SQL statements at runtime, you need to create a SqlDriver to connect to your database. The easiest way is off of a DataSource that you would get from hikari or other connection managers. dependencies { implementation \"com.squareup.sqldelight:jdbc-driver:\" } val driver : SqlDriver = dataSource . asJdbcDriver () Regardless of if you specify the schema as fresh create table statements or through migrations, runtime SQL goes in .sq files. SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality.","title":"Typesafe SQL"},{"location":"jvm_postgresql/custom_projections/","text":"Projections By default queries will return a data class with your projection, but you can override the behavior with a typesafe mapper. val selectAllNames = playerQueries . selectAll ( mapper = { player_number , full_name -> full_name . toUppercase () } ) println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"] In general you should be leveraging SQL to do custom projections whenever possible. selectNames : SELECT upper ( full_name ) FROM hockeyPlayer ; val selectAllNames = playerQueries . selectNames () println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]","title":"Projections"},{"location":"jvm_postgresql/custom_projections/#projections","text":"By default queries will return a data class with your projection, but you can override the behavior with a typesafe mapper. val selectAllNames = playerQueries . selectAll ( mapper = { player_number , full_name -> full_name . toUppercase () } ) println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"] In general you should be leveraging SQL to do custom projections whenever possible. selectNames : SELECT upper ( full_name ) FROM hockeyPlayer ; val selectAllNames = playerQueries . selectNames () println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]","title":"Projections"},{"location":"jvm_postgresql/gradle/","text":"Gradle build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db'. // Defaults to [\"sqldelight\"] (src/main/sqldelight) sourceFolders = [ \"sqldelight\" , \"resources\" ] // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // Wether or not to use .sqm files as the source of truth for the schema. // Defaults to false deriveSchemaFromMigrations = true // If set, configures a task to output the .sqm migration files as valid SQL // Defaults to null migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) // The extension format to use for generated valid SQL migrations. // Defaults to \".sql\" migrationOutputFileFormat = \".sql\" } } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = [ \"sqldelight\" , \"resources\" ] dependency project ( ' : OtherProject ' ) deriveSchemaFromMigrations = true migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) migrationOutputFileFormat = \".sql\" } } Dependencies You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Gradle"},{"location":"jvm_postgresql/gradle/#gradle","text":"build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db'. // Defaults to [\"sqldelight\"] (src/main/sqldelight) sourceFolders = [ \"sqldelight\" , \"resources\" ] // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // Wether or not to use .sqm files as the source of truth for the schema. // Defaults to false deriveSchemaFromMigrations = true // If set, configures a task to output the .sqm migration files as valid SQL // Defaults to null migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) // The extension format to use for generated valid SQL migrations. // Defaults to \".sql\" migrationOutputFileFormat = \".sql\" } } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = [ \"sqldelight\" , \"resources\" ] dependency project ( ' : OtherProject ' ) deriveSchemaFromMigrations = true migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) migrationOutputFileFormat = \".sql\" } }","title":"Gradle"},{"location":"jvm_postgresql/gradle/#dependencies","text":"You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Dependencies"},{"location":"jvm_postgresql/grouping_statements/","text":"You can group multiple SQL statements together to be executed at once: upsert { UPDATE myTable SET column1 = : column1 , column2 = : column2 WHERE id = : id ; INSERT OR IGNORE INTO myTable ( id , column1 , column2 ) VALUES (: column1 , : column2 , : column3 ); }","title":"Grouping Statements"},{"location":"jvm_postgresql/intellij_plugin/","text":"IntelliJ Plugin The IntelliJ plugin provides language-level features for .sq files, including: Syntax highlighting Refactoring/Find usages Code autocompletion Generate Queries files after edits Right click to copy as valid SQLite Compiler errors in IDE click through to file It can be installed from your IDE by navigating Preferences -> Plugins -> Marketplace -> Search for SQLDelight","title":"IntelliJ Plugin"},{"location":"jvm_postgresql/intellij_plugin/#intellij-plugin","text":"The IntelliJ plugin provides language-level features for .sq files, including: Syntax highlighting Refactoring/Find usages Code autocompletion Generate Queries files after edits Right click to copy as valid SQLite Compiler errors in IDE click through to file It can be installed from your IDE by navigating Preferences -> Plugins -> Marketplace -> Search for SQLDelight","title":"IntelliJ Plugin"},{"location":"jvm_postgresql/migrations/","text":"Valid SQL migrations Using custom kotlin types in migration files means those files are no longer valid SQL. You can optionally configure a gradle task to output your migration files as valid SQL for other services to read from: sqldelight { Database { migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) migrationOutputFileFormat = \".sql\" // Defaults to .sql } } This creates a new task generateMainDatabaseMigrations which will output your .sqm files as valid SQL in the output directory, with the output format. Create a dependency from your compileKotlin task so that services such as flyway will have the files available on their classpath: compileKotlin . configure { dependsOn \"generateMainDatabaseMigrations\" }","title":"Migrations"},{"location":"jvm_postgresql/migrations/#valid-sql-migrations","text":"Using custom kotlin types in migration files means those files are no longer valid SQL. You can optionally configure a gradle task to output your migration files as valid SQL for other services to read from: sqldelight { Database { migrationOutputDirectory = file ( \"$buildDir/resources/main/migrations\" ) migrationOutputFileFormat = \".sql\" // Defaults to .sql } } This creates a new task generateMainDatabaseMigrations which will output your .sqm files as valid SQL in the output directory, with the output format. Create a dependency from your compileKotlin task so that services such as flyway will have the files available on their classpath: compileKotlin . configure { dependsOn \"generateMainDatabaseMigrations\" }","title":"Valid SQL migrations"},{"location":"jvm_postgresql/query_arguments/","text":"Bind Args .sq files use the exact same syntax as PostgreSQL, including bound arguments. If a statement contains bind args, the associated method will require corresponding arguments. Type Inference SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\" Named Arguments Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" ) Variable Arguments Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" )) Inserts INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Arguments"},{"location":"jvm_postgresql/query_arguments/#bind-args","text":".sq files use the exact same syntax as PostgreSQL, including bound arguments. If a statement contains bind args, the associated method will require corresponding arguments.","title":"Bind Args"},{"location":"jvm_postgresql/query_arguments/#type-inference","text":"SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\"","title":"Type Inference"},{"location":"jvm_postgresql/query_arguments/#named-arguments","text":"Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" )","title":"Named Arguments"},{"location":"jvm_postgresql/query_arguments/#variable-arguments","text":"Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" ))","title":"Variable Arguments"},{"location":"jvm_postgresql/query_arguments/#inserts","text":"INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Inserts"},{"location":"jvm_postgresql/transactions/","text":"API If you want to execute multiple statements under one transaction, use transaction function. val players = listOf < Player >() database . playerQueries . transaction { players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } To return a value from a transaction, use the transactionWithReturn function. val players = database . playerQueries . transactionWithReturn { database . playerQueries . selectAll (). executeAsList () } Rollback Transactions will roll back if an exception occurs anywhere in them. You can manually roll back a transaction anywhere inside of one, but if your transaction returns a value you will need to specify a value for the transaction to return. database . playerQueries . transaction { players . forEach { player -> if ( player . number == 0 ) rollback () database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } val numberInserted = database . playerQueries . transactionWithReturn { players . forEach { player -> if ( player . number == 0 ) rollback ( 0 ) database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } players . size } Callbacks You can register callbacks to occur after a transaction has completed or rolled back: database . playerQueries . transaction { afterRollback { log ( \"No players were inserted.\" ) } afterCommit { log ( \"${players.size} players were inserted.\" ) } players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } }","title":"Transactions"},{"location":"jvm_postgresql/transactions/#api","text":"If you want to execute multiple statements under one transaction, use transaction function. val players = listOf < Player >() database . playerQueries . transaction { players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } To return a value from a transaction, use the transactionWithReturn function. val players = database . playerQueries . transactionWithReturn { database . playerQueries . selectAll (). executeAsList () }","title":"API"},{"location":"jvm_postgresql/transactions/#rollback","text":"Transactions will roll back if an exception occurs anywhere in them. You can manually roll back a transaction anywhere inside of one, but if your transaction returns a value you will need to specify a value for the transaction to return. database . playerQueries . transaction { players . forEach { player -> if ( player . number == 0 ) rollback () database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } val numberInserted = database . playerQueries . transactionWithReturn { players . forEach { player -> if ( player . number == 0 ) rollback ( 0 ) database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } players . size }","title":"Rollback"},{"location":"jvm_postgresql/transactions/#callbacks","text":"You can register callbacks to occur after a transaction has completed or rolled back: database . playerQueries . transaction { afterRollback { log ( \"No players were inserted.\" ) } afterCommit { log ( \"${players.size} players were inserted.\" ) } players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } }","title":"Callbacks"},{"location":"jvm_postgresql/types/","text":"PostgreSQL Types SQLDelight column definitions are identical to regular PostgreSQL column definitions but support an extra column constraint which specifies the Kotlin type of the column in the generated interface. CREATE TABLE some_types ( some_smallint SMALLINT , -- Retrieved as Int some_int2 INT2 , -- Retrieved as Int some_integer INTEGER , -- Retrieved as Int some_int INT , -- Retrieved as Int some_int4 INT4 , -- Retrieved as Int some_bigint BIGINT , -- Retrieved as Long some_int8 INT8 , -- Retrieved as Long some_numeric NUMERIC , -- Retrieved as Int some_decimal DECIMAL , -- Retrieved as Int some_real REAL , -- Retrieved as Double some_float4 FLOAT4 , -- Retrieved as Double some_double_prec DOUBLE PRECISION , -- Retrieved as Double some_float8 FLOAT8 , -- Retrieved as Double some_character CHARACTER , -- Retrieved as String some_char CHAR , -- Retrieved as String some_char_var CHARACTER VARYING ( 16 ), -- Retrieved as String some_varchar VARCHAR ( 16 ), -- Retrieved as String some_text TEXT , -- Retrieved as String some_date DATE , -- Retrieved as String some_time TIME , -- Retrieved as String some_timestamp TIMESTAMP , -- Retrieved as String some_json JSON -- Retrieved as String ); Custom Column Types If you'd like to retrieve columns as custom types you can specify a Kotlin type: import kotlin . collections . List ; CREATE TABLE hockeyPlayer ( cup_wins TEXT AS List < String > NOT NULL ); However, creating the Database will require you to provide a ColumnAdapter which knows how to map between the database type and your custom type: val listOfStringsAdapter = object : ColumnAdapter < List < String >, String > { override fun decode ( databaseValue : String ) = databaseValue . split ( \",\" ) override fun encode ( value : List < String >) = value . joinToString ( separator = \",\" ) } val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = hockeyPlayer . Adapter ( cup_winsAdapter = listOfStringsAdapter ) ) Enums As a convenience the SQLDelight runtime includes a ColumnAdapter for storing an enum as String data. import com . example . hockey . HockeyPlayer ; CREATE TABLE hockeyPlayer ( position TEXT AS HockeyPlayer . Position ) val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = HockeyPlayer . Adapter ( positionAdapter = EnumColumnAdapter () ) ) Custom Types in Migrations If migrations are the schema's source of truth, you can also specify the exposed kotlin type when altering a table: import kotlin . collection . List ; ALTER TABLE my_table ADD COLUMN new_column VARCHAR ( 8 ) AS List < String > ;","title":"Types"},{"location":"jvm_postgresql/types/#postgresql-types","text":"SQLDelight column definitions are identical to regular PostgreSQL column definitions but support an extra column constraint which specifies the Kotlin type of the column in the generated interface. CREATE TABLE some_types ( some_smallint SMALLINT , -- Retrieved as Int some_int2 INT2 , -- Retrieved as Int some_integer INTEGER , -- Retrieved as Int some_int INT , -- Retrieved as Int some_int4 INT4 , -- Retrieved as Int some_bigint BIGINT , -- Retrieved as Long some_int8 INT8 , -- Retrieved as Long some_numeric NUMERIC , -- Retrieved as Int some_decimal DECIMAL , -- Retrieved as Int some_real REAL , -- Retrieved as Double some_float4 FLOAT4 , -- Retrieved as Double some_double_prec DOUBLE PRECISION , -- Retrieved as Double some_float8 FLOAT8 , -- Retrieved as Double some_character CHARACTER , -- Retrieved as String some_char CHAR , -- Retrieved as String some_char_var CHARACTER VARYING ( 16 ), -- Retrieved as String some_varchar VARCHAR ( 16 ), -- Retrieved as String some_text TEXT , -- Retrieved as String some_date DATE , -- Retrieved as String some_time TIME , -- Retrieved as String some_timestamp TIMESTAMP , -- Retrieved as String some_json JSON -- Retrieved as String );","title":"PostgreSQL Types"},{"location":"jvm_postgresql/types/#custom-column-types","text":"If you'd like to retrieve columns as custom types you can specify a Kotlin type: import kotlin . collections . List ; CREATE TABLE hockeyPlayer ( cup_wins TEXT AS List < String > NOT NULL ); However, creating the Database will require you to provide a ColumnAdapter which knows how to map between the database type and your custom type: val listOfStringsAdapter = object : ColumnAdapter < List < String >, String > { override fun decode ( databaseValue : String ) = databaseValue . split ( \",\" ) override fun encode ( value : List < String >) = value . joinToString ( separator = \",\" ) } val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = hockeyPlayer . Adapter ( cup_winsAdapter = listOfStringsAdapter ) )","title":"Custom Column Types"},{"location":"jvm_postgresql/types/#enums","text":"As a convenience the SQLDelight runtime includes a ColumnAdapter for storing an enum as String data. import com . example . hockey . HockeyPlayer ; CREATE TABLE hockeyPlayer ( position TEXT AS HockeyPlayer . Position ) val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = HockeyPlayer . Adapter ( positionAdapter = EnumColumnAdapter () ) )","title":"Enums"},{"location":"jvm_postgresql/types/#custom-types-in-migrations","text":"If migrations are the schema's source of truth, you can also specify the exposed kotlin type when altering a table: import kotlin . collection . List ; ALTER TABLE my_table ADD COLUMN new_column VARCHAR ( 8 ) AS List < String > ;","title":"Custom Types in Migrations"},{"location":"jvm_sqlite/","text":"Getting Started on JVM with SQLite First apply the gradle plugin in your project. buildscript { repositories { google () mavenCentral () } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.4.0' } } apply plugin: 'com.squareup.sqldelight' sqldelight { Database { // This will be the name of the generated database class. packageName = \"com.example\" } } Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); From this SQLDelight will generate a Database Kotlin class with an associated Schema object that can be used to create your database and run your statements on it. Doing this also requires a driver, which SQLDelight provides implementations of: dependencies { implementation \"com.squareup.sqldelight:sqlite-driver:1.4.0\" } val driver : SqlDriver = JdbcSqliteDriver ( JdbcSqliteDriver . IN_MEMORY ) Database . Schema . create ( driver ) SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality.","title":"Getting Started"},{"location":"jvm_sqlite/#getting-started-on-jvm-with-sqlite","text":"First apply the gradle plugin in your project. buildscript { repositories { google () mavenCentral () } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.4.0' } } apply plugin: 'com.squareup.sqldelight' sqldelight { Database { // This will be the name of the generated database class. packageName = \"com.example\" } } Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); From this SQLDelight will generate a Database Kotlin class with an associated Schema object that can be used to create your database and run your statements on it. Doing this also requires a driver, which SQLDelight provides implementations of: dependencies { implementation \"com.squareup.sqldelight:sqlite-driver:1.4.0\" } val driver : SqlDriver = JdbcSqliteDriver ( JdbcSqliteDriver . IN_MEMORY ) Database . Schema . create ( driver ) SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality.","title":"Getting Started on JVM with SQLite"},{"location":"jvm_sqlite/coroutines/","text":"Flow To consume a query as a Flow, depend on the Coroutines extensions artifact and use the extension method it provides: dependencies { implementation \"com.squareup.sqldelight:coroutines-extensions-jvm:1.4.0\" } val players : Flow < List < HockeyPlayer >> = playerQueries . selectAll () . asFlow () . mapToList () This flow emits the query result, and emits a new result every time the database changes for that query.","title":"Coroutines"},{"location":"jvm_sqlite/coroutines/#flow","text":"To consume a query as a Flow, depend on the Coroutines extensions artifact and use the extension method it provides: dependencies { implementation \"com.squareup.sqldelight:coroutines-extensions-jvm:1.4.0\" } val players : Flow < List < HockeyPlayer >> = playerQueries . selectAll () . asFlow () . mapToList () This flow emits the query result, and emits a new result every time the database changes for that query.","title":"Flow"},{"location":"jvm_sqlite/custom_projections/","text":"Projections By default queries will return a data class with your projection, but you can override the behavior with a typesafe mapper. val selectAllNames = playerQueries . selectAll ( mapper = { player_number , full_name -> full_name . toUppercase () } ) println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"] In general you should be leveraging SQL to do custom projections whenever possible. selectNames : SELECT upper ( full_name ) FROM hockeyPlayer ; val selectAllNames = playerQueries . selectNames () println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]","title":"Projections"},{"location":"jvm_sqlite/custom_projections/#projections","text":"By default queries will return a data class with your projection, but you can override the behavior with a typesafe mapper. val selectAllNames = playerQueries . selectAll ( mapper = { player_number , full_name -> full_name . toUppercase () } ) println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"] In general you should be leveraging SQL to do custom projections whenever possible. selectNames : SELECT upper ( full_name ) FROM hockeyPlayer ; val selectAllNames = playerQueries . selectNames () println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]","title":"Projections"},{"location":"jvm_sqlite/gradle/","text":"Gradle For greater customization, you can declare databases explicitly using the Gradle DSL. build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db'. // Defaults to [\"sqldelight\"] (src/main/sqldelight) sourceFolders = [ \"db\" ] // The directory where to store '.db' schema files relative to the root // of the project. These files are used to verify that migrations yield // a database with the latest schema. Defaults to null so the verification // tasks will not be created. schemaOutputDirectory = file ( \"src/main/sqldelight/databases\" ) // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // The dialect version you would like to target // Defaults to \"sqlite:3.18\" dialect = \"sqlite:3.24\" } } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = listOf ( \"db\" ) schemaOutputDirectory = file ( \"build/dbs\" ) dependency ( project ( \":OtherProject\" )) dialect = \"sqlite:3.24\" } } Dependencies You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Gradle"},{"location":"jvm_sqlite/gradle/#gradle","text":"For greater customization, you can declare databases explicitly using the Gradle DSL. build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db'. // Defaults to [\"sqldelight\"] (src/main/sqldelight) sourceFolders = [ \"db\" ] // The directory where to store '.db' schema files relative to the root // of the project. These files are used to verify that migrations yield // a database with the latest schema. Defaults to null so the verification // tasks will not be created. schemaOutputDirectory = file ( \"src/main/sqldelight/databases\" ) // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // The dialect version you would like to target // Defaults to \"sqlite:3.18\" dialect = \"sqlite:3.24\" } } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = listOf ( \"db\" ) schemaOutputDirectory = file ( \"build/dbs\" ) dependency ( project ( \":OtherProject\" )) dialect = \"sqlite:3.24\" } }","title":"Gradle"},{"location":"jvm_sqlite/gradle/#dependencies","text":"You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Dependencies"},{"location":"jvm_sqlite/grouping_statements/","text":"You can group multiple SQL statements together to be executed at once: upsert { UPDATE myTable SET column1 = : column1 , column2 = : column2 WHERE id = : id ; INSERT OR IGNORE INTO myTable ( id , column1 , column2 ) VALUES (: column1 , : column2 , : column3 ); }","title":"Grouping Statements"},{"location":"jvm_sqlite/intellij_plugin/","text":"IntelliJ Plugin The IntelliJ plugin provides language-level features for .sq files, including: Syntax highlighting Refactoring/Find usages Code autocompletion Generate Queries files after edits Right click to copy as valid SQLite Compiler errors in IDE click through to file It can be installed from your IDE by navigating Preferences -> Plugins -> Marketplace -> Search for SQLDelight","title":"IntelliJ Plugin"},{"location":"jvm_sqlite/intellij_plugin/#intellij-plugin","text":"The IntelliJ plugin provides language-level features for .sq files, including: Syntax highlighting Refactoring/Find usages Code autocompletion Generate Queries files after edits Right click to copy as valid SQLite Compiler errors in IDE click through to file It can be installed from your IDE by navigating Preferences -> Plugins -> Marketplace -> Search for SQLDelight","title":"IntelliJ Plugin"},{"location":"jvm_sqlite/migrations/","text":"Migrations The .sq file always describes how to create the latest schema in an empty database. If your database is currently on an earlier version, migration files bring those databases up-to-date. Versioning The first version of the schema is 1. Migration files are named <version to upgrade from>.sqm . To migrate to version 2, put migration statements in 1.sqm : ALTER TABLE hockeyPlayer ADD COLUMN draft_year INTEGER ; ALTER TABLE hockeyPlayer ADD COLUMN draft_order INTEGER ; These SQL statements are run by Database.Schema.migrate() . Migration files go in the same source set as your .sq files. Verifying Migrations You can also place a .db file in the src/main/sqldelight folder of the same <version number>.db format. If there is a .db file present, a new verifySqlDelightMigration task will be added to the gradle project, and it will run as part of the test task, meaning your migrations will be verified against that .db file. It confirms that the migrations yield a database with the latest schema. To generate a .db file from your latest schema, run the generateSqlDelightSchema task, which is available once you specify a schemaOutputDirectory , as described in the gradle.md . You should probably do this before you create your first migration.","title":"Migrations"},{"location":"jvm_sqlite/migrations/#migrations","text":"The .sq file always describes how to create the latest schema in an empty database. If your database is currently on an earlier version, migration files bring those databases up-to-date.","title":"Migrations"},{"location":"jvm_sqlite/migrations/#versioning","text":"The first version of the schema is 1. Migration files are named <version to upgrade from>.sqm . To migrate to version 2, put migration statements in 1.sqm : ALTER TABLE hockeyPlayer ADD COLUMN draft_year INTEGER ; ALTER TABLE hockeyPlayer ADD COLUMN draft_order INTEGER ; These SQL statements are run by Database.Schema.migrate() . Migration files go in the same source set as your .sq files.","title":"Versioning"},{"location":"jvm_sqlite/migrations/#verifying-migrations","text":"You can also place a .db file in the src/main/sqldelight folder of the same <version number>.db format. If there is a .db file present, a new verifySqlDelightMigration task will be added to the gradle project, and it will run as part of the test task, meaning your migrations will be verified against that .db file. It confirms that the migrations yield a database with the latest schema. To generate a .db file from your latest schema, run the generateSqlDelightSchema task, which is available once you specify a schemaOutputDirectory , as described in the gradle.md . You should probably do this before you create your first migration.","title":"Verifying Migrations"},{"location":"jvm_sqlite/query_arguments/","text":"Bind Args .sq files use the exact same syntax as SQLite, including SQLite Bind Args . If a statement contains bind args, the associated method will require corresponding arguments. Type Inference SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\" Named Arguments Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" ) Variable Arguments Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" )) Inserts INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Arguments"},{"location":"jvm_sqlite/query_arguments/#bind-args","text":".sq files use the exact same syntax as SQLite, including SQLite Bind Args . If a statement contains bind args, the associated method will require corresponding arguments.","title":"Bind Args"},{"location":"jvm_sqlite/query_arguments/#type-inference","text":"SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\"","title":"Type Inference"},{"location":"jvm_sqlite/query_arguments/#named-arguments","text":"Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" )","title":"Named Arguments"},{"location":"jvm_sqlite/query_arguments/#variable-arguments","text":"Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" ))","title":"Variable Arguments"},{"location":"jvm_sqlite/query_arguments/#inserts","text":"INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Inserts"},{"location":"jvm_sqlite/rxjava/","text":"RxJava To observe a query, depend on the RxJava extensions artifact and use the extension method it provides: dependencies { implementation \"com.squareup.sqldelight:rxjava3-extensions:1.4.0\" } val players : Observable < List < HockeyPlayer >> = playerQueries . selectAll () . asObservable () . mapToList () Note: For RxJava 2, use rxjava2-extensions as the artifact name.","title":"RxJava"},{"location":"jvm_sqlite/rxjava/#rxjava","text":"To observe a query, depend on the RxJava extensions artifact and use the extension method it provides: dependencies { implementation \"com.squareup.sqldelight:rxjava3-extensions:1.4.0\" } val players : Observable < List < HockeyPlayer >> = playerQueries . selectAll () . asObservable () . mapToList () Note: For RxJava 2, use rxjava2-extensions as the artifact name.","title":"RxJava"},{"location":"jvm_sqlite/transactions/","text":"API If you want to execute multiple statements under one transaction, use transaction function. val players = listOf < Player >() database . playerQueries . transaction { players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } To return a value from a transaction, use the transactionWithReturn function. val players = database . playerQueries . transactionWithReturn { database . playerQueries . selectAll (). executeAsList () } Rollback Transactions will roll back if an exception occurs anywhere in them. You can manually roll back a transaction anywhere inside of one, but if your transaction returns a value you will need to specify a value for the transaction to return. database . playerQueries . transaction { players . forEach { player -> if ( player . number == 0 ) rollback () database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } val numberInserted = database . playerQueries . transactionWithReturn { players . forEach { player -> if ( player . number == 0 ) rollback ( 0 ) database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } players . size } Callbacks You can register callbacks to occur after a transaction has completed or rolled back: database . playerQueries . transaction { afterRollback { log ( \"No players were inserted.\" ) } afterCommit { log ( \"${players.size} players were inserted.\" ) } players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } }","title":"Transactions"},{"location":"jvm_sqlite/transactions/#api","text":"If you want to execute multiple statements under one transaction, use transaction function. val players = listOf < Player >() database . playerQueries . transaction { players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } To return a value from a transaction, use the transactionWithReturn function. val players = database . playerQueries . transactionWithReturn { database . playerQueries . selectAll (). executeAsList () }","title":"API"},{"location":"jvm_sqlite/transactions/#rollback","text":"Transactions will roll back if an exception occurs anywhere in them. You can manually roll back a transaction anywhere inside of one, but if your transaction returns a value you will need to specify a value for the transaction to return. database . playerQueries . transaction { players . forEach { player -> if ( player . number == 0 ) rollback () database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } val numberInserted = database . playerQueries . transactionWithReturn { players . forEach { player -> if ( player . number == 0 ) rollback ( 0 ) database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } players . size }","title":"Rollback"},{"location":"jvm_sqlite/transactions/#callbacks","text":"You can register callbacks to occur after a transaction has completed or rolled back: database . playerQueries . transaction { afterRollback { log ( \"No players were inserted.\" ) } afterCommit { log ( \"${players.size} players were inserted.\" ) } players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } }","title":"Callbacks"},{"location":"jvm_sqlite/types/","text":"SQLite Types SQLDelight column definitions are identical to regular SQLite column definitions but support an extra column constraint which specifies the Kotlin type of the column in the generated interface. SQLDelight natively supports Long, Double, String, ByteArray, Int, Short, Float, and Booleans. CREATE TABLE some_types ( some_long INTEGER , -- Stored as INTEGER in db, retrieved as Long some_double REAL , -- Stored as REAL in db, retrieved as Double some_string TEXT , -- Stored as TEXT in db, retrieved as String some_blob BLOB , -- Stored as BLOB in db, retrieved as ByteArray some_int INTEGER AS Int , -- Stored as INTEGER in db, retrieved as Int some_short INTEGER AS Short , -- Stored as INTEGER in db, retrieved as Short some_float REAL AS Float -- Stored as REAL in db, retrieved as Float ); Boolean columns are stored in the db as INTEGER , and so they can be given INTEGER column constraints. Use DEFAULT 0 to default to false, for example. CREATE TABLE hockey_player ( injured INTEGER AS Boolean DEFAULT 0 ) Custom Column Types If you'd like to retrieve columns as custom types you can specify a Kotlin type: import kotlin . collections . List ; CREATE TABLE hockeyPlayer ( cup_wins TEXT AS List < String > NOT NULL ); However, creating the Database will require you to provide a ColumnAdapter which knows how to map between the database type and your custom type: val listOfStringsAdapter = object : ColumnAdapter < List < String >, String > { override fun decode ( databaseValue : String ) = databaseValue . split ( \",\" ) override fun encode ( value : List < String >) = value . joinToString ( separator = \",\" ) } val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = hockeyPlayer . Adapter ( cup_winsAdapter = listOfStringsAdapter ) ) Enums As a convenience the SQLDelight runtime includes a ColumnAdapter for storing an enum as String data. import com . example . hockey . HockeyPlayer ; CREATE TABLE hockeyPlayer ( position TEXT AS HockeyPlayer . Position ) val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = HockeyPlayer . Adapter ( positionAdapter = EnumColumnAdapter () ) )","title":"Types"},{"location":"jvm_sqlite/types/#sqlite-types","text":"SQLDelight column definitions are identical to regular SQLite column definitions but support an extra column constraint which specifies the Kotlin type of the column in the generated interface. SQLDelight natively supports Long, Double, String, ByteArray, Int, Short, Float, and Booleans. CREATE TABLE some_types ( some_long INTEGER , -- Stored as INTEGER in db, retrieved as Long some_double REAL , -- Stored as REAL in db, retrieved as Double some_string TEXT , -- Stored as TEXT in db, retrieved as String some_blob BLOB , -- Stored as BLOB in db, retrieved as ByteArray some_int INTEGER AS Int , -- Stored as INTEGER in db, retrieved as Int some_short INTEGER AS Short , -- Stored as INTEGER in db, retrieved as Short some_float REAL AS Float -- Stored as REAL in db, retrieved as Float ); Boolean columns are stored in the db as INTEGER , and so they can be given INTEGER column constraints. Use DEFAULT 0 to default to false, for example. CREATE TABLE hockey_player ( injured INTEGER AS Boolean DEFAULT 0 )","title":"SQLite Types"},{"location":"jvm_sqlite/types/#custom-column-types","text":"If you'd like to retrieve columns as custom types you can specify a Kotlin type: import kotlin . collections . List ; CREATE TABLE hockeyPlayer ( cup_wins TEXT AS List < String > NOT NULL ); However, creating the Database will require you to provide a ColumnAdapter which knows how to map between the database type and your custom type: val listOfStringsAdapter = object : ColumnAdapter < List < String >, String > { override fun decode ( databaseValue : String ) = databaseValue . split ( \",\" ) override fun encode ( value : List < String >) = value . joinToString ( separator = \",\" ) } val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = hockeyPlayer . Adapter ( cup_winsAdapter = listOfStringsAdapter ) )","title":"Custom Column Types"},{"location":"jvm_sqlite/types/#enums","text":"As a convenience the SQLDelight runtime includes a ColumnAdapter for storing an enum as String data. import com . example . hockey . HockeyPlayer ; CREATE TABLE hockeyPlayer ( position TEXT AS HockeyPlayer . Position ) val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = HockeyPlayer . Adapter ( positionAdapter = EnumColumnAdapter () ) )","title":"Enums"},{"location":"multiplatform_sqlite/","text":"Getting Started with Multiplatform First apply the gradle plugin in your project. buildscript { repositories { google () mavenCentral () } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.4.0' } } apply plugin: 'com.squareup.sqldelight' sqldelight { Database { // This will be the name of the generated database class. packageName = \"com.example\" } } Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); From this SQLDelight will generate a Database Kotlin class with an associated Schema object that can be used to create your database and run your statements on it. Doing this also requires a driver, which SQLDelight provides implementations of: kotlin { // The drivers needed will change depending on what platforms you target: sourceSets . androidMain . dependencies { implementation \"com.squareup.sqldelight:android-driver:1.4.0\" } // or sourceSets.iosMain, sourceSets.windowsMain, etc. sourceSets . nativeMain . dependencies { implementation \"com.squareup.sqldelight:native-driver:1.4.0\" } sourceSets . jvmMain . dependencies { implementation \"com.squareup.sqldelight:sqlite-driver:1.4.0\" } } // in src/commonMain/kotlin expect class DriverFactory { expect fun createDriver (): SqlDriver } fun createDatabase ( driverFactory ): Database { val driver = driverFactory . createDriver () val database = Database ( driver ) // Do more work with the database (see below). } // in src/androidMain/kotlin actual class DriverFactory ( private val context : Context ) { actual fun createDriver (): SqlDriver { return AndroidSqliteDriver ( Database . Schema , context , \"test.db\" ) } } // in src/nativeMain/kotlin actual class DriverFactory { actual fun createDriver (): SqlDriver { return NativeSqliteDriver ( Database . Schema , \"test.db\" ) } } // in src/jvmMain/kotlin actual class DriverFactory { actual fun createDriver (): SqlDriver { val driver : SqlDriver = JdbcSqliteDriver ( JdbcSqliteDriver . IN_MEMORY ) Database . Schema . create ( driver ) return driver } } SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality.","title":"Getting Started"},{"location":"multiplatform_sqlite/#getting-started-with-multiplatform","text":"First apply the gradle plugin in your project. buildscript { repositories { google () mavenCentral () } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.4.0' } } apply plugin: 'com.squareup.sqldelight' sqldelight { Database { // This will be the name of the generated database class. packageName = \"com.example\" } } Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); From this SQLDelight will generate a Database Kotlin class with an associated Schema object that can be used to create your database and run your statements on it. Doing this also requires a driver, which SQLDelight provides implementations of: kotlin { // The drivers needed will change depending on what platforms you target: sourceSets . androidMain . dependencies { implementation \"com.squareup.sqldelight:android-driver:1.4.0\" } // or sourceSets.iosMain, sourceSets.windowsMain, etc. sourceSets . nativeMain . dependencies { implementation \"com.squareup.sqldelight:native-driver:1.4.0\" } sourceSets . jvmMain . dependencies { implementation \"com.squareup.sqldelight:sqlite-driver:1.4.0\" } } // in src/commonMain/kotlin expect class DriverFactory { expect fun createDriver (): SqlDriver } fun createDatabase ( driverFactory ): Database { val driver = driverFactory . createDriver () val database = Database ( driver ) // Do more work with the database (see below). } // in src/androidMain/kotlin actual class DriverFactory ( private val context : Context ) { actual fun createDriver (): SqlDriver { return AndroidSqliteDriver ( Database . Schema , context , \"test.db\" ) } } // in src/nativeMain/kotlin actual class DriverFactory { actual fun createDriver (): SqlDriver { return NativeSqliteDriver ( Database . Schema , \"test.db\" ) } } // in src/jvmMain/kotlin actual class DriverFactory { actual fun createDriver (): SqlDriver { val driver : SqlDriver = JdbcSqliteDriver ( JdbcSqliteDriver . IN_MEMORY ) Database . Schema . create ( driver ) return driver } } SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality.","title":"Getting Started with Multiplatform"},{"location":"multiplatform_sqlite/coroutines/","text":"Flow To consume a query as a Flow, depend on the Coroutines extensions artifact and use the extension method it provides: kotlin { sourceSets . commonMain . dependencies { implementation \"com.squareup.sqldelight:coroutines-extensions:1.4.0\" } } val players : Flow < List < HockeyPlayer >> = playerQueries . selectAll () . asFlow () . mapToList () This flow emits the query result, and emits a new result every time the database changes for that query.","title":"Coroutines"},{"location":"multiplatform_sqlite/coroutines/#flow","text":"To consume a query as a Flow, depend on the Coroutines extensions artifact and use the extension method it provides: kotlin { sourceSets . commonMain . dependencies { implementation \"com.squareup.sqldelight:coroutines-extensions:1.4.0\" } } val players : Flow < List < HockeyPlayer >> = playerQueries . selectAll () . asFlow () . mapToList () This flow emits the query result, and emits a new result every time the database changes for that query.","title":"Flow"},{"location":"multiplatform_sqlite/custom_projections/","text":"Projections By default queries will return a data class with your projection, but you can override the behavior with a typesafe mapper. val selectAllNames = playerQueries . selectAll ( mapper = { player_number , full_name -> full_name . toUppercase () } ) println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"] In general you should be leveraging SQL to do custom projections whenever possible. selectNames : SELECT upper ( full_name ) FROM hockeyPlayer ; val selectAllNames = playerQueries . selectNames () println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]","title":"Projections"},{"location":"multiplatform_sqlite/custom_projections/#projections","text":"By default queries will return a data class with your projection, but you can override the behavior with a typesafe mapper. val selectAllNames = playerQueries . selectAll ( mapper = { player_number , full_name -> full_name . toUppercase () } ) println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"] In general you should be leveraging SQL to do custom projections whenever possible. selectNames : SELECT upper ( full_name ) FROM hockeyPlayer ; val selectAllNames = playerQueries . selectNames () println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]","title":"Projections"},{"location":"multiplatform_sqlite/gradle/","text":"Gradle For greater customization, you can declare databases explicitly using the Gradle DSL. build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db'. // Defaults to [\"sqldelight\"] (src/main/sqldelight) sourceFolders = [ \"db\" ] // The directory where to store '.db' schema files relative to the root // of the project. These files are used to verify that migrations yield // a database with the latest schema. Defaults to null so the verification // tasks will not be created. schemaOutputDirectory = file ( \"src/main/sqldelight/databases\" ) // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // The dialect version you would like to target // Defaults to \"sqlite:3.18\" dialect = \"sqlite:3.24\" } // For native targets, whether sqlite should be automatically linked. // Defaults to true. linkSqlite = false } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = listOf ( \"db\" ) schemaOutputDirectory = file ( \"build/dbs\" ) dependency ( project ( \":OtherProject\" )) dialect = \"sqlite:3.24\" } linkSqlite = false } Dependencies You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Gradle"},{"location":"multiplatform_sqlite/gradle/#gradle","text":"For greater customization, you can declare databases explicitly using the Gradle DSL. build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db'. // Defaults to [\"sqldelight\"] (src/main/sqldelight) sourceFolders = [ \"db\" ] // The directory where to store '.db' schema files relative to the root // of the project. These files are used to verify that migrations yield // a database with the latest schema. Defaults to null so the verification // tasks will not be created. schemaOutputDirectory = file ( \"src/main/sqldelight/databases\" ) // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // The dialect version you would like to target // Defaults to \"sqlite:3.18\" dialect = \"sqlite:3.24\" } // For native targets, whether sqlite should be automatically linked. // Defaults to true. linkSqlite = false } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = listOf ( \"db\" ) schemaOutputDirectory = file ( \"build/dbs\" ) dependency ( project ( \":OtherProject\" )) dialect = \"sqlite:3.24\" } linkSqlite = false }","title":"Gradle"},{"location":"multiplatform_sqlite/gradle/#dependencies","text":"You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Dependencies"},{"location":"multiplatform_sqlite/grouping_statements/","text":"You can group multiple SQL statements together to be executed at once: upsert { UPDATE myTable SET column1 = : column1 , column2 = : column2 WHERE id = : id ; INSERT OR IGNORE INTO myTable ( id , column1 , column2 ) VALUES (: column1 , : column2 , : column3 ); }","title":"Grouping Statements"},{"location":"multiplatform_sqlite/intellij_plugin/","text":"IntelliJ Plugin The IntelliJ plugin provides language-level features for .sq files, including: Syntax highlighting Refactoring/Find usages Code autocompletion Generate Queries files after edits Right click to copy as valid SQLite Compiler errors in IDE click through to file It can be installed from your IDE by navigating Preferences -> Plugins -> Marketplace -> Search for SQLDelight","title":"IntelliJ Plugin"},{"location":"multiplatform_sqlite/intellij_plugin/#intellij-plugin","text":"The IntelliJ plugin provides language-level features for .sq files, including: Syntax highlighting Refactoring/Find usages Code autocompletion Generate Queries files after edits Right click to copy as valid SQLite Compiler errors in IDE click through to file It can be installed from your IDE by navigating Preferences -> Plugins -> Marketplace -> Search for SQLDelight","title":"IntelliJ Plugin"},{"location":"multiplatform_sqlite/migrations/","text":"Migrations The .sq file always describes how to create the latest schema in an empty database. If your database is currently on an earlier version, migration files bring those databases up-to-date. Versioning The first version of the schema is 1. Migration files are named <version to upgrade from>.sqm . To migrate to version 2, put migration statements in 1.sqm : ALTER TABLE hockeyPlayer ADD COLUMN draft_year INTEGER ; ALTER TABLE hockeyPlayer ADD COLUMN draft_order INTEGER ; These SQL statements are run by Database.Schema.migrate() . Migration files go in the same source set as your .sq files. Verifying Migrations You can also place a .db file in the src/main/sqldelight folder of the same <version number>.db format. If there is a .db file present, a new verifySqlDelightMigration task will be added to the gradle project, and it will run as part of the test task, meaning your migrations will be verified against that .db file. It confirms that the migrations yield a database with the latest schema. To generate a .db file from your latest schema, run the generateSqlDelightSchema task, which is available once you specify a schemaOutputDirectory , as described in the gradle.md . You should probably do this before you create your first migration.","title":"Migrations"},{"location":"multiplatform_sqlite/migrations/#migrations","text":"The .sq file always describes how to create the latest schema in an empty database. If your database is currently on an earlier version, migration files bring those databases up-to-date.","title":"Migrations"},{"location":"multiplatform_sqlite/migrations/#versioning","text":"The first version of the schema is 1. Migration files are named <version to upgrade from>.sqm . To migrate to version 2, put migration statements in 1.sqm : ALTER TABLE hockeyPlayer ADD COLUMN draft_year INTEGER ; ALTER TABLE hockeyPlayer ADD COLUMN draft_order INTEGER ; These SQL statements are run by Database.Schema.migrate() . Migration files go in the same source set as your .sq files.","title":"Versioning"},{"location":"multiplatform_sqlite/migrations/#verifying-migrations","text":"You can also place a .db file in the src/main/sqldelight folder of the same <version number>.db format. If there is a .db file present, a new verifySqlDelightMigration task will be added to the gradle project, and it will run as part of the test task, meaning your migrations will be verified against that .db file. It confirms that the migrations yield a database with the latest schema. To generate a .db file from your latest schema, run the generateSqlDelightSchema task, which is available once you specify a schemaOutputDirectory , as described in the gradle.md . You should probably do this before you create your first migration.","title":"Verifying Migrations"},{"location":"multiplatform_sqlite/query_arguments/","text":"Bind Args .sq files use the exact same syntax as SQLite, including SQLite Bind Args . If a statement contains bind args, the associated method will require corresponding arguments. Type Inference SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\" Named Arguments Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" ) Variable Arguments Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" )) Inserts INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Arguments"},{"location":"multiplatform_sqlite/query_arguments/#bind-args","text":".sq files use the exact same syntax as SQLite, including SQLite Bind Args . If a statement contains bind args, the associated method will require corresponding arguments.","title":"Bind Args"},{"location":"multiplatform_sqlite/query_arguments/#type-inference","text":"SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\"","title":"Type Inference"},{"location":"multiplatform_sqlite/query_arguments/#named-arguments","text":"Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" )","title":"Named Arguments"},{"location":"multiplatform_sqlite/query_arguments/#variable-arguments","text":"Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" ))","title":"Variable Arguments"},{"location":"multiplatform_sqlite/query_arguments/#inserts","text":"INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Inserts"},{"location":"multiplatform_sqlite/resources/","text":"Other Resources Guides Introduction to Multiplatform Persistence with SQLDelight Samples https://github.com/joreilly/PeopleInSpace (Android/iOS/watchOS/macOS/Web) https://github.com/JakeWharton/SdkSearch (Android/Web) https://github.com/saket/press (Android/macOS) https://github.com/cashapp/sqldelight/tree/master/sample (Android/iOS/Web)","title":"Resources"},{"location":"multiplatform_sqlite/resources/#other-resources","text":"","title":"Other Resources"},{"location":"multiplatform_sqlite/resources/#guides","text":"Introduction to Multiplatform Persistence with SQLDelight","title":"Guides"},{"location":"multiplatform_sqlite/resources/#samples","text":"https://github.com/joreilly/PeopleInSpace (Android/iOS/watchOS/macOS/Web) https://github.com/JakeWharton/SdkSearch (Android/Web) https://github.com/saket/press (Android/macOS) https://github.com/cashapp/sqldelight/tree/master/sample (Android/iOS/Web)","title":"Samples"},{"location":"multiplatform_sqlite/transactions/","text":"API If you want to execute multiple statements under one transaction, use transaction function. val players = listOf < Player >() database . playerQueries . transaction { players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } To return a value from a transaction, use the transactionWithReturn function. val players = database . playerQueries . transactionWithReturn { database . playerQueries . selectAll (). executeAsList () } Rollback Transactions will roll back if an exception occurs anywhere in them. You can manually roll back a transaction anywhere inside of one, but if your transaction returns a value you will need to specify a value for the transaction to return. database . playerQueries . transaction { players . forEach { player -> if ( player . number == 0 ) rollback () database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } val numberInserted = database . playerQueries . transactionWithReturn { players . forEach { player -> if ( player . number == 0 ) rollback ( 0 ) database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } players . size } Callbacks You can register callbacks to occur after a transaction has completed or rolled back: database . playerQueries . transaction { afterRollback { log ( \"No players were inserted.\" ) } afterCommit { log ( \"${players.size} players were inserted.\" ) } players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } }","title":"Transactions"},{"location":"multiplatform_sqlite/transactions/#api","text":"If you want to execute multiple statements under one transaction, use transaction function. val players = listOf < Player >() database . playerQueries . transaction { players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } To return a value from a transaction, use the transactionWithReturn function. val players = database . playerQueries . transactionWithReturn { database . playerQueries . selectAll (). executeAsList () }","title":"API"},{"location":"multiplatform_sqlite/transactions/#rollback","text":"Transactions will roll back if an exception occurs anywhere in them. You can manually roll back a transaction anywhere inside of one, but if your transaction returns a value you will need to specify a value for the transaction to return. database . playerQueries . transaction { players . forEach { player -> if ( player . number == 0 ) rollback () database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } val numberInserted = database . playerQueries . transactionWithReturn { players . forEach { player -> if ( player . number == 0 ) rollback ( 0 ) database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } players . size }","title":"Rollback"},{"location":"multiplatform_sqlite/transactions/#callbacks","text":"You can register callbacks to occur after a transaction has completed or rolled back: database . playerQueries . transaction { afterRollback { log ( \"No players were inserted.\" ) } afterCommit { log ( \"${players.size} players were inserted.\" ) } players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } }","title":"Callbacks"},{"location":"multiplatform_sqlite/types/","text":"SQLite Types SQLDelight column definitions are identical to regular SQLite column definitions but support an extra column constraint which specifies the Kotlin type of the column in the generated interface. SQLDelight natively supports Long, Double, String, ByteArray, Int, Short, Float, and Booleans. CREATE TABLE some_types ( some_long INTEGER , -- Stored as INTEGER in db, retrieved as Long some_double REAL , -- Stored as REAL in db, retrieved as Double some_string TEXT , -- Stored as TEXT in db, retrieved as String some_blob BLOB , -- Stored as BLOB in db, retrieved as ByteArray some_int INTEGER AS Int , -- Stored as INTEGER in db, retrieved as Int some_short INTEGER AS Short , -- Stored as INTEGER in db, retrieved as Short some_float REAL AS Float -- Stored as REAL in db, retrieved as Float ); Boolean columns are stored in the db as INTEGER , and so they can be given INTEGER column constraints. Use DEFAULT 0 to default to false, for example. CREATE TABLE hockey_player ( injured INTEGER AS Boolean DEFAULT 0 ) Custom Column Types If you'd like to retrieve columns as custom types you can specify a Kotlin type: import kotlin . collections . List ; CREATE TABLE hockeyPlayer ( cup_wins TEXT AS List < String > NOT NULL ); However, creating the Database will require you to provide a ColumnAdapter which knows how to map between the database type and your custom type: val listOfStringsAdapter = object : ColumnAdapter < List < String >, String > { override fun decode ( databaseValue : String ) = databaseValue . split ( \",\" ) override fun encode ( value : List < String >) = value . joinToString ( separator = \",\" ) } val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = hockeyPlayer . Adapter ( cup_winsAdapter = listOfStringsAdapter ) ) Enums As a convenience the SQLDelight runtime includes a ColumnAdapter for storing an enum as String data. import com . example . hockey . HockeyPlayer ; CREATE TABLE hockeyPlayer ( position TEXT AS HockeyPlayer . Position ) val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = HockeyPlayer . Adapter ( positionAdapter = EnumColumnAdapter () ) )","title":"Types"},{"location":"multiplatform_sqlite/types/#sqlite-types","text":"SQLDelight column definitions are identical to regular SQLite column definitions but support an extra column constraint which specifies the Kotlin type of the column in the generated interface. SQLDelight natively supports Long, Double, String, ByteArray, Int, Short, Float, and Booleans. CREATE TABLE some_types ( some_long INTEGER , -- Stored as INTEGER in db, retrieved as Long some_double REAL , -- Stored as REAL in db, retrieved as Double some_string TEXT , -- Stored as TEXT in db, retrieved as String some_blob BLOB , -- Stored as BLOB in db, retrieved as ByteArray some_int INTEGER AS Int , -- Stored as INTEGER in db, retrieved as Int some_short INTEGER AS Short , -- Stored as INTEGER in db, retrieved as Short some_float REAL AS Float -- Stored as REAL in db, retrieved as Float ); Boolean columns are stored in the db as INTEGER , and so they can be given INTEGER column constraints. Use DEFAULT 0 to default to false, for example. CREATE TABLE hockey_player ( injured INTEGER AS Boolean DEFAULT 0 )","title":"SQLite Types"},{"location":"multiplatform_sqlite/types/#custom-column-types","text":"If you'd like to retrieve columns as custom types you can specify a Kotlin type: import kotlin . collections . List ; CREATE TABLE hockeyPlayer ( cup_wins TEXT AS List < String > NOT NULL ); However, creating the Database will require you to provide a ColumnAdapter which knows how to map between the database type and your custom type: val listOfStringsAdapter = object : ColumnAdapter < List < String >, String > { override fun decode ( databaseValue : String ) = databaseValue . split ( \",\" ) override fun encode ( value : List < String >) = value . joinToString ( separator = \",\" ) } val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = hockeyPlayer . Adapter ( cup_winsAdapter = listOfStringsAdapter ) )","title":"Custom Column Types"},{"location":"multiplatform_sqlite/types/#enums","text":"As a convenience the SQLDelight runtime includes a ColumnAdapter for storing an enum as String data. import com . example . hockey . HockeyPlayer ; CREATE TABLE hockeyPlayer ( position TEXT AS HockeyPlayer . Position ) val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = HockeyPlayer . Adapter ( positionAdapter = EnumColumnAdapter () ) )","title":"Enums"},{"location":"native_sqlite/","text":"Getting started on Kotlin Native with SQLDelight First apply the gradle plugin in your project. buildscript { repositories { google () mavenCentral () } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.4.0' } } apply plugin: 'com.squareup.sqldelight' sqldelight { Database { // This will be the name of the generated database class. packageName = \"com.example\" } } Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); From this SQLDelight will generate a Database Kotlin class with an associated Schema object that can be used to create your database and run your statements on it. Doing this also requires a driver, which SQLDelight provides implementations of: kotlin { // or sourceSets.iosMain, sourceSets.windowsMain, etc. sourceSets . nativeMain . dependencies { implementation \"com.squareup.sqldelight:native-driver:1.4.0\" } } val driver : SqlDriver = NativeSqliteDriver ( Database . Schema , \"test.db\" ) SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality.","title":"Getting Started"},{"location":"native_sqlite/#getting-started-on-kotlin-native-with-sqldelight","text":"First apply the gradle plugin in your project. buildscript { repositories { google () mavenCentral () } dependencies { classpath 'com.squareup.sqldelight:gradle-plugin:1.4.0' } } apply plugin: 'com.squareup.sqldelight' sqldelight { Database { // This will be the name of the generated database class. packageName = \"com.example\" } } Put your SQL statements in a .sq file under src/main/sqldelight . Typically the first statement in the SQL file creates a table. -- src/main/sqldelight/com/example/sqldelight/hockey/data/Player.sq CREATE TABLE hockeyPlayer ( player_number INTEGER NOT NULL , full_name TEXT NOT NULL ); CREATE INDEX hockeyPlayer_full_name ON hockeyPlayer ( full_name ); INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( 15 , 'Ryan Getzlaf' ); From this SQLDelight will generate a Database Kotlin class with an associated Schema object that can be used to create your database and run your statements on it. Doing this also requires a driver, which SQLDelight provides implementations of: kotlin { // or sourceSets.iosMain, sourceSets.windowsMain, etc. sourceSets . nativeMain . dependencies { implementation \"com.squareup.sqldelight:native-driver:1.4.0\" } } val driver : SqlDriver = NativeSqliteDriver ( Database . Schema , \"test.db\" ) SQL statements inside a .sq file can be labeled to have a typesafe function generated for them available at runtime. selectAll : SELECT * FROM hockeyPlayer ; insert : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ( ? , ? ); insertFullPlayerObject : INSERT INTO hockeyPlayer ( player_number , full_name ) VALUES ? ; Files with labeled statements in them will have a queries file generated from them that matches the .sq file name - putting the above sql into Player.sq generates PlayerQueries.kt . To get a reference to PlayerQueries you need to wrap the driver we made above: // In reality the database and driver above should be created a single time // and passed around using your favourite dependency injection/service // locator/singleton pattern. val database = Database ( driver ) val playerQueries : PlayerQueries = database . playerQueries println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\")] playerQueries . insert ( player_number = 10 , full_name = \"Corey Perry\" ) println ( playerQueries . selectAll (). executeAsList ()) // Prints [HockeyPlayer(15, \"Ryan Getzlaf\"), HockeyPlayer(10, \"Corey Perry\")] val player = HockeyPlayer ( 10 , \"Ronald McDonald\" ) playerQueries . insertFullPlayerObject ( player ) And that's it! Check out the other pages on the sidebar for other functionality.","title":"Getting started on Kotlin Native with SQLDelight"},{"location":"native_sqlite/coroutines/","text":"Flow To consume a query as a Flow, depend on the Coroutines extensions artifact and use the extension method it provides: kotlin { sourceSets . commonMain . dependencies { implementation \"com.squareup.sqldelight:coroutines-extensions:1.4.0\" } } val players : Flow < List < HockeyPlayer >> = playerQueries . selectAll () . asFlow () . mapToList () This flow emits the query result, and emits a new result every time the database changes for that query.","title":"Coroutines"},{"location":"native_sqlite/coroutines/#flow","text":"To consume a query as a Flow, depend on the Coroutines extensions artifact and use the extension method it provides: kotlin { sourceSets . commonMain . dependencies { implementation \"com.squareup.sqldelight:coroutines-extensions:1.4.0\" } } val players : Flow < List < HockeyPlayer >> = playerQueries . selectAll () . asFlow () . mapToList () This flow emits the query result, and emits a new result every time the database changes for that query.","title":"Flow"},{"location":"native_sqlite/custom_projections/","text":"Projections By default queries will return a data class with your projection, but you can override the behavior with a typesafe mapper. val selectAllNames = playerQueries . selectAll ( mapper = { player_number , full_name -> full_name . toUppercase () } ) println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"] In general you should be leveraging SQL to do custom projections whenever possible. selectNames : SELECT upper ( full_name ) FROM hockeyPlayer ; val selectAllNames = playerQueries . selectNames () println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]","title":"Projections"},{"location":"native_sqlite/custom_projections/#projections","text":"By default queries will return a data class with your projection, but you can override the behavior with a typesafe mapper. val selectAllNames = playerQueries . selectAll ( mapper = { player_number , full_name -> full_name . toUppercase () } ) println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"] In general you should be leveraging SQL to do custom projections whenever possible. selectNames : SELECT upper ( full_name ) FROM hockeyPlayer ; val selectAllNames = playerQueries . selectNames () println ( selectAllNames . executeAsList ()) // Prints [\"RYAN GETZLAF\", \"COREY PERRY\"]","title":"Projections"},{"location":"native_sqlite/gradle/","text":"Gradle For greater customization, you can declare databases explicitly using the Gradle DSL. build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db'. // Defaults to [\"sqldelight\"] (src/main/sqldelight) sourceFolders = [ \"db\" ] // The directory where to store '.db' schema files relative to the root // of the project. These files are used to verify that migrations yield // a database with the latest schema. Defaults to null so the verification // tasks will not be created. schemaOutputDirectory = file ( \"src/main/sqldelight/databases\" ) // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // The dialect version you would like to target // Defaults to \"sqlite:3.18\" dialect = \"sqlite:3.24\" } // For native targets, whether sqlite should be automatically linked. // Defaults to true. linkSqlite = false } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = listOf ( \"db\" ) schemaOutputDirectory = file ( \"build/dbs\" ) dependency ( project ( \":OtherProject\" )) dialect = \"sqlite:3.24\" } linkSqlite = false } Dependencies You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Gradle"},{"location":"native_sqlite/gradle/#gradle","text":"For greater customization, you can declare databases explicitly using the Gradle DSL. build.gradle : sqldelight { // Database name MyDatabase { // Package name used for the generated MyDatabase.kt packageName = \"com.example.db\" // An array of folders where the plugin will read your '.sq' and '.sqm' // files. The folders are relative to the existing source set so if you // specify [\"db\"], the plugin will look into 'src/main/db'. // Defaults to [\"sqldelight\"] (src/main/sqldelight) sourceFolders = [ \"db\" ] // The directory where to store '.db' schema files relative to the root // of the project. These files are used to verify that migrations yield // a database with the latest schema. Defaults to null so the verification // tasks will not be created. schemaOutputDirectory = file ( \"src/main/sqldelight/databases\" ) // Optionally specify schema dependencies on other gradle projects dependency project ( ':OtherProject' ) // The dialect version you would like to target // Defaults to \"sqlite:3.18\" dialect = \"sqlite:3.24\" } // For native targets, whether sqlite should be automatically linked. // Defaults to true. linkSqlite = false } If you're using Kotlin for your Gradle files: build.gradle.kts sqldelight { database ( \"MyDatabase\" ) { packageName = \"com.example.db\" sourceFolders = listOf ( \"db\" ) schemaOutputDirectory = file ( \"build/dbs\" ) dependency ( project ( \":OtherProject\" )) dialect = \"sqlite:3.24\" } linkSqlite = false }","title":"Gradle"},{"location":"native_sqlite/gradle/#dependencies","text":"You can specify schema dependencies on another module: sqldelight { MyDatabase { package = \"com.example.projecta\" dependency project ( \":ProjectB\" ) } } This looks for MyDatabase in ProjectB and includes it's schema when compiling. For this to work, ProjectB must have a database with the same name ( MyDatabase in this case) but generate in a different package, so here is what ProjectB 's gradle might look like: sqldelight { MyDatabase { package = \"com.example.projectb\" } }","title":"Dependencies"},{"location":"native_sqlite/grouping_statements/","text":"You can group multiple SQL statements together to be executed at once: upsert { UPDATE myTable SET column1 = : column1 , column2 = : column2 WHERE id = : id ; INSERT OR IGNORE INTO myTable ( id , column1 , column2 ) VALUES (: column1 , : column2 , : column3 ); }","title":"Grouping Statements"},{"location":"native_sqlite/intellij_plugin/","text":"IntelliJ Plugin The IntelliJ plugin provides language-level features for .sq files, including: Syntax highlighting Refactoring/Find usages Code autocompletion Generate Queries files after edits Right click to copy as valid SQLite Compiler errors in IDE click through to file It can be installed from your IDE by navigating Preferences -> Plugins -> Marketplace -> Search for SQLDelight","title":"IntelliJ Plugin"},{"location":"native_sqlite/intellij_plugin/#intellij-plugin","text":"The IntelliJ plugin provides language-level features for .sq files, including: Syntax highlighting Refactoring/Find usages Code autocompletion Generate Queries files after edits Right click to copy as valid SQLite Compiler errors in IDE click through to file It can be installed from your IDE by navigating Preferences -> Plugins -> Marketplace -> Search for SQLDelight","title":"IntelliJ Plugin"},{"location":"native_sqlite/migrations/","text":"Migrations The .sq file always describes how to create the latest schema in an empty database. If your database is currently on an earlier version, migration files bring those databases up-to-date. Versioning The first version of the schema is 1. Migration files are named <version to upgrade from>.sqm . To migrate to version 2, put migration statements in 1.sqm : ALTER TABLE hockeyPlayer ADD COLUMN draft_year INTEGER ; ALTER TABLE hockeyPlayer ADD COLUMN draft_order INTEGER ; These SQL statements are run by Database.Schema.migrate() . Migration files go in the same source set as your .sq files. Verifying Migrations You can also place a .db file in the src/main/sqldelight folder of the same <version number>.db format. If there is a .db file present, a new verifySqlDelightMigration task will be added to the gradle project, and it will run as part of the test task, meaning your migrations will be verified against that .db file. It confirms that the migrations yield a database with the latest schema. To generate a .db file from your latest schema, run the generateSqlDelightSchema task, which is available once you specify a schemaOutputDirectory , as described in the gradle.md . You should probably do this before you create your first migration.","title":"Migrations"},{"location":"native_sqlite/migrations/#migrations","text":"The .sq file always describes how to create the latest schema in an empty database. If your database is currently on an earlier version, migration files bring those databases up-to-date.","title":"Migrations"},{"location":"native_sqlite/migrations/#versioning","text":"The first version of the schema is 1. Migration files are named <version to upgrade from>.sqm . To migrate to version 2, put migration statements in 1.sqm : ALTER TABLE hockeyPlayer ADD COLUMN draft_year INTEGER ; ALTER TABLE hockeyPlayer ADD COLUMN draft_order INTEGER ; These SQL statements are run by Database.Schema.migrate() . Migration files go in the same source set as your .sq files.","title":"Versioning"},{"location":"native_sqlite/migrations/#verifying-migrations","text":"You can also place a .db file in the src/main/sqldelight folder of the same <version number>.db format. If there is a .db file present, a new verifySqlDelightMigration task will be added to the gradle project, and it will run as part of the test task, meaning your migrations will be verified against that .db file. It confirms that the migrations yield a database with the latest schema. To generate a .db file from your latest schema, run the generateSqlDelightSchema task, which is available once you specify a schemaOutputDirectory , as described in the gradle.md . You should probably do this before you create your first migration.","title":"Verifying Migrations"},{"location":"native_sqlite/query_arguments/","text":"Bind Args .sq files use the exact same syntax as SQLite, including SQLite Bind Args . If a statement contains bind args, the associated method will require corresponding arguments. Type Inference SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\" Named Arguments Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" ) Variable Arguments Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" )) Inserts INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Arguments"},{"location":"native_sqlite/query_arguments/#bind-args","text":".sq files use the exact same syntax as SQLite, including SQLite Bind Args . If a statement contains bind args, the associated method will require corresponding arguments.","title":"Bind Args"},{"location":"native_sqlite/query_arguments/#type-inference","text":"SQLDelight will infer the correct type and nullability of runtime parameters, including custom column types. selectByNumber : SELECT * FROM hockeyPlayer WHERE player_number = ? ; val selectNumber10 = playerQueries . selectByNumber ( player_number = 10 ) println ( selectNumber10 . executeAsOne ()) // Prints \"Corey Perry\"","title":"Type Inference"},{"location":"native_sqlite/query_arguments/#named-arguments","text":"Named parameters or indexed parameters can be used. firstOrLastName : SELECT * FROM hockeyPlayer WHERE full_name LIKE ( '% ' || : name ) OR full_name LIKE (: name || ' %' ); playerQueries . firstOrLastName ( name = \"Ryan\" )","title":"Named Arguments"},{"location":"native_sqlite/query_arguments/#variable-arguments","text":"Sets of values can also be passed as an argument. selectByNames : SELECT * FROM hockeyPlayer WHERE full_name IN ? ; playerQueries . selectByNames ( listOf ( \"Alec\" , \"Jake\" , \"Matt\" ))","title":"Variable Arguments"},{"location":"native_sqlite/query_arguments/#inserts","text":"INSERT VALUES arguments can be bound to with the table's data class. insertPlayer : INSERT INTO hockeyPlayer VALUES ? ; val rickardRakell = HockeyPlayer ( full_name = \"Rickard Rakell\" , number = 67 ) playerQueries . insertPlayer ( rickardRakell )","title":"Inserts"},{"location":"native_sqlite/transactions/","text":"API If you want to execute multiple statements under one transaction, use transaction function. val players = listOf < Player >() database . playerQueries . transaction { players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } To return a value from a transaction, use the transactionWithReturn function. val players = database . playerQueries . transactionWithReturn { database . playerQueries . selectAll (). executeAsList () } Rollback Transactions will roll back if an exception occurs anywhere in them. You can manually roll back a transaction anywhere inside of one, but if your transaction returns a value you will need to specify a value for the transaction to return. database . playerQueries . transaction { players . forEach { player -> if ( player . number == 0 ) rollback () database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } val numberInserted = database . playerQueries . transactionWithReturn { players . forEach { player -> if ( player . number == 0 ) rollback ( 0 ) database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } players . size } Callbacks You can register callbacks to occur after a transaction has completed or rolled back: database . playerQueries . transaction { afterRollback { log ( \"No players were inserted.\" ) } afterCommit { log ( \"${players.size} players were inserted.\" ) } players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } }","title":"Transactions"},{"location":"native_sqlite/transactions/#api","text":"If you want to execute multiple statements under one transaction, use transaction function. val players = listOf < Player >() database . playerQueries . transaction { players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } To return a value from a transaction, use the transactionWithReturn function. val players = database . playerQueries . transactionWithReturn { database . playerQueries . selectAll (). executeAsList () }","title":"API"},{"location":"native_sqlite/transactions/#rollback","text":"Transactions will roll back if an exception occurs anywhere in them. You can manually roll back a transaction anywhere inside of one, but if your transaction returns a value you will need to specify a value for the transaction to return. database . playerQueries . transaction { players . forEach { player -> if ( player . number == 0 ) rollback () database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } } val numberInserted = database . playerQueries . transactionWithReturn { players . forEach { player -> if ( player . number == 0 ) rollback ( 0 ) database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } players . size }","title":"Rollback"},{"location":"native_sqlite/transactions/#callbacks","text":"You can register callbacks to occur after a transaction has completed or rolled back: database . playerQueries . transaction { afterRollback { log ( \"No players were inserted.\" ) } afterCommit { log ( \"${players.size} players were inserted.\" ) } players . forEach { player -> database . playerQueries . insert ( player_number = player . number , full_name = player . fullName ) } }","title":"Callbacks"},{"location":"native_sqlite/types/","text":"SQLite Types SQLDelight column definitions are identical to regular SQLite column definitions but support an extra column constraint which specifies the Kotlin type of the column in the generated interface. SQLDelight natively supports Long, Double, String, ByteArray, Int, Short, Float, and Booleans. CREATE TABLE some_types ( some_long INTEGER , -- Stored as INTEGER in db, retrieved as Long some_double REAL , -- Stored as REAL in db, retrieved as Double some_string TEXT , -- Stored as TEXT in db, retrieved as String some_blob BLOB , -- Stored as BLOB in db, retrieved as ByteArray some_int INTEGER AS Int , -- Stored as INTEGER in db, retrieved as Int some_short INTEGER AS Short , -- Stored as INTEGER in db, retrieved as Short some_float REAL AS Float -- Stored as REAL in db, retrieved as Float ); Boolean columns are stored in the db as INTEGER , and so they can be given INTEGER column constraints. Use DEFAULT 0 to default to false, for example. CREATE TABLE hockey_player ( injured INTEGER AS Boolean DEFAULT 0 ) Custom Column Types If you'd like to retrieve columns as custom types you can specify a Kotlin type: import kotlin . collections . List ; CREATE TABLE hockeyPlayer ( cup_wins TEXT AS List < String > NOT NULL ); However, creating the Database will require you to provide a ColumnAdapter which knows how to map between the database type and your custom type: val listOfStringsAdapter = object : ColumnAdapter < List < String >, String > { override fun decode ( databaseValue : String ) = databaseValue . split ( \",\" ) override fun encode ( value : List < String >) = value . joinToString ( separator = \",\" ) } val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = hockeyPlayer . Adapter ( cup_winsAdapter = listOfStringsAdapter ) ) Enums As a convenience the SQLDelight runtime includes a ColumnAdapter for storing an enum as String data. import com . example . hockey . HockeyPlayer ; CREATE TABLE hockeyPlayer ( position TEXT AS HockeyPlayer . Position ) val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = HockeyPlayer . Adapter ( positionAdapter = EnumColumnAdapter () ) )","title":"Types"},{"location":"native_sqlite/types/#sqlite-types","text":"SQLDelight column definitions are identical to regular SQLite column definitions but support an extra column constraint which specifies the Kotlin type of the column in the generated interface. SQLDelight natively supports Long, Double, String, ByteArray, Int, Short, Float, and Booleans. CREATE TABLE some_types ( some_long INTEGER , -- Stored as INTEGER in db, retrieved as Long some_double REAL , -- Stored as REAL in db, retrieved as Double some_string TEXT , -- Stored as TEXT in db, retrieved as String some_blob BLOB , -- Stored as BLOB in db, retrieved as ByteArray some_int INTEGER AS Int , -- Stored as INTEGER in db, retrieved as Int some_short INTEGER AS Short , -- Stored as INTEGER in db, retrieved as Short some_float REAL AS Float -- Stored as REAL in db, retrieved as Float ); Boolean columns are stored in the db as INTEGER , and so they can be given INTEGER column constraints. Use DEFAULT 0 to default to false, for example. CREATE TABLE hockey_player ( injured INTEGER AS Boolean DEFAULT 0 )","title":"SQLite Types"},{"location":"native_sqlite/types/#custom-column-types","text":"If you'd like to retrieve columns as custom types you can specify a Kotlin type: import kotlin . collections . List ; CREATE TABLE hockeyPlayer ( cup_wins TEXT AS List < String > NOT NULL ); However, creating the Database will require you to provide a ColumnAdapter which knows how to map between the database type and your custom type: val listOfStringsAdapter = object : ColumnAdapter < List < String >, String > { override fun decode ( databaseValue : String ) = databaseValue . split ( \",\" ) override fun encode ( value : List < String >) = value . joinToString ( separator = \",\" ) } val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = hockeyPlayer . Adapter ( cup_winsAdapter = listOfStringsAdapter ) )","title":"Custom Column Types"},{"location":"native_sqlite/types/#enums","text":"As a convenience the SQLDelight runtime includes a ColumnAdapter for storing an enum as String data. import com . example . hockey . HockeyPlayer ; CREATE TABLE hockeyPlayer ( position TEXT AS HockeyPlayer . Position ) val queryWrapper : Database = Database ( driver = driver , hockeyPlayerAdapter = HockeyPlayer . Adapter ( positionAdapter = EnumColumnAdapter () ) )","title":"Enums"}]}
